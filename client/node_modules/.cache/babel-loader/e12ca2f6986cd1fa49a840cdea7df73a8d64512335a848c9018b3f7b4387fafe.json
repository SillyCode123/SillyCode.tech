{"ast":null,"code":"'use strict';\n\nconst {\n  OverwriteType\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  Role\n} = require('./Role');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n * @extends {Base}\n */\nclass PermissionOverwrites extends Base {\n  constructor(client, data, channel) {\n    super(client);\n\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', {\n      value: channel\n    });\n    if (data) this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The overwrite's id, either a {@link User} or a {@link Role} id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('type' in data) {\n      /**\n       * The type of this overwrite\n       * @type {OverwriteType}\n       */\n      this.type = data.type;\n    }\n    if ('deny' in data) {\n      /**\n       * The permissions that are denied for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.deny = new PermissionsBitField(BigInt(data.deny)).freeze();\n    }\n    if ('allow' in data) {\n      /**\n       * The permissions that are allowed for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.allow = new PermissionsBitField(BigInt(data.allow)).freeze();\n    }\n  }\n\n  /**\n   * Edits this Permission Overwrite.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.edit({\n   *   SendMessages: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  async edit(options, reason) {\n    await this.channel.permissionOverwrites.upsert(this.id, options, {\n      type: this.type,\n      reason\n    }, this);\n    return this;\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  async delete(reason) {\n    await this.channel.permissionOverwrites.delete(this.id, reason);\n    return this;\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      type: this.type,\n      allow: this.allow,\n      deny: this.deny\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SendMessages': true,\n   *  'EmbedLinks': null,\n   *  'AttachFiles': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {Object} ResolvedOverwriteOptions\n   * @property {PermissionsBitField} allow The allowed permissions\n   * @property {PermissionsBitField} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options) {\n    let {\n      allow,\n      deny\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    allow = new PermissionsBitField(allow);\n    deny = new PermissionsBitField(deny);\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(perm);\n        deny.remove(perm);\n      } else if (value === false) {\n        allow.remove(perm);\n        deny.add(perm);\n      } else if (value === null) {\n        allow.remove(perm);\n        deny.remove(perm);\n      }\n    }\n    return {\n      allow,\n      deny\n    };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {string} allow The permissions to allow\n   * @property {string} deny The permissions to deny\n   * @property {number} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}. This can be:\n   * * PermissionOverwrites\n   * * OverwriteData\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} [guild] The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteType) {\n      return {\n        id: overwrite.id,\n        type: overwrite.type,\n        allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n        deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString()\n      };\n    }\n    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;\n    return {\n      id: userOrRole.id,\n      type,\n      allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n      deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString()\n    };\n  }\n}\nmodule.exports = PermissionOverwrites;","map":{"version":3,"names":["OverwriteType","require","Base","Role","DiscordjsTypeError","ErrorCodes","PermissionsBitField","PermissionOverwrites","constructor","client","data","channel","Object","defineProperty","value","_patch","id","type","deny","BigInt","freeze","allow","edit","options","reason","permissionOverwrites","upsert","delete","toJSON","resolveOverwriteOptions","perm","entries","add","remove","resolve","overwrite","guild","DefaultBit","toString","userOrRole","roles","users","InvalidType","Member","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/PermissionOverwrites.js"],"sourcesContent":["'use strict';\n\nconst { OverwriteType } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { Role } = require('./Role');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n * @extends {Base}\n */\nclass PermissionOverwrites extends Base {\n  constructor(client, data, channel) {\n    super(client);\n\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: channel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The overwrite's id, either a {@link User} or a {@link Role} id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('type' in data) {\n      /**\n       * The type of this overwrite\n       * @type {OverwriteType}\n       */\n      this.type = data.type;\n    }\n\n    if ('deny' in data) {\n      /**\n       * The permissions that are denied for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.deny = new PermissionsBitField(BigInt(data.deny)).freeze();\n    }\n\n    if ('allow' in data) {\n      /**\n       * The permissions that are allowed for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.allow = new PermissionsBitField(BigInt(data.allow)).freeze();\n    }\n  }\n\n  /**\n   * Edits this Permission Overwrite.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.edit({\n   *   SendMessages: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  async edit(options, reason) {\n    await this.channel.permissionOverwrites.upsert(this.id, options, { type: this.type, reason }, this);\n    return this;\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  async delete(reason) {\n    await this.channel.permissionOverwrites.delete(this.id, reason);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      type: this.type,\n      allow: this.allow,\n      deny: this.deny,\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SendMessages': true,\n   *  'EmbedLinks': null,\n   *  'AttachFiles': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {Object} ResolvedOverwriteOptions\n   * @property {PermissionsBitField} allow The allowed permissions\n   * @property {PermissionsBitField} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new PermissionsBitField(allow);\n    deny = new PermissionsBitField(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(perm);\n        deny.remove(perm);\n      } else if (value === false) {\n        allow.remove(perm);\n        deny.add(perm);\n      } else if (value === null) {\n        allow.remove(perm);\n        deny.remove(perm);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {string} allow The permissions to allow\n   * @property {string} deny The permissions to deny\n   * @property {number} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}. This can be:\n   * * PermissionOverwrites\n   * * OverwriteData\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} [guild] The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteType) {\n      return {\n        id: overwrite.id,\n        type: overwrite.type,\n        allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n        deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),\n      };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n      deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}