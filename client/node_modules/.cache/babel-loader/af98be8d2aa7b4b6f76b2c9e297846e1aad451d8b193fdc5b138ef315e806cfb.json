{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Options for defining the behavior of a LimitedCollection\n * @typedef {Object} LimitedCollectionOptions\n * @property {?number} [maxSize=Infinity] The maximum size of the Collection\n * @property {?Function} [keepOverLimit=null] A function, which is passed the value and key of an entry, ran to decide\n * to keep an entry past the maximum size\n */\n\n/**\n * A Collection which holds a max amount of entries.\n * @extends {Collection}\n * @param {LimitedCollectionOptions} [options={}] Options for constructing the Collection.\n * @param {Iterable} [iterable=null] Optional entries passed to the Map constructor.\n */\nclass LimitedCollection extends Collection {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let iterable = arguments.length > 1 ? arguments[1] : undefined;\n    if (typeof options !== 'object' || options === null) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    }\n    const {\n      maxSize = Infinity,\n      keepOverLimit = null\n    } = options;\n    if (typeof maxSize !== 'number') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'maxSize', 'number');\n    }\n    if (keepOverLimit !== null && typeof keepOverLimit !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'keepOverLimit', 'function');\n    }\n    super(iterable);\n\n    /**\n     * The max size of the Collection.\n     * @type {number}\n     */\n    this.maxSize = maxSize;\n\n    /**\n     * A function called to check if an entry should be kept when the Collection is at max size.\n     * @type {?Function}\n     */\n    this.keepOverLimit = keepOverLimit;\n  }\n  set(key, value) {\n    if (this.maxSize === 0) return this;\n    if (this.size >= this.maxSize && !this.has(key)) {\n      for (const [k, v] of this.entries()) {\n        const keep = this.keepOverLimit?.(v, k, this) ?? false;\n        if (!keep) {\n          this.delete(k);\n          break;\n        }\n      }\n    }\n    return super.set(key, value);\n  }\n  static get [Symbol.species]() {\n    return Collection;\n  }\n}\nmodule.exports = LimitedCollection;","map":{"version":3,"names":["Collection","require","DiscordjsTypeError","ErrorCodes","LimitedCollection","constructor","options","iterable","InvalidType","maxSize","Infinity","keepOverLimit","set","key","value","size","has","k","v","entries","keep","delete","Symbol","species","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/LimitedCollection.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Options for defining the behavior of a LimitedCollection\n * @typedef {Object} LimitedCollectionOptions\n * @property {?number} [maxSize=Infinity] The maximum size of the Collection\n * @property {?Function} [keepOverLimit=null] A function, which is passed the value and key of an entry, ran to decide\n * to keep an entry past the maximum size\n */\n\n/**\n * A Collection which holds a max amount of entries.\n * @extends {Collection}\n * @param {LimitedCollectionOptions} [options={}] Options for constructing the Collection.\n * @param {Iterable} [iterable=null] Optional entries passed to the Map constructor.\n */\nclass LimitedCollection extends Collection {\n  constructor(options = {}, iterable) {\n    if (typeof options !== 'object' || options === null) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    }\n    const { maxSize = Infinity, keepOverLimit = null } = options;\n\n    if (typeof maxSize !== 'number') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'maxSize', 'number');\n    }\n    if (keepOverLimit !== null && typeof keepOverLimit !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'keepOverLimit', 'function');\n    }\n\n    super(iterable);\n\n    /**\n     * The max size of the Collection.\n     * @type {number}\n     */\n    this.maxSize = maxSize;\n\n    /**\n     * A function called to check if an entry should be kept when the Collection is at max size.\n     * @type {?Function}\n     */\n    this.keepOverLimit = keepOverLimit;\n  }\n\n  set(key, value) {\n    if (this.maxSize === 0) return this;\n    if (this.size >= this.maxSize && !this.has(key)) {\n      for (const [k, v] of this.entries()) {\n        const keep = this.keepOverLimit?.(v, k, this) ?? false;\n        if (!keep) {\n          this.delete(k);\n          break;\n        }\n      }\n    }\n    return super.set(key, value);\n  }\n\n  static get [Symbol.species]() {\n    return Collection;\n  }\n}\n\nmodule.exports = LimitedCollection;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC,kBAAkB;EAAEC;AAAW,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,iBAAiB,SAASJ,UAAU,CAAC;EACzCK,WAAW,GAAyB;IAAA,IAAxBC,OAAO,uEAAG,CAAC,CAAC;IAAA,IAAEC,QAAQ;IAChC,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;MACnD,MAAM,IAAIJ,kBAAkB,CAACC,UAAU,CAACK,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC;IACjF;IACA,MAAM;MAAEC,OAAO,GAAGC,QAAQ;MAAEC,aAAa,GAAG;IAAK,CAAC,GAAGL,OAAO;IAE5D,IAAI,OAAOG,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIP,kBAAkB,CAACC,UAAU,CAACK,WAAW,EAAE,SAAS,EAAE,QAAQ,CAAC;IAC3E;IACA,IAAIG,aAAa,KAAK,IAAI,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;MACjE,MAAM,IAAIT,kBAAkB,CAACC,UAAU,CAACK,WAAW,EAAE,eAAe,EAAE,UAAU,CAAC;IACnF;IAEA,KAAK,CAACD,QAAQ,CAAC;;IAEf;AACJ;AACA;AACA;IACI,IAAI,CAACE,OAAO,GAAGA,OAAO;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACE,aAAa,GAAGA,aAAa;EACpC;EAEAC,GAAG,CAACC,GAAG,EAAEC,KAAK,EAAE;IACd,IAAI,IAAI,CAACL,OAAO,KAAK,CAAC,EAAE,OAAO,IAAI;IACnC,IAAI,IAAI,CAACM,IAAI,IAAI,IAAI,CAACN,OAAO,IAAI,CAAC,IAAI,CAACO,GAAG,CAACH,GAAG,CAAC,EAAE;MAC/C,KAAK,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,IAAI,IAAI,CAACC,OAAO,EAAE,EAAE;QACnC,MAAMC,IAAI,GAAG,IAAI,CAACT,aAAa,GAAGO,CAAC,EAAED,CAAC,EAAE,IAAI,CAAC,IAAI,KAAK;QACtD,IAAI,CAACG,IAAI,EAAE;UACT,IAAI,CAACC,MAAM,CAACJ,CAAC,CAAC;UACd;QACF;MACF;IACF;IACA,OAAO,KAAK,CAACL,GAAG,CAACC,GAAG,EAAEC,KAAK,CAAC;EAC9B;EAEA,YAAYQ,MAAM,CAACC,OAAO,IAAI;IAC5B,OAAOvB,UAAU;EACnB;AACF;AAEAwB,MAAM,CAACC,OAAO,GAAGrB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}