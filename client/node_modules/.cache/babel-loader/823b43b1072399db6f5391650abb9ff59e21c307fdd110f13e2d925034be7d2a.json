{"ast":null,"code":"'use strict';\n\nconst {\n  InteractionType,\n  ComponentType,\n  ApplicationCommandType\n} = require('discord-api-types/v10');\nconst Action = require('./Action');\nconst AutocompleteInteraction = require('../../structures/AutocompleteInteraction');\nconst ButtonInteraction = require('../../structures/ButtonInteraction');\nconst ChannelSelectMenuInteraction = require('../../structures/ChannelSelectMenuInteraction');\nconst ChatInputCommandInteraction = require('../../structures/ChatInputCommandInteraction');\nconst MentionableSelectMenuInteraction = require('../../structures/MentionableSelectMenuInteraction');\nconst MessageContextMenuCommandInteraction = require('../../structures/MessageContextMenuCommandInteraction');\nconst ModalSubmitInteraction = require('../../structures/ModalSubmitInteraction');\nconst RoleSelectMenuInteraction = require('../../structures/RoleSelectMenuInteraction');\nconst StringSelectMenuInteraction = require('../../structures/StringSelectMenuInteraction');\nconst UserContextMenuCommandInteraction = require('../../structures/UserContextMenuCommandInteraction');\nconst UserSelectMenuInteraction = require('../../structures/UserSelectMenuInteraction');\nconst Events = require('../../util/Events');\nclass InteractionCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    // Resolve and cache partial channels for Interaction#channel getter\n    const channel = this.getChannel(data);\n\n    // Do not emit this for interactions that cache messages that are non-text-based.\n    let InteractionClass;\n    switch (data.type) {\n      case InteractionType.ApplicationCommand:\n        switch (data.data.type) {\n          case ApplicationCommandType.ChatInput:\n            InteractionClass = ChatInputCommandInteraction;\n            break;\n          case ApplicationCommandType.User:\n            InteractionClass = UserContextMenuCommandInteraction;\n            break;\n          case ApplicationCommandType.Message:\n            if (channel && !channel.isTextBased()) return;\n            InteractionClass = MessageContextMenuCommandInteraction;\n            break;\n          default:\n            client.emit(Events.Debug, `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`);\n            return;\n        }\n        break;\n      case InteractionType.MessageComponent:\n        if (channel && !channel.isTextBased()) return;\n        switch (data.data.component_type) {\n          case ComponentType.Button:\n            InteractionClass = ButtonInteraction;\n            break;\n          case ComponentType.StringSelect:\n            InteractionClass = StringSelectMenuInteraction;\n            break;\n          case ComponentType.UserSelect:\n            InteractionClass = UserSelectMenuInteraction;\n            break;\n          case ComponentType.RoleSelect:\n            InteractionClass = RoleSelectMenuInteraction;\n            break;\n          case ComponentType.MentionableSelect:\n            InteractionClass = MentionableSelectMenuInteraction;\n            break;\n          case ComponentType.ChannelSelect:\n            InteractionClass = ChannelSelectMenuInteraction;\n            break;\n          default:\n            client.emit(Events.Debug, `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`);\n            return;\n        }\n        break;\n      case InteractionType.ApplicationCommandAutocomplete:\n        InteractionClass = AutocompleteInteraction;\n        break;\n      case InteractionType.ModalSubmit:\n        InteractionClass = ModalSubmitInteraction;\n        break;\n      default:\n        client.emit(Events.Debug, `[INTERACTION] Received interaction with unknown type: ${data.type}`);\n        return;\n    }\n    const interaction = new InteractionClass(client, data);\n\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interactionCreate\n     * @param {BaseInteraction} interaction The interaction which was created\n     */\n    client.emit(Events.InteractionCreate, interaction);\n  }\n}\nmodule.exports = InteractionCreateAction;","map":{"version":3,"names":["InteractionType","ComponentType","ApplicationCommandType","require","Action","AutocompleteInteraction","ButtonInteraction","ChannelSelectMenuInteraction","ChatInputCommandInteraction","MentionableSelectMenuInteraction","MessageContextMenuCommandInteraction","ModalSubmitInteraction","RoleSelectMenuInteraction","StringSelectMenuInteraction","UserContextMenuCommandInteraction","UserSelectMenuInteraction","Events","InteractionCreateAction","handle","data","client","channel","getChannel","InteractionClass","type","ApplicationCommand","ChatInput","User","Message","isTextBased","emit","Debug","MessageComponent","component_type","Button","StringSelect","UserSelect","RoleSelect","MentionableSelect","ChannelSelect","ApplicationCommandAutocomplete","ModalSubmit","interaction","InteractionCreate","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/InteractionCreate.js"],"sourcesContent":["'use strict';\n\nconst { InteractionType, ComponentType, ApplicationCommandType } = require('discord-api-types/v10');\nconst Action = require('./Action');\nconst AutocompleteInteraction = require('../../structures/AutocompleteInteraction');\nconst ButtonInteraction = require('../../structures/ButtonInteraction');\nconst ChannelSelectMenuInteraction = require('../../structures/ChannelSelectMenuInteraction');\nconst ChatInputCommandInteraction = require('../../structures/ChatInputCommandInteraction');\nconst MentionableSelectMenuInteraction = require('../../structures/MentionableSelectMenuInteraction');\nconst MessageContextMenuCommandInteraction = require('../../structures/MessageContextMenuCommandInteraction');\nconst ModalSubmitInteraction = require('../../structures/ModalSubmitInteraction');\nconst RoleSelectMenuInteraction = require('../../structures/RoleSelectMenuInteraction');\nconst StringSelectMenuInteraction = require('../../structures/StringSelectMenuInteraction');\nconst UserContextMenuCommandInteraction = require('../../structures/UserContextMenuCommandInteraction');\nconst UserSelectMenuInteraction = require('../../structures/UserSelectMenuInteraction');\nconst Events = require('../../util/Events');\n\nclass InteractionCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    // Resolve and cache partial channels for Interaction#channel getter\n    const channel = this.getChannel(data);\n\n    // Do not emit this for interactions that cache messages that are non-text-based.\n    let InteractionClass;\n\n    switch (data.type) {\n      case InteractionType.ApplicationCommand:\n        switch (data.data.type) {\n          case ApplicationCommandType.ChatInput:\n            InteractionClass = ChatInputCommandInteraction;\n            break;\n          case ApplicationCommandType.User:\n            InteractionClass = UserContextMenuCommandInteraction;\n            break;\n          case ApplicationCommandType.Message:\n            if (channel && !channel.isTextBased()) return;\n            InteractionClass = MessageContextMenuCommandInteraction;\n            break;\n          default:\n            client.emit(\n              Events.Debug,\n              `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`,\n            );\n            return;\n        }\n        break;\n      case InteractionType.MessageComponent:\n        if (channel && !channel.isTextBased()) return;\n\n        switch (data.data.component_type) {\n          case ComponentType.Button:\n            InteractionClass = ButtonInteraction;\n            break;\n          case ComponentType.StringSelect:\n            InteractionClass = StringSelectMenuInteraction;\n            break;\n          case ComponentType.UserSelect:\n            InteractionClass = UserSelectMenuInteraction;\n            break;\n          case ComponentType.RoleSelect:\n            InteractionClass = RoleSelectMenuInteraction;\n            break;\n          case ComponentType.MentionableSelect:\n            InteractionClass = MentionableSelectMenuInteraction;\n            break;\n          case ComponentType.ChannelSelect:\n            InteractionClass = ChannelSelectMenuInteraction;\n            break;\n          default:\n            client.emit(\n              Events.Debug,\n              `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`,\n            );\n            return;\n        }\n        break;\n      case InteractionType.ApplicationCommandAutocomplete:\n        InteractionClass = AutocompleteInteraction;\n        break;\n      case InteractionType.ModalSubmit:\n        InteractionClass = ModalSubmitInteraction;\n        break;\n      default:\n        client.emit(Events.Debug, `[INTERACTION] Received interaction with unknown type: ${data.type}`);\n        return;\n    }\n\n    const interaction = new InteractionClass(client, data);\n\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interactionCreate\n     * @param {BaseInteraction} interaction The interaction which was created\n     */\n    client.emit(Events.InteractionCreate, interaction);\n  }\n}\n\nmodule.exports = InteractionCreateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,eAAe;EAAEC,aAAa;EAAEC;AAAuB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnG,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,uBAAuB,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AACnF,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,oCAAoC,CAAC;AACvE,MAAMI,4BAA4B,GAAGJ,OAAO,CAAC,+CAA+C,CAAC;AAC7F,MAAMK,2BAA2B,GAAGL,OAAO,CAAC,8CAA8C,CAAC;AAC3F,MAAMM,gCAAgC,GAAGN,OAAO,CAAC,mDAAmD,CAAC;AACrG,MAAMO,oCAAoC,GAAGP,OAAO,CAAC,uDAAuD,CAAC;AAC7G,MAAMQ,sBAAsB,GAAGR,OAAO,CAAC,yCAAyC,CAAC;AACjF,MAAMS,yBAAyB,GAAGT,OAAO,CAAC,4CAA4C,CAAC;AACvF,MAAMU,2BAA2B,GAAGV,OAAO,CAAC,8CAA8C,CAAC;AAC3F,MAAMW,iCAAiC,GAAGX,OAAO,CAAC,oDAAoD,CAAC;AACvG,MAAMY,yBAAyB,GAAGZ,OAAO,CAAC,4CAA4C,CAAC;AACvF,MAAMa,MAAM,GAAGb,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAMc,uBAAuB,SAASb,MAAM,CAAC;EAC3Cc,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;;IAE1B;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACH,IAAI,CAAC;;IAErC;IACA,IAAII,gBAAgB;IAEpB,QAAQJ,IAAI,CAACK,IAAI;MACf,KAAKxB,eAAe,CAACyB,kBAAkB;QACrC,QAAQN,IAAI,CAACA,IAAI,CAACK,IAAI;UACpB,KAAKtB,sBAAsB,CAACwB,SAAS;YACnCH,gBAAgB,GAAGf,2BAA2B;YAC9C;UACF,KAAKN,sBAAsB,CAACyB,IAAI;YAC9BJ,gBAAgB,GAAGT,iCAAiC;YACpD;UACF,KAAKZ,sBAAsB,CAAC0B,OAAO;YACjC,IAAIP,OAAO,IAAI,CAACA,OAAO,CAACQ,WAAW,EAAE,EAAE;YACvCN,gBAAgB,GAAGb,oCAAoC;YACvD;UACF;YACEU,MAAM,CAACU,IAAI,CACTd,MAAM,CAACe,KAAK,EACX,6EAA4EZ,IAAI,CAACA,IAAI,CAACK,IAAK,EAAC,CAC9F;YACD;QAAO;QAEX;MACF,KAAKxB,eAAe,CAACgC,gBAAgB;QACnC,IAAIX,OAAO,IAAI,CAACA,OAAO,CAACQ,WAAW,EAAE,EAAE;QAEvC,QAAQV,IAAI,CAACA,IAAI,CAACc,cAAc;UAC9B,KAAKhC,aAAa,CAACiC,MAAM;YACvBX,gBAAgB,GAAGjB,iBAAiB;YACpC;UACF,KAAKL,aAAa,CAACkC,YAAY;YAC7BZ,gBAAgB,GAAGV,2BAA2B;YAC9C;UACF,KAAKZ,aAAa,CAACmC,UAAU;YAC3Bb,gBAAgB,GAAGR,yBAAyB;YAC5C;UACF,KAAKd,aAAa,CAACoC,UAAU;YAC3Bd,gBAAgB,GAAGX,yBAAyB;YAC5C;UACF,KAAKX,aAAa,CAACqC,iBAAiB;YAClCf,gBAAgB,GAAGd,gCAAgC;YACnD;UACF,KAAKR,aAAa,CAACsC,aAAa;YAC9BhB,gBAAgB,GAAGhB,4BAA4B;YAC/C;UACF;YACEa,MAAM,CAACU,IAAI,CACTd,MAAM,CAACe,KAAK,EACX,mEAAkEZ,IAAI,CAACA,IAAI,CAACc,cAAe,EAAC,CAC9F;YACD;QAAO;QAEX;MACF,KAAKjC,eAAe,CAACwC,8BAA8B;QACjDjB,gBAAgB,GAAGlB,uBAAuB;QAC1C;MACF,KAAKL,eAAe,CAACyC,WAAW;QAC9BlB,gBAAgB,GAAGZ,sBAAsB;QACzC;MACF;QACES,MAAM,CAACU,IAAI,CAACd,MAAM,CAACe,KAAK,EAAG,yDAAwDZ,IAAI,CAACK,IAAK,EAAC,CAAC;QAC/F;IAAO;IAGX,MAAMkB,WAAW,GAAG,IAAInB,gBAAgB,CAACH,MAAM,EAAED,IAAI,CAAC;;IAEtD;AACJ;AACA;AACA;AACA;IACIC,MAAM,CAACU,IAAI,CAACd,MAAM,CAAC2B,iBAAiB,EAAED,WAAW,CAAC;EACpD;AACF;AAEAE,MAAM,CAACC,OAAO,GAAG5B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}