{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Status = require('../../util/Status');\nclass GuildMemberUpdateAction extends Action {\n  handle(data, shard) {\n    const {\n      client\n    } = this;\n    if (data.user.username) {\n      const user = client.users.cache.get(data.user.id);\n      if (!user) {\n        client.users._add(data.user);\n      } else if (!user._equals(data.user)) {\n        client.actions.UserUpdate.handle(data.user);\n      }\n    }\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const member = this.getMember({\n        user: data.user\n      }, guild);\n      if (member) {\n        const old = member._update(data);\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n        if (shard.status === Status.Ready && !member.equals(old)) client.emit(Events.GuildMemberUpdate, old, member);\n      } else {\n        const newMember = guild.members._add(data);\n        /**\n         * Emitted whenever a member becomes available.\n         * @event Client#guildMemberAvailable\n         * @param {GuildMember} member The member that became available\n         */\n        this.client.emit(Events.GuildMemberAvailable, newMember);\n      }\n    }\n  }\n}\nmodule.exports = GuildMemberUpdateAction;","map":{"version":3,"names":["Action","require","Events","Status","GuildMemberUpdateAction","handle","data","shard","client","user","username","users","cache","get","id","_add","_equals","actions","UserUpdate","guild","guilds","guild_id","member","getMember","old","_update","status","Ready","equals","emit","GuildMemberUpdate","newMember","members","GuildMemberAvailable","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/GuildMemberUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Status = require('../../util/Status');\n\nclass GuildMemberUpdateAction extends Action {\n  handle(data, shard) {\n    const { client } = this;\n    if (data.user.username) {\n      const user = client.users.cache.get(data.user.id);\n      if (!user) {\n        client.users._add(data.user);\n      } else if (!user._equals(data.user)) {\n        client.actions.UserUpdate.handle(data.user);\n      }\n    }\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const member = this.getMember({ user: data.user }, guild);\n      if (member) {\n        const old = member._update(data);\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n        if (shard.status === Status.Ready && !member.equals(old)) client.emit(Events.GuildMemberUpdate, old, member);\n      } else {\n        const newMember = guild.members._add(data);\n        /**\n         * Emitted whenever a member becomes available.\n         * @event Client#guildMemberAvailable\n         * @param {GuildMember} member The member that became available\n         */\n        this.client.emit(Events.GuildMemberAvailable, newMember);\n      }\n    }\n  }\n}\n\nmodule.exports = GuildMemberUpdateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC3C,MAAME,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAMG,uBAAuB,SAASJ,MAAM,CAAC;EAC3CK,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAE;IAClB,MAAM;MAAEC;IAAO,CAAC,GAAG,IAAI;IACvB,IAAIF,IAAI,CAACG,IAAI,CAACC,QAAQ,EAAE;MACtB,MAAMD,IAAI,GAAGD,MAAM,CAACG,KAAK,CAACC,KAAK,CAACC,GAAG,CAACP,IAAI,CAACG,IAAI,CAACK,EAAE,CAAC;MACjD,IAAI,CAACL,IAAI,EAAE;QACTD,MAAM,CAACG,KAAK,CAACI,IAAI,CAACT,IAAI,CAACG,IAAI,CAAC;MAC9B,CAAC,MAAM,IAAI,CAACA,IAAI,CAACO,OAAO,CAACV,IAAI,CAACG,IAAI,CAAC,EAAE;QACnCD,MAAM,CAACS,OAAO,CAACC,UAAU,CAACb,MAAM,CAACC,IAAI,CAACG,IAAI,CAAC;MAC7C;IACF;IAEA,MAAMU,KAAK,GAAGX,MAAM,CAACY,MAAM,CAACR,KAAK,CAACC,GAAG,CAACP,IAAI,CAACe,QAAQ,CAAC;IACpD,IAAIF,KAAK,EAAE;MACT,MAAMG,MAAM,GAAG,IAAI,CAACC,SAAS,CAAC;QAAEd,IAAI,EAAEH,IAAI,CAACG;MAAK,CAAC,EAAEU,KAAK,CAAC;MACzD,IAAIG,MAAM,EAAE;QACV,MAAME,GAAG,GAAGF,MAAM,CAACG,OAAO,CAACnB,IAAI,CAAC;QAChC;AACR;AACA;AACA;AACA;AACA;QACQ,IAAIC,KAAK,CAACmB,MAAM,KAAKvB,MAAM,CAACwB,KAAK,IAAI,CAACL,MAAM,CAACM,MAAM,CAACJ,GAAG,CAAC,EAAEhB,MAAM,CAACqB,IAAI,CAAC3B,MAAM,CAAC4B,iBAAiB,EAAEN,GAAG,EAAEF,MAAM,CAAC;MAC9G,CAAC,MAAM;QACL,MAAMS,SAAS,GAAGZ,KAAK,CAACa,OAAO,CAACjB,IAAI,CAACT,IAAI,CAAC;QAC1C;AACR;AACA;AACA;AACA;QACQ,IAAI,CAACE,MAAM,CAACqB,IAAI,CAAC3B,MAAM,CAAC+B,oBAAoB,EAAEF,SAAS,CAAC;MAC1D;IACF;EACF;AACF;AAEAG,MAAM,CAACC,OAAO,GAAG/B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}