{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst {\n  flatten\n} = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);\n    this._emoji = new ReactionEmoji(this, data.emoji);\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('count' in data) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count ??= data.count;\n    }\n  }\n\n  /**\n   * Makes the client user react with this reaction\n   * @returns {Promise<MessageReaction>}\n   */\n  react() {\n    return this.message.react(this.emoji);\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.rest.delete(Routes.channelMessageReaction(this.message.channelId, this.message.id, this._emoji.identifier));\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis, or a {@link ReactionEmoji}\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing ?? {\n      count: 0\n    });\n    return this;\n  }\n  toJSON() {\n    return flatten(this, {\n      emoji: 'emojiId',\n      message: 'messageId'\n    });\n  }\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    this.me ||= user.id === this.message.client.user.id;\n  }\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);\n    }\n  }\n}\nmodule.exports = MessageReaction;","map":{"version":3,"names":["Routes","require","GuildEmoji","ReactionEmoji","ReactionUserManager","flatten","MessageReaction","constructor","client","data","message","Object","defineProperty","value","me","users","user","_emoji","emoji","_patch","count","react","remove","rest","delete","channelMessageReaction","channelId","id","identifier","emojis","cache","has","get","partial","fetch","existing","reactions","name","toJSON","_add","set","_remove","size","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/MessageReaction.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst { flatten } = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('count' in data) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count ??= data.count;\n    }\n  }\n\n  /**\n   * Makes the client user react with this reaction\n   * @returns {Promise<MessageReaction>}\n   */\n  react() {\n    return this.message.react(this.emoji);\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.rest.delete(\n      Routes.channelMessageReaction(this.message.channelId, this.message.id, this._emoji.identifier),\n    );\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis, or a {@link ReactionEmoji}\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing ?? { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return flatten(this, { emoji: 'emojiId', message: 'messageId' });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    this.me ||= user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}