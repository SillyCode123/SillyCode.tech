{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst GuildChannel = require('./GuildChannel');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n    if ('rtc_region' in data) {\n      /**\n       * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n       * @type {?string}\n       */\n      this.rtcRegion = data.rtc_region;\n    }\n    if ('bitrate' in data) {\n      /**\n       * The bitrate of this voice-based channel\n       * @type {number}\n       */\n      this.bitrate = data.bitrate;\n    }\n    if ('user_limit' in data) {\n      /**\n       * The maximum amount of users allowed in this channel.\n       * @type {number}\n       */\n      this.userLimit = data.user_limit;\n    }\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows joining even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    return this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(PermissionFlagsBits.Connect, false);\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @param {string} [reason] The reason for modifying this region.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to sydney\n   * channel.setRTCRegion('sydney');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null, 'We want to let Discord decide.');\n   */\n  setRTCRegion(rtcRegion, reason) {\n    return this.edit({\n      rtcRegion,\n      reason\n    });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether or not to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites() {\n    let cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.invites.fetch({\n      channelId: this.id,\n      cache\n    });\n  }\n}\nmodule.exports = BaseGuildVoiceChannel;","map":{"version":3,"names":["Collection","require","PermissionFlagsBits","GuildChannel","BaseGuildVoiceChannel","_patch","data","rtcRegion","rtc_region","bitrate","userLimit","user_limit","members","coll","state","guild","voiceStates","cache","values","channelId","id","member","set","full","size","joinable","viewable","permissions","permissionsFor","client","user","has","Administrator","me","communicationDisabledUntilTimestamp","Date","now","Connect","setRTCRegion","reason","edit","createInvite","options","invites","create","fetchInvites","fetch","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/BaseGuildVoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst GuildChannel = require('./GuildChannel');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('rtc_region' in data) {\n      /**\n       * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n       * @type {?string}\n       */\n      this.rtcRegion = data.rtc_region;\n    }\n\n    if ('bitrate' in data) {\n      /**\n       * The bitrate of this voice-based channel\n       * @type {number}\n       */\n      this.bitrate = data.bitrate;\n    }\n\n    if ('user_limit' in data) {\n      /**\n       * The maximum amount of users allowed in this channel.\n       * @type {number}\n       */\n      this.userLimit = data.user_limit;\n    }\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows joining even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Connect, false)\n    );\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @param {string} [reason] The reason for modifying this region.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to sydney\n   * channel.setRTCRegion('sydney');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null, 'We want to let Discord decide.');\n   */\n  setRTCRegion(rtcRegion, reason) {\n    return this.edit({ rtcRegion, reason });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether or not to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n}\n\nmodule.exports = BaseGuildVoiceChannel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}