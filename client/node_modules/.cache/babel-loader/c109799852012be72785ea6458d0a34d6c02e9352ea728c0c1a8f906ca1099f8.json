{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst {\n  BaseChannel\n} = require('./BaseChannel');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst PermissionOverwriteManager = require('../managers/PermissionOverwriteManager');\nconst {\n  VoiceBasedChannelTypes\n} = require('../util/Constants');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a guild channel from any of the following:\n * - {@link TextChannel}\n * - {@link VoiceChannel}\n * - {@link CategoryChannel}\n * - {@link NewsChannel}\n * - {@link StageChannel}\n * - {@link ForumChannel}\n * @extends {BaseChannel}\n * @abstract\n */\nclass GuildChannel extends BaseChannel {\n  constructor(guild, data, client) {\n    let immediatePatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    super(guild?.client ?? client, data, false);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the guild the channel is in\n     * @type {Snowflake}\n     */\n    this.guildId = guild?.id ?? data.guild_id;\n    this.parentId = this.parentId ?? null;\n    /**\n     * A manager of permission overwrites that belong to this channel\n     * @type {PermissionOverwriteManager}\n     */\n    this.permissionOverwrites = new PermissionOverwriteManager(this);\n    if (data && immediatePatch) this._patch(data);\n  }\n  _patch(data) {\n    super._patch(data);\n    if ('name' in data) {\n      /**\n       * The name of the guild channel\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('position' in data) {\n      /**\n       * The raw position of the channel from Discord\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n    if ('guild_id' in data) {\n      this.guildId = data.guild_id;\n    }\n    if ('parent_id' in data) {\n      /**\n       * The id of the category parent of this channel\n       * @type {?Snowflake}\n       */\n      this.parentId = data.parent_id;\n    }\n    if ('permission_overwrites' in data) {\n      this.permissionOverwrites.cache.clear();\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites._add(overwrite);\n      }\n    }\n  }\n  _clone() {\n    const clone = super._clone();\n    clone.permissionOverwrites = new PermissionOverwriteManager(clone, this.permissionOverwrites.cache.values());\n    return clone;\n  }\n\n  /**\n   * The category parent of this channel\n   * @type {?CategoryChannel}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.resolve(this.parentId);\n  }\n\n  /**\n   * If the permissionOverwrites match the parent channel, null if no parent\n   * @type {?boolean}\n   * @readonly\n   */\n  get permissionsLocked() {\n    if (!this.parent) return null;\n\n    // Get all overwrites\n    const overwriteIds = new Set([...this.permissionOverwrites.cache.keys(), ...this.parent.permissionOverwrites.cache.keys()]);\n\n    // Compare all overwrites\n    return [...overwriteIds].every(key => {\n      const channelVal = this.permissionOverwrites.cache.get(key);\n      const parentVal = this.parent.permissionOverwrites.cache.get(key);\n\n      // Handle empty overwrite\n      if (!channelVal && parentVal.deny.bitfield === PermissionsBitField.DefaultBit && parentVal.allow.bitfield === PermissionsBitField.DefaultBit || !parentVal && channelVal.deny.bitfield === PermissionsBitField.DefaultBit && channelVal.allow.bitfield === PermissionsBitField.DefaultBit) {\n        return true;\n      }\n\n      // Compare overwrites\n      return typeof channelVal !== 'undefined' && typeof parentVal !== 'undefined' && channelVal.deny.bitfield === parentVal.deny.bitfield && channelVal.allow.bitfield === parentVal.allow.bitfield;\n    });\n  }\n\n  /**\n   * The position of the channel\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const sorted = this.guild._sortedChannels(this);\n    return [...sorted.values()].indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.\n   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {?Readonly<PermissionsBitField>}\n   */\n  permissionsFor(memberOrRole) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const member = this.guild.members.resolve(memberOrRole);\n    if (member) return this.memberPermissions(member, checkAdmin);\n    const role = this.guild.roles.resolve(memberOrRole);\n    return role && this.rolePermissions(role, checkAdmin);\n  }\n  overwritesFor(member) {\n    let verified = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let roles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (!verified) member = this.guild.members.resolve(member);\n    if (!member) return [];\n    roles ??= member.roles.cache;\n    const roleOverwrites = [];\n    let memberOverwrites;\n    let everyoneOverwrites;\n    for (const overwrite of this.permissionOverwrites.cache.values()) {\n      if (overwrite.id === this.guild.id) {\n        everyoneOverwrites = overwrite;\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      } else if (overwrite.id === member.id) {\n        memberOverwrites = overwrite;\n      }\n    }\n    return {\n      everyone: everyoneOverwrites,\n      roles: roleOverwrites,\n      member: memberOverwrites\n    };\n  }\n\n  /**\n   * Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.\n   * @param {GuildMember} member The member to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  memberPermissions(member, checkAdmin) {\n    if (checkAdmin && member.id === this.guild.ownerId) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n    const roles = member.roles.cache;\n    const permissions = new PermissionsBitField(roles.map(role => role.permissions));\n    if (checkAdmin && permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n    const overwrites = this.overwritesFor(member, true, roles);\n    return permissions.remove(overwrites.everyone?.deny ?? PermissionsBitField.DefaultBit).add(overwrites.everyone?.allow ?? PermissionsBitField.DefaultBit).remove(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.deny) : PermissionsBitField.DefaultBit).add(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.allow) : PermissionsBitField.DefaultBit).remove(overwrites.member?.deny ?? PermissionsBitField.DefaultBit).add(overwrites.member?.allow ?? PermissionsBitField.DefaultBit).freeze();\n  }\n\n  /**\n   * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.\n   * @param {Role} role The role to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  rolePermissions(role, checkAdmin) {\n    if (checkAdmin && role.permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n    const everyoneOverwrites = this.permissionOverwrites.cache.get(this.guild.id);\n    const roleOverwrites = this.permissionOverwrites.cache.get(role.id);\n    return role.permissions.remove(everyoneOverwrites?.deny ?? PermissionsBitField.DefaultBit).add(everyoneOverwrites?.allow ?? PermissionsBitField.DefaultBit).remove(roleOverwrites?.deny ?? PermissionsBitField.DefaultBit).add(roleOverwrites?.allow ?? PermissionsBitField.DefaultBit).freeze();\n  }\n\n  /**\n   * Locks in the permission overwrites from the parent channel.\n   * @returns {Promise<GuildChannel>}\n   */\n  lockPermissions() {\n    if (!this.parent) return Promise.reject(new DiscordjsError(ErrorCodes.GuildChannelOrphan));\n    const permissionOverwrites = this.parent.permissionOverwrites.cache.map(overwrite => overwrite.toJSON());\n    return this.edit({\n      permissionOverwrites\n    });\n  }\n\n  /**\n   * A collection of cached members of this channel, mapped by their ids.\n   * Members that can view this channel, if the channel is text-based.\n   * Members in the channel, if the channel is voice-based.\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.cache.filter(m => this.permissionsFor(m).has(PermissionFlagsBits.ViewChannel, false));\n  }\n\n  /**\n   * Edits the channel.\n   * @param {GuildChannelEditOptions} data The new data for the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * channel.edit({ name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.channels.edit(this, data);\n  }\n\n  /**\n   * Sets a new name for the guild channel.\n   * @param {string} name The new name for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's name\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel name\n   * channel.setName('not_general')\n   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Options used to set the parent of a channel.\n   * @typedef {Object} SetParentOptions\n   * @property {boolean} [lockPermissions=true] Whether to lock the permissions to what the parent's permissions are\n   * @property {string} [reason] The reason for modifying the parent of the channel\n   */\n\n  /**\n   * Sets the parent of this channel.\n   * @param {?CategoryChannelResolvable} channel The category channel to set as the parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Add a parent to a channel\n   * message.channel.setParent('355908108431917066', { lockPermissions: false })\n   *   .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setParent(channel) {\n    let {\n      lockPermissions = true,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.edit({\n      parent: channel ?? null,\n      lockPermissions,\n      reason\n    });\n  }\n\n  /**\n   * Options used to set the position of a channel.\n   * @typedef {Object} SetChannelPositionOptions\n   * @property {boolean} [relative=false] Whether or not to change the position relative to its current value\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets a new position for the guild channel.\n   * @param {number} position The new position for the guild channel\n   * @param {SetChannelPositionOptions} [options] Options for setting position\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * channel.setPosition(2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.guild.channels.setPosition(this, position, options);\n  }\n\n  /**\n   * Options used to clone a guild channel.\n   * @typedef {GuildChannelCreateOptions} GuildChannelCloneOptions\n   * @property {string} [name=this.name] Name of the new channel\n   */\n\n  /**\n   * Clones this channel.\n   * @param {GuildChannelCloneOptions} [options] The options for cloning this channel\n   * @returns {Promise<GuildChannel>}\n   */\n  clone() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.guild.channels.create({\n      name: options.name ?? this.name,\n      permissionOverwrites: this.permissionOverwrites.cache,\n      topic: this.topic,\n      type: this.type,\n      nsfw: this.nsfw,\n      parent: this.parent,\n      bitrate: this.bitrate,\n      userLimit: this.userLimit,\n      rateLimitPerUser: this.rateLimitPerUser,\n      position: this.rawPosition,\n      reason: null,\n      ...options\n    });\n  }\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal = channel && this.id === channel.id && this.type === channel.type && this.topic === channel.topic && this.position === channel.position && this.name === channel.name;\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.cache.equals(channel.permissionOverwrites.cache);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n    return equal;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.manageable && this.guild.rulesChannelId !== this.id && this.guild.publicUpdatesChannelId !== this.id;\n  }\n\n  /**\n   * Whether the channel is manageable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows managing even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    if (this.guild.members.me.communicationDisabledUntilTimestamp > Date.now()) return false;\n    const bitfield = VoiceBasedChannelTypes.includes(this.type) ? PermissionFlagsBits.ManageChannels | PermissionFlagsBits.Connect : PermissionFlagsBits.ViewChannel | PermissionFlagsBits.ManageChannels;\n    return permissions.has(bitfield, false);\n  }\n\n  /**\n   * Whether the channel is viewable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get viewable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    return permissions.has(PermissionFlagsBits.ViewChannel, false);\n  }\n\n  /**\n   * Deletes this channel.\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete('making room for new channels')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.channels.delete(this.id, reason);\n    return this;\n  }\n}\nmodule.exports = GuildChannel;","map":{"version":3,"names":["PermissionFlagsBits","require","BaseChannel","DiscordjsError","ErrorCodes","PermissionOverwriteManager","VoiceBasedChannelTypes","PermissionsBitField","GuildChannel","constructor","guild","data","client","immediatePatch","guildId","id","guild_id","parentId","permissionOverwrites","_patch","name","rawPosition","position","parent_id","cache","clear","overwrite","permission_overwrites","_add","_clone","clone","values","parent","channels","resolve","permissionsLocked","overwriteIds","Set","keys","every","key","channelVal","get","parentVal","deny","bitfield","DefaultBit","allow","sorted","_sortedChannels","indexOf","permissionsFor","memberOrRole","checkAdmin","member","members","memberPermissions","role","roles","rolePermissions","overwritesFor","verified","roleOverwrites","memberOverwrites","everyoneOverwrites","has","push","everyone","ownerId","All","freeze","permissions","map","Administrator","overwrites","remove","add","length","lockPermissions","Promise","reject","GuildChannelOrphan","toJSON","edit","filter","m","ViewChannel","setName","reason","setParent","channel","setPosition","options","create","topic","type","nsfw","bitrate","userLimit","rateLimitPerUser","equals","equal","deletable","manageable","rulesChannelId","publicUpdatesChannelId","user","me","communicationDisabledUntilTimestamp","Date","now","includes","ManageChannels","Connect","viewable","delete","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildChannel.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst { BaseChannel } = require('./BaseChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst PermissionOverwriteManager = require('../managers/PermissionOverwriteManager');\nconst { VoiceBasedChannelTypes } = require('../util/Constants');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a guild channel from any of the following:\n * - {@link TextChannel}\n * - {@link VoiceChannel}\n * - {@link CategoryChannel}\n * - {@link NewsChannel}\n * - {@link StageChannel}\n * - {@link ForumChannel}\n * @extends {BaseChannel}\n * @abstract\n */\nclass GuildChannel extends BaseChannel {\n  constructor(guild, data, client, immediatePatch = true) {\n    super(guild?.client ?? client, data, false);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the guild the channel is in\n     * @type {Snowflake}\n     */\n    this.guildId = guild?.id ?? data.guild_id;\n\n    this.parentId = this.parentId ?? null;\n    /**\n     * A manager of permission overwrites that belong to this channel\n     * @type {PermissionOverwriteManager}\n     */\n    this.permissionOverwrites = new PermissionOverwriteManager(this);\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('name' in data) {\n      /**\n       * The name of the guild channel\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the channel from Discord\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('guild_id' in data) {\n      this.guildId = data.guild_id;\n    }\n\n    if ('parent_id' in data) {\n      /**\n       * The id of the category parent of this channel\n       * @type {?Snowflake}\n       */\n      this.parentId = data.parent_id;\n    }\n\n    if ('permission_overwrites' in data) {\n      this.permissionOverwrites.cache.clear();\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites._add(overwrite);\n      }\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone.permissionOverwrites = new PermissionOverwriteManager(clone, this.permissionOverwrites.cache.values());\n    return clone;\n  }\n\n  /**\n   * The category parent of this channel\n   * @type {?CategoryChannel}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.resolve(this.parentId);\n  }\n\n  /**\n   * If the permissionOverwrites match the parent channel, null if no parent\n   * @type {?boolean}\n   * @readonly\n   */\n  get permissionsLocked() {\n    if (!this.parent) return null;\n\n    // Get all overwrites\n    const overwriteIds = new Set([\n      ...this.permissionOverwrites.cache.keys(),\n      ...this.parent.permissionOverwrites.cache.keys(),\n    ]);\n\n    // Compare all overwrites\n    return [...overwriteIds].every(key => {\n      const channelVal = this.permissionOverwrites.cache.get(key);\n      const parentVal = this.parent.permissionOverwrites.cache.get(key);\n\n      // Handle empty overwrite\n      if (\n        (!channelVal &&\n          parentVal.deny.bitfield === PermissionsBitField.DefaultBit &&\n          parentVal.allow.bitfield === PermissionsBitField.DefaultBit) ||\n        (!parentVal &&\n          channelVal.deny.bitfield === PermissionsBitField.DefaultBit &&\n          channelVal.allow.bitfield === PermissionsBitField.DefaultBit)\n      ) {\n        return true;\n      }\n\n      // Compare overwrites\n      return (\n        typeof channelVal !== 'undefined' &&\n        typeof parentVal !== 'undefined' &&\n        channelVal.deny.bitfield === parentVal.deny.bitfield &&\n        channelVal.allow.bitfield === parentVal.allow.bitfield\n      );\n    });\n  }\n\n  /**\n   * The position of the channel\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const sorted = this.guild._sortedChannels(this);\n    return [...sorted.values()].indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.\n   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {?Readonly<PermissionsBitField>}\n   */\n  permissionsFor(memberOrRole, checkAdmin = true) {\n    const member = this.guild.members.resolve(memberOrRole);\n    if (member) return this.memberPermissions(member, checkAdmin);\n    const role = this.guild.roles.resolve(memberOrRole);\n    return role && this.rolePermissions(role, checkAdmin);\n  }\n\n  overwritesFor(member, verified = false, roles = null) {\n    if (!verified) member = this.guild.members.resolve(member);\n    if (!member) return [];\n\n    roles ??= member.roles.cache;\n    const roleOverwrites = [];\n    let memberOverwrites;\n    let everyoneOverwrites;\n\n    for (const overwrite of this.permissionOverwrites.cache.values()) {\n      if (overwrite.id === this.guild.id) {\n        everyoneOverwrites = overwrite;\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      } else if (overwrite.id === member.id) {\n        memberOverwrites = overwrite;\n      }\n    }\n\n    return {\n      everyone: everyoneOverwrites,\n      roles: roleOverwrites,\n      member: memberOverwrites,\n    };\n  }\n\n  /**\n   * Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.\n   * @param {GuildMember} member The member to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  memberPermissions(member, checkAdmin) {\n    if (checkAdmin && member.id === this.guild.ownerId) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const roles = member.roles.cache;\n    const permissions = new PermissionsBitField(roles.map(role => role.permissions));\n\n    if (checkAdmin && permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const overwrites = this.overwritesFor(member, true, roles);\n\n    return permissions\n      .remove(overwrites.everyone?.deny ?? PermissionsBitField.DefaultBit)\n      .add(overwrites.everyone?.allow ?? PermissionsBitField.DefaultBit)\n      .remove(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.deny) : PermissionsBitField.DefaultBit)\n      .add(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.allow) : PermissionsBitField.DefaultBit)\n      .remove(overwrites.member?.deny ?? PermissionsBitField.DefaultBit)\n      .add(overwrites.member?.allow ?? PermissionsBitField.DefaultBit)\n      .freeze();\n  }\n\n  /**\n   * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.\n   * @param {Role} role The role to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  rolePermissions(role, checkAdmin) {\n    if (checkAdmin && role.permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const everyoneOverwrites = this.permissionOverwrites.cache.get(this.guild.id);\n    const roleOverwrites = this.permissionOverwrites.cache.get(role.id);\n\n    return role.permissions\n      .remove(everyoneOverwrites?.deny ?? PermissionsBitField.DefaultBit)\n      .add(everyoneOverwrites?.allow ?? PermissionsBitField.DefaultBit)\n      .remove(roleOverwrites?.deny ?? PermissionsBitField.DefaultBit)\n      .add(roleOverwrites?.allow ?? PermissionsBitField.DefaultBit)\n      .freeze();\n  }\n\n  /**\n   * Locks in the permission overwrites from the parent channel.\n   * @returns {Promise<GuildChannel>}\n   */\n  lockPermissions() {\n    if (!this.parent) return Promise.reject(new DiscordjsError(ErrorCodes.GuildChannelOrphan));\n    const permissionOverwrites = this.parent.permissionOverwrites.cache.map(overwrite => overwrite.toJSON());\n    return this.edit({ permissionOverwrites });\n  }\n\n  /**\n   * A collection of cached members of this channel, mapped by their ids.\n   * Members that can view this channel, if the channel is text-based.\n   * Members in the channel, if the channel is voice-based.\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.cache.filter(m => this.permissionsFor(m).has(PermissionFlagsBits.ViewChannel, false));\n  }\n\n  /**\n   * Edits the channel.\n   * @param {GuildChannelEditOptions} data The new data for the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * channel.edit({ name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.channels.edit(this, data);\n  }\n\n  /**\n   * Sets a new name for the guild channel.\n   * @param {string} name The new name for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's name\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel name\n   * channel.setName('not_general')\n   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Options used to set the parent of a channel.\n   * @typedef {Object} SetParentOptions\n   * @property {boolean} [lockPermissions=true] Whether to lock the permissions to what the parent's permissions are\n   * @property {string} [reason] The reason for modifying the parent of the channel\n   */\n\n  /**\n   * Sets the parent of this channel.\n   * @param {?CategoryChannelResolvable} channel The category channel to set as the parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Add a parent to a channel\n   * message.channel.setParent('355908108431917066', { lockPermissions: false })\n   *   .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setParent(channel, { lockPermissions = true, reason } = {}) {\n    return this.edit({\n      parent: channel ?? null,\n      lockPermissions,\n      reason,\n    });\n  }\n\n  /**\n   * Options used to set the position of a channel.\n   * @typedef {Object} SetChannelPositionOptions\n   * @property {boolean} [relative=false] Whether or not to change the position relative to its current value\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets a new position for the guild channel.\n   * @param {number} position The new position for the guild channel\n   * @param {SetChannelPositionOptions} [options] Options for setting position\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * channel.setPosition(2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, options = {}) {\n    return this.guild.channels.setPosition(this, position, options);\n  }\n\n  /**\n   * Options used to clone a guild channel.\n   * @typedef {GuildChannelCreateOptions} GuildChannelCloneOptions\n   * @property {string} [name=this.name] Name of the new channel\n   */\n\n  /**\n   * Clones this channel.\n   * @param {GuildChannelCloneOptions} [options] The options for cloning this channel\n   * @returns {Promise<GuildChannel>}\n   */\n  clone(options = {}) {\n    return this.guild.channels.create({\n      name: options.name ?? this.name,\n      permissionOverwrites: this.permissionOverwrites.cache,\n      topic: this.topic,\n      type: this.type,\n      nsfw: this.nsfw,\n      parent: this.parent,\n      bitrate: this.bitrate,\n      userLimit: this.userLimit,\n      rateLimitPerUser: this.rateLimitPerUser,\n      position: this.rawPosition,\n      reason: null,\n      ...options,\n    });\n  }\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal =\n      channel &&\n      this.id === channel.id &&\n      this.type === channel.type &&\n      this.topic === channel.topic &&\n      this.position === channel.position &&\n      this.name === channel.name;\n\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.cache.equals(channel.permissionOverwrites.cache);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.manageable && this.guild.rulesChannelId !== this.id && this.guild.publicUpdatesChannelId !== this.id;\n  }\n\n  /**\n   * Whether the channel is manageable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows managing even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    if (this.guild.members.me.communicationDisabledUntilTimestamp > Date.now()) return false;\n\n    const bitfield = VoiceBasedChannelTypes.includes(this.type)\n      ? PermissionFlagsBits.ManageChannels | PermissionFlagsBits.Connect\n      : PermissionFlagsBits.ViewChannel | PermissionFlagsBits.ManageChannels;\n    return permissions.has(bitfield, false);\n  }\n\n  /**\n   * Whether the channel is viewable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get viewable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    return permissions.has(PermissionFlagsBits.ViewChannel, false);\n  }\n\n  /**\n   * Deletes this channel.\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete('making room for new channels')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.channels.delete(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = GuildChannel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}