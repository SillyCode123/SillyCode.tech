{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst DataManager = require('./DataManager');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst {\n  Role\n} = require('../structures/Role');\n\n/**\n * Manages API methods for roles of a GuildMember and stores their cache.\n * @extends {DataManager}\n */\nclass GuildMemberRoleManager extends DataManager {\n  constructor(member) {\n    super(member.client, Role);\n\n    /**\n     * The GuildMember this manager belongs to\n     * @type {GuildMember}\n     */\n    this.member = member;\n\n    /**\n     * The Guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = member.guild;\n  }\n\n  /**\n   * The roles of this member\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    const everyone = this.guild.roles.everyone;\n    return this.guild.roles.cache.filter(role => this.member._roles.includes(role.id)).set(everyone.id, everyone);\n  }\n\n  /**\n   * The role of the member used to hoist them in a separate category in the users list\n   * @type {?Role}\n   * @readonly\n   */\n  get hoist() {\n    const hoistedRoles = this.cache.filter(role => role.hoist);\n    if (!hoistedRoles.size) return null;\n    return hoistedRoles.reduce((prev, role) => role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * The role of the member used to set their role icon\n   * @type {?Role}\n   * @readonly\n   */\n  get icon() {\n    const iconRoles = this.cache.filter(role => role.icon || role.unicodeEmoji);\n    if (!iconRoles.size) return null;\n    return iconRoles.reduce((prev, role) => role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * The role of the member used to set their color\n   * @type {?Role}\n   * @readonly\n   */\n  get color() {\n    const coloredRoles = this.cache.filter(role => role.color);\n    if (!coloredRoles.size) return null;\n    return coloredRoles.reduce((prev, role) => role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * The role of the member with the highest position\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this.cache.reduce((prev, role) => role.comparePositionTo(prev) > 0 ? role : prev, this.cache.first());\n  }\n\n  /**\n   * The premium subscriber role of the guild, if present on the member\n   * @type {?Role}\n   * @readonly\n   */\n  get premiumSubscriberRole() {\n    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;\n  }\n\n  /**\n   * The managed role this member created when joining the guild, if any\n   * <info>Only ever available on bots</info>\n   * @type {?Role}\n   * @readonly\n   */\n  get botRole() {\n    if (!this.member.user.bot) return null;\n    return this.cache.find(role => role.tags?.botId === this.member.user.id) ?? null;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @param {string} [reason] Reason for adding the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async add(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n      const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'roles', 'Role, Snowflake or Array or Collection of Roles or Snowflakes');\n      }\n      await this.client.rest.put(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), {\n        reason\n      });\n      const clone = this.member._clone();\n      clone._roles = [...this.cache.keys(), roleOrRoles];\n      return clone;\n    }\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @param {string} [reason] Reason for removing the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async remove(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n      const newRoles = this.cache.filter(role => !resolvedRoles.includes(role.id));\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'roles', 'Role, Snowflake or Array or Collection of Roles or Snowflakes');\n      }\n      await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), {\n        reason\n      });\n      const clone = this.member._clone();\n      const newRoles = this.cache.filter(role => role.id !== roleOrRoles);\n      clone._roles = [...newRoles.keys()];\n      return clone;\n    }\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @param {string} [reason] Reason for applying the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set the member's roles to a single role\n   * guildMember.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all the roles from a member\n   * guildMember.roles.set([])\n   *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n   *   .catch(console.error);\n   */\n  set(roles, reason) {\n    return this.member.edit({\n      roles,\n      reason\n    });\n  }\n  clone() {\n    const clone = new this.constructor(this.member);\n    clone.member._roles = [...this.cache.keys()];\n    return clone;\n  }\n}\nmodule.exports = GuildMemberRoleManager;","map":{"version":3,"names":["Collection","require","Routes","DataManager","DiscordjsTypeError","ErrorCodes","Role","GuildMemberRoleManager","constructor","member","client","guild","cache","everyone","roles","filter","role","_roles","includes","id","set","hoist","hoistedRoles","size","reduce","prev","comparePositionTo","icon","iconRoles","unicodeEmoji","color","coloredRoles","highest","first","premiumSubscriberRole","find","tags","botRole","user","bot","botId","add","roleOrRoles","reason","Array","isArray","resolvedRoles","values","resolvedRole","resolveId","InvalidElement","push","newRoles","Set","concat","keys","InvalidType","rest","put","guildMemberRole","clone","_clone","remove","delete","edit","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/GuildMemberRoleManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst DataManager = require('./DataManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Role } = require('../structures/Role');\n\n/**\n * Manages API methods for roles of a GuildMember and stores their cache.\n * @extends {DataManager}\n */\nclass GuildMemberRoleManager extends DataManager {\n  constructor(member) {\n    super(member.client, Role);\n\n    /**\n     * The GuildMember this manager belongs to\n     * @type {GuildMember}\n     */\n    this.member = member;\n\n    /**\n     * The Guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = member.guild;\n  }\n\n  /**\n   * The roles of this member\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    const everyone = this.guild.roles.everyone;\n    return this.guild.roles.cache.filter(role => this.member._roles.includes(role.id)).set(everyone.id, everyone);\n  }\n\n  /**\n   * The role of the member used to hoist them in a separate category in the users list\n   * @type {?Role}\n   * @readonly\n   */\n  get hoist() {\n    const hoistedRoles = this.cache.filter(role => role.hoist);\n    if (!hoistedRoles.size) return null;\n    return hoistedRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member used to set their role icon\n   * @type {?Role}\n   * @readonly\n   */\n  get icon() {\n    const iconRoles = this.cache.filter(role => role.icon || role.unicodeEmoji);\n    if (!iconRoles.size) return null;\n    return iconRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member used to set their color\n   * @type {?Role}\n   * @readonly\n   */\n  get color() {\n    const coloredRoles = this.cache.filter(role => role.color);\n    if (!coloredRoles.size) return null;\n    return coloredRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member with the highest position\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());\n  }\n\n  /**\n   * The premium subscriber role of the guild, if present on the member\n   * @type {?Role}\n   * @readonly\n   */\n  get premiumSubscriberRole() {\n    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;\n  }\n\n  /**\n   * The managed role this member created when joining the guild, if any\n   * <info>Only ever available on bots</info>\n   * @type {?Role}\n   * @readonly\n   */\n  get botRole() {\n    if (!this.member.user.bot) return null;\n    return this.cache.find(role => role.tags?.botId === this.member.user.id) ?? null;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @param {string} [reason] Reason for adding the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async add(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n\n      const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'roles',\n          'Role, Snowflake or Array or Collection of Roles or Snowflakes',\n        );\n      }\n\n      await this.client.rest.put(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });\n\n      const clone = this.member._clone();\n      clone._roles = [...this.cache.keys(), roleOrRoles];\n      return clone;\n    }\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the member.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @param {string} [reason] Reason for removing the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async remove(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n\n      const newRoles = this.cache.filter(role => !resolvedRoles.includes(role.id));\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'roles',\n          'Role, Snowflake or Array or Collection of Roles or Snowflakes',\n        );\n      }\n\n      await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });\n\n      const clone = this.member._clone();\n      const newRoles = this.cache.filter(role => role.id !== roleOrRoles);\n      clone._roles = [...newRoles.keys()];\n      return clone;\n    }\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @param {string} [reason] Reason for applying the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set the member's roles to a single role\n   * guildMember.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all the roles from a member\n   * guildMember.roles.set([])\n   *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n   *   .catch(console.error);\n   */\n  set(roles, reason) {\n    return this.member.edit({ roles, reason });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.member);\n    clone.member._roles = [...this.cache.keys()];\n    return clone;\n  }\n}\n\nmodule.exports = GuildMemberRoleManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}