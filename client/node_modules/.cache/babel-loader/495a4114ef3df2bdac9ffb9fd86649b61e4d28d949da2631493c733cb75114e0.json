{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst User = require('../structures/User');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {CachedManager}\n */\nclass ReactionUserManager extends CachedManager {\n  constructor(reaction, iterable) {\n    super(reaction.client, User, iterable);\n\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Options used to fetch users who gave a reaction.\n   * @typedef {Object} FetchReactionUsersOptions\n   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`\n   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.\n   * @param {FetchReactionUsersOptions} [options] Options for fetching the users\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch() {\n    let {\n      limit = 100,\n      after\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const message = this.reaction.message;\n    const query = makeURLSearchParams({\n      limit,\n      after\n    });\n    const data = await this.client.rest.get(Routes.channelMessageReaction(message.channelId, message.id, this.reaction.emoji.identifier), {\n      query\n    });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users._add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.client.user;\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new DiscordjsError(ErrorCodes.ReactionResolveUser);\n    const message = this.reaction.message;\n    const route = userId === this.client.user.id ? Routes.channelMessageOwnReaction(message.channelId, message.id, this.reaction.emoji.identifier) : Routes.channelMessageUserReaction(message.channelId, message.id, this.reaction.emoji.identifier, userId);\n    await this.client.rest.delete(route);\n    return this.reaction;\n  }\n}\nmodule.exports = ReactionUserManager;","map":{"version":3,"names":["Collection","require","makeURLSearchParams","Routes","CachedManager","DiscordjsError","ErrorCodes","User","ReactionUserManager","constructor","reaction","iterable","client","fetch","limit","after","message","query","data","rest","get","channelMessageReaction","channelId","id","emoji","identifier","users","rawUser","user","_add","cache","set","remove","userId","resolveId","ReactionResolveUser","route","channelMessageOwnReaction","channelMessageUserReaction","delete","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/ReactionUserManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst User = require('../structures/User');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {CachedManager}\n */\nclass ReactionUserManager extends CachedManager {\n  constructor(reaction, iterable) {\n    super(reaction.client, User, iterable);\n\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Options used to fetch users who gave a reaction.\n   * @typedef {Object} FetchReactionUsersOptions\n   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`\n   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.\n   * @param {FetchReactionUsersOptions} [options] Options for fetching the users\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ limit = 100, after } = {}) {\n    const message = this.reaction.message;\n    const query = makeURLSearchParams({ limit, after });\n    const data = await this.client.rest.get(\n      Routes.channelMessageReaction(message.channelId, message.id, this.reaction.emoji.identifier),\n      { query },\n    );\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users._add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove(user = this.client.user) {\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new DiscordjsError(ErrorCodes.ReactionResolveUser);\n    const message = this.reaction.message;\n    const route =\n      userId === this.client.user.id\n        ? Routes.channelMessageOwnReaction(message.channelId, message.id, this.reaction.emoji.identifier)\n        : Routes.channelMessageUserReaction(message.channelId, message.id, this.reaction.emoji.identifier, userId);\n    await this.client.rest.delete(route);\n    return this.reaction;\n  }\n}\n\nmodule.exports = ReactionUserManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}