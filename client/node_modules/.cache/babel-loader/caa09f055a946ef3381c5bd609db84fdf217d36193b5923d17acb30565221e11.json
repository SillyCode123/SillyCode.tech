{"ast":null,"code":"'use strict';\n\nconst {\n  lazy\n} = require('@discordjs/util');\nconst {\n  ChannelType\n} = require('discord-api-types/v10');\nconst getCategoryChannel = lazy(() => require('../structures/CategoryChannel'));\nconst getDMChannel = lazy(() => require('../structures/DMChannel'));\nconst getNewsChannel = lazy(() => require('../structures/NewsChannel'));\nconst getStageChannel = lazy(() => require('../structures/StageChannel'));\nconst getTextChannel = lazy(() => require('../structures/TextChannel'));\nconst getThreadChannel = lazy(() => require('../structures/ThreadChannel'));\nconst getVoiceChannel = lazy(() => require('../structures/VoiceChannel'));\nconst getDirectoryChannel = lazy(() => require('../structures/DirectoryChannel'));\nconst getPartialGroupDMChannel = lazy(() => require('../structures/PartialGroupDMChannel'));\nconst getForumChannel = lazy(() => require('../structures/ForumChannel'));\n\n/**\n * Creates a discord.js channel from data received from the API.\n * @param {Client} client The client\n * @param {APIChannel} data The data of the channel to create\n * @param {Guild} [guild] The guild where this channel belongs\n * @param {Object} [extras] Extra information to supply for creating this channel\n * @returns {Channel} Any kind of channel.\n * @ignore\n */\nfunction createChannel(client, data, guild) {\n  let {\n    allowUnknownGuild,\n    fromInteraction\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let channel;\n  if (!data.guild_id && !guild) {\n    if (data.recipients && data.type !== ChannelType.GroupDM || data.type === ChannelType.DM) {\n      channel = new (getDMChannel())(client, data);\n    } else if (data.type === ChannelType.GroupDM) {\n      channel = new (getPartialGroupDMChannel())(client, data);\n    }\n  } else {\n    guild ??= client.guilds.cache.get(data.guild_id);\n    if (guild || allowUnknownGuild) {\n      switch (data.type) {\n        case ChannelType.GuildText:\n          {\n            channel = new (getTextChannel())(guild, data, client);\n            break;\n          }\n        case ChannelType.GuildVoice:\n          {\n            channel = new (getVoiceChannel())(guild, data, client);\n            break;\n          }\n        case ChannelType.GuildCategory:\n          {\n            channel = new (getCategoryChannel())(guild, data, client);\n            break;\n          }\n        case ChannelType.GuildAnnouncement:\n          {\n            channel = new (getNewsChannel())(guild, data, client);\n            break;\n          }\n        case ChannelType.GuildStageVoice:\n          {\n            channel = new (getStageChannel())(guild, data, client);\n            break;\n          }\n        case ChannelType.AnnouncementThread:\n        case ChannelType.PublicThread:\n        case ChannelType.PrivateThread:\n          {\n            channel = new (getThreadChannel())(guild, data, client, fromInteraction);\n            if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n            break;\n          }\n        case ChannelType.GuildDirectory:\n          channel = new (getDirectoryChannel())(guild, data, client);\n          break;\n        case ChannelType.GuildForum:\n          channel = new (getForumChannel())(guild, data, client);\n          break;\n      }\n      if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n    }\n  }\n  return channel;\n}\n\n/**\n * Transforms an API guild forum tag to camel-cased guild forum tag.\n * @param {APIGuildForumTag} tag The tag to transform\n * @returns {GuildForumTag}\n * @ignore\n */\nfunction transformAPIGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji: tag.emoji_id ?? tag.emoji_name ? {\n      id: tag.emoji_id,\n      name: tag.emoji_name\n    } : null\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum tag to an API guild forum tag.\n * @param {GuildForumTag} tag The tag to transform\n * @returns {APIGuildForumTag}\n * @ignore\n */\nfunction transformGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji_id: tag.emoji?.id ?? null,\n    emoji_name: tag.emoji?.name ?? null\n  };\n}\n\n/**\n * Transforms an API guild forum default reaction object to a\n * camel-cased guild forum default reaction object.\n * @param {APIGuildForumDefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {DefaultReactionEmoji}\n * @ignore\n */\nfunction transformAPIGuildDefaultReaction(defaultReaction) {\n  return {\n    id: defaultReaction.emoji_id,\n    name: defaultReaction.emoji_name\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum default reaction object to an\n * API guild forum default reaction object.\n * @param {DefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {APIGuildForumDefaultReactionEmoji}\n * @ignore\n */\nfunction transformGuildDefaultReaction(defaultReaction) {\n  return {\n    emoji_id: defaultReaction.id,\n    emoji_name: defaultReaction.name\n  };\n}\nmodule.exports = {\n  createChannel,\n  transformAPIGuildForumTag,\n  transformGuildForumTag,\n  transformAPIGuildDefaultReaction,\n  transformGuildDefaultReaction\n};","map":{"version":3,"names":["lazy","require","ChannelType","getCategoryChannel","getDMChannel","getNewsChannel","getStageChannel","getTextChannel","getThreadChannel","getVoiceChannel","getDirectoryChannel","getPartialGroupDMChannel","getForumChannel","createChannel","client","data","guild","allowUnknownGuild","fromInteraction","channel","guild_id","recipients","type","GroupDM","DM","guilds","cache","get","GuildText","GuildVoice","GuildCategory","GuildAnnouncement","GuildStageVoice","AnnouncementThread","PublicThread","PrivateThread","parent","threads","set","id","GuildDirectory","GuildForum","channels","transformAPIGuildForumTag","tag","name","moderated","emoji","emoji_id","emoji_name","transformGuildForumTag","transformAPIGuildDefaultReaction","defaultReaction","transformGuildDefaultReaction","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/Channels.js"],"sourcesContent":["'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst { ChannelType } = require('discord-api-types/v10');\n\nconst getCategoryChannel = lazy(() => require('../structures/CategoryChannel'));\nconst getDMChannel = lazy(() => require('../structures/DMChannel'));\nconst getNewsChannel = lazy(() => require('../structures/NewsChannel'));\nconst getStageChannel = lazy(() => require('../structures/StageChannel'));\nconst getTextChannel = lazy(() => require('../structures/TextChannel'));\nconst getThreadChannel = lazy(() => require('../structures/ThreadChannel'));\nconst getVoiceChannel = lazy(() => require('../structures/VoiceChannel'));\nconst getDirectoryChannel = lazy(() => require('../structures/DirectoryChannel'));\nconst getPartialGroupDMChannel = lazy(() => require('../structures/PartialGroupDMChannel'));\nconst getForumChannel = lazy(() => require('../structures/ForumChannel'));\n\n/**\n * Creates a discord.js channel from data received from the API.\n * @param {Client} client The client\n * @param {APIChannel} data The data of the channel to create\n * @param {Guild} [guild] The guild where this channel belongs\n * @param {Object} [extras] Extra information to supply for creating this channel\n * @returns {Channel} Any kind of channel.\n * @ignore\n */\nfunction createChannel(client, data, guild, { allowUnknownGuild, fromInteraction } = {}) {\n  let channel;\n  if (!data.guild_id && !guild) {\n    if ((data.recipients && data.type !== ChannelType.GroupDM) || data.type === ChannelType.DM) {\n      channel = new (getDMChannel())(client, data);\n    } else if (data.type === ChannelType.GroupDM) {\n      channel = new (getPartialGroupDMChannel())(client, data);\n    }\n  } else {\n    guild ??= client.guilds.cache.get(data.guild_id);\n\n    if (guild || allowUnknownGuild) {\n      switch (data.type) {\n        case ChannelType.GuildText: {\n          channel = new (getTextChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildVoice: {\n          channel = new (getVoiceChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildCategory: {\n          channel = new (getCategoryChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildAnnouncement: {\n          channel = new (getNewsChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildStageVoice: {\n          channel = new (getStageChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.AnnouncementThread:\n        case ChannelType.PublicThread:\n        case ChannelType.PrivateThread: {\n          channel = new (getThreadChannel())(guild, data, client, fromInteraction);\n          if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n          break;\n        }\n        case ChannelType.GuildDirectory:\n          channel = new (getDirectoryChannel())(guild, data, client);\n          break;\n        case ChannelType.GuildForum:\n          channel = new (getForumChannel())(guild, data, client);\n          break;\n      }\n      if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n    }\n  }\n  return channel;\n}\n\n/**\n * Transforms an API guild forum tag to camel-cased guild forum tag.\n * @param {APIGuildForumTag} tag The tag to transform\n * @returns {GuildForumTag}\n * @ignore\n */\nfunction transformAPIGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji:\n      tag.emoji_id ?? tag.emoji_name\n        ? {\n            id: tag.emoji_id,\n            name: tag.emoji_name,\n          }\n        : null,\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum tag to an API guild forum tag.\n * @param {GuildForumTag} tag The tag to transform\n * @returns {APIGuildForumTag}\n * @ignore\n */\nfunction transformGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji_id: tag.emoji?.id ?? null,\n    emoji_name: tag.emoji?.name ?? null,\n  };\n}\n\n/**\n * Transforms an API guild forum default reaction object to a\n * camel-cased guild forum default reaction object.\n * @param {APIGuildForumDefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {DefaultReactionEmoji}\n * @ignore\n */\nfunction transformAPIGuildDefaultReaction(defaultReaction) {\n  return {\n    id: defaultReaction.emoji_id,\n    name: defaultReaction.emoji_name,\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum default reaction object to an\n * API guild forum default reaction object.\n * @param {DefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {APIGuildForumDefaultReactionEmoji}\n * @ignore\n */\nfunction transformGuildDefaultReaction(defaultReaction) {\n  return {\n    emoji_id: defaultReaction.id,\n    emoji_name: defaultReaction.name,\n  };\n}\n\nmodule.exports = {\n  createChannel,\n  transformAPIGuildForumTag,\n  transformGuildForumTag,\n  transformAPIGuildDefaultReaction,\n  transformGuildDefaultReaction,\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAExD,MAAME,kBAAkB,GAAGH,IAAI,CAAC,MAAMC,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAC/E,MAAMG,YAAY,GAAGJ,IAAI,CAAC,MAAMC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACnE,MAAMI,cAAc,GAAGL,IAAI,CAAC,MAAMC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACvE,MAAMK,eAAe,GAAGN,IAAI,CAAC,MAAMC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AACzE,MAAMM,cAAc,GAAGP,IAAI,CAAC,MAAMC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACvE,MAAMO,gBAAgB,GAAGR,IAAI,CAAC,MAAMC,OAAO,CAAC,6BAA6B,CAAC,CAAC;AAC3E,MAAMQ,eAAe,GAAGT,IAAI,CAAC,MAAMC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AACzE,MAAMS,mBAAmB,GAAGV,IAAI,CAAC,MAAMC,OAAO,CAAC,gCAAgC,CAAC,CAAC;AACjF,MAAMU,wBAAwB,GAAGX,IAAI,CAAC,MAAMC,OAAO,CAAC,qCAAqC,CAAC,CAAC;AAC3F,MAAMW,eAAe,GAAGZ,IAAI,CAAC,MAAMC,OAAO,CAAC,4BAA4B,CAAC,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,aAAa,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAA+C;EAAA,IAA7C;IAAEC,iBAAiB;IAAEC;EAAgB,CAAC,uEAAG,CAAC,CAAC;EACrF,IAAIC,OAAO;EACX,IAAI,CAACJ,IAAI,CAACK,QAAQ,IAAI,CAACJ,KAAK,EAAE;IAC5B,IAAKD,IAAI,CAACM,UAAU,IAAIN,IAAI,CAACO,IAAI,KAAKpB,WAAW,CAACqB,OAAO,IAAKR,IAAI,CAACO,IAAI,KAAKpB,WAAW,CAACsB,EAAE,EAAE;MAC1FL,OAAO,GAAG,KAAKf,YAAY,EAAE,EAAEU,MAAM,EAAEC,IAAI,CAAC;IAC9C,CAAC,MAAM,IAAIA,IAAI,CAACO,IAAI,KAAKpB,WAAW,CAACqB,OAAO,EAAE;MAC5CJ,OAAO,GAAG,KAAKR,wBAAwB,EAAE,EAAEG,MAAM,EAAEC,IAAI,CAAC;IAC1D;EACF,CAAC,MAAM;IACLC,KAAK,KAAKF,MAAM,CAACW,MAAM,CAACC,KAAK,CAACC,GAAG,CAACZ,IAAI,CAACK,QAAQ,CAAC;IAEhD,IAAIJ,KAAK,IAAIC,iBAAiB,EAAE;MAC9B,QAAQF,IAAI,CAACO,IAAI;QACf,KAAKpB,WAAW,CAAC0B,SAAS;UAAE;YAC1BT,OAAO,GAAG,KAAKZ,cAAc,EAAE,EAAES,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;YACrD;UACF;QACA,KAAKZ,WAAW,CAAC2B,UAAU;UAAE;YAC3BV,OAAO,GAAG,KAAKV,eAAe,EAAE,EAAEO,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;YACtD;UACF;QACA,KAAKZ,WAAW,CAAC4B,aAAa;UAAE;YAC9BX,OAAO,GAAG,KAAKhB,kBAAkB,EAAE,EAAEa,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;YACzD;UACF;QACA,KAAKZ,WAAW,CAAC6B,iBAAiB;UAAE;YAClCZ,OAAO,GAAG,KAAKd,cAAc,EAAE,EAAEW,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;YACrD;UACF;QACA,KAAKZ,WAAW,CAAC8B,eAAe;UAAE;YAChCb,OAAO,GAAG,KAAKb,eAAe,EAAE,EAAEU,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;YACtD;UACF;QACA,KAAKZ,WAAW,CAAC+B,kBAAkB;QACnC,KAAK/B,WAAW,CAACgC,YAAY;QAC7B,KAAKhC,WAAW,CAACiC,aAAa;UAAE;YAC9BhB,OAAO,GAAG,KAAKX,gBAAgB,EAAE,EAAEQ,KAAK,EAAED,IAAI,EAAED,MAAM,EAAEI,eAAe,CAAC;YACxE,IAAI,CAACD,iBAAiB,EAAEE,OAAO,CAACiB,MAAM,EAAEC,OAAO,CAACX,KAAK,CAACY,GAAG,CAACnB,OAAO,CAACoB,EAAE,EAAEpB,OAAO,CAAC;YAC9E;UACF;QACA,KAAKjB,WAAW,CAACsC,cAAc;UAC7BrB,OAAO,GAAG,KAAKT,mBAAmB,EAAE,EAAEM,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;UAC1D;QACF,KAAKZ,WAAW,CAACuC,UAAU;UACzBtB,OAAO,GAAG,KAAKP,eAAe,EAAE,EAAEI,KAAK,EAAED,IAAI,EAAED,MAAM,CAAC;UACtD;MAAM;MAEV,IAAIK,OAAO,IAAI,CAACF,iBAAiB,EAAED,KAAK,CAAC0B,QAAQ,EAAEhB,KAAK,CAACY,GAAG,CAACnB,OAAO,CAACoB,EAAE,EAAEpB,OAAO,CAAC;IACnF;EACF;EACA,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,yBAAyB,CAACC,GAAG,EAAE;EACtC,OAAO;IACLL,EAAE,EAAEK,GAAG,CAACL,EAAE;IACVM,IAAI,EAAED,GAAG,CAACC,IAAI;IACdC,SAAS,EAAEF,GAAG,CAACE,SAAS;IACxBC,KAAK,EACHH,GAAG,CAACI,QAAQ,IAAIJ,GAAG,CAACK,UAAU,GAC1B;MACEV,EAAE,EAAEK,GAAG,CAACI,QAAQ;MAChBH,IAAI,EAAED,GAAG,CAACK;IACZ,CAAC,GACD;EACR,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACN,GAAG,EAAE;EACnC,OAAO;IACLL,EAAE,EAAEK,GAAG,CAACL,EAAE;IACVM,IAAI,EAAED,GAAG,CAACC,IAAI;IACdC,SAAS,EAAEF,GAAG,CAACE,SAAS;IACxBE,QAAQ,EAAEJ,GAAG,CAACG,KAAK,EAAER,EAAE,IAAI,IAAI;IAC/BU,UAAU,EAAEL,GAAG,CAACG,KAAK,EAAEF,IAAI,IAAI;EACjC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,gCAAgC,CAACC,eAAe,EAAE;EACzD,OAAO;IACLb,EAAE,EAAEa,eAAe,CAACJ,QAAQ;IAC5BH,IAAI,EAAEO,eAAe,CAACH;EACxB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,6BAA6B,CAACD,eAAe,EAAE;EACtD,OAAO;IACLJ,QAAQ,EAAEI,eAAe,CAACb,EAAE;IAC5BU,UAAU,EAAEG,eAAe,CAACP;EAC9B,CAAC;AACH;AAEAS,MAAM,CAACC,OAAO,GAAG;EACf1C,aAAa;EACb8B,yBAAyB;EACzBO,sBAAsB;EACtBC,gCAAgC;EAChCE;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}