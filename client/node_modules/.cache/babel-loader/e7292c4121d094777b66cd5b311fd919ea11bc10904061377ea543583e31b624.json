{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nclass StageInstanceUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n    if (channel) {\n      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;\n      const newStageInstance = channel.guild.stageInstances._add(data);\n\n      /**\n       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level\n       * @event Client#stageInstanceUpdate\n       * @param {?StageInstance} oldStageInstance The stage instance before the update\n       * @param {StageInstance} newStageInstance The stage instance after the update\n       */\n      client.emit(Events.StageInstanceUpdate, oldStageInstance, newStageInstance);\n      return {\n        oldStageInstance,\n        newStageInstance\n      };\n    }\n    return {};\n  }\n}\nmodule.exports = StageInstanceUpdateAction;","map":{"version":3,"names":["Action","require","Events","StageInstanceUpdateAction","handle","data","client","channel","getChannel","oldStageInstance","guild","stageInstances","cache","get","id","_clone","newStageInstance","_add","emit","StageInstanceUpdate","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/StageInstanceUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass StageInstanceUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n\n    if (channel) {\n      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;\n      const newStageInstance = channel.guild.stageInstances._add(data);\n\n      /**\n       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level\n       * @event Client#stageInstanceUpdate\n       * @param {?StageInstance} oldStageInstance The stage instance before the update\n       * @param {StageInstance} newStageInstance The stage instance after the update\n       */\n      client.emit(Events.StageInstanceUpdate, oldStageInstance, newStageInstance);\n\n      return { oldStageInstance, newStageInstance };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = StageInstanceUpdateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAME,yBAAyB,SAASH,MAAM,CAAC;EAC7CI,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACH,IAAI,CAAC;IAErC,IAAIE,OAAO,EAAE;MACX,MAAME,gBAAgB,GAAGF,OAAO,CAACG,KAAK,CAACC,cAAc,CAACC,KAAK,CAACC,GAAG,CAACR,IAAI,CAACS,EAAE,CAAC,EAAEC,MAAM,EAAE,IAAI,IAAI;MAC1F,MAAMC,gBAAgB,GAAGT,OAAO,CAACG,KAAK,CAACC,cAAc,CAACM,IAAI,CAACZ,IAAI,CAAC;;MAEhE;AACN;AACA;AACA;AACA;AACA;MACMC,MAAM,CAACY,IAAI,CAAChB,MAAM,CAACiB,mBAAmB,EAAEV,gBAAgB,EAAEO,gBAAgB,CAAC;MAE3E,OAAO;QAAEP,gBAAgB;QAAEO;MAAiB,CAAC;IAC/C;IAEA,OAAO,CAAC,CAAC;EACX;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGlB,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}