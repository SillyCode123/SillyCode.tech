{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst WidgetMember = require('./WidgetMember');\n\n/**\n * Represents a Widget.\n * @extends {Base}\n */\nclass Widget extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Represents a channel in a Widget\n   * @typedef {Object} WidgetChannel\n   * @property {Snowflake} id Id of the channel\n   * @property {string} name Name of the channel\n   * @property {number} position Position of the channel\n   */\n\n  _patch(data) {\n    /**\n     * The id of the guild.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the guild.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('instant_invite' in data) {\n      /**\n       * The invite of the guild.\n       * @type {?string}\n       */\n      this.instantInvite = data.instant_invite;\n    }\n\n    /**\n     * The list of channels in the guild.\n     * @type {Collection<Snowflake, WidgetChannel>}\n     */\n    this.channels = new Collection();\n    for (const channel of data.channels) {\n      this.channels.set(channel.id, channel);\n    }\n\n    /**\n     * The list of members in the guild.\n     * These strings are just arbitrary numbers, they aren't Snowflakes.\n     * @type {Collection<string, WidgetMember>}\n     */\n    this.members = new Collection();\n    for (const member of data.members) {\n      this.members.set(member.id, new WidgetMember(this.client, member));\n    }\n    if ('presence_count' in data) {\n      /**\n       * The number of members online.\n       * @type {number}\n       */\n      this.presenceCount = data.presence_count;\n    }\n  }\n\n  /**\n   * Update the Widget.\n   * @returns {Promise<Widget>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildWidgetJSON(this.id));\n    this._patch(data);\n    return this;\n  }\n}\nmodule.exports = Widget;","map":{"version":3,"names":["Collection","require","Routes","Base","WidgetMember","Widget","constructor","client","data","_patch","id","name","instantInvite","instant_invite","channels","channel","set","members","member","presenceCount","presence_count","fetch","rest","get","guildWidgetJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Widget.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst WidgetMember = require('./WidgetMember');\n\n/**\n * Represents a Widget.\n * @extends {Base}\n */\nclass Widget extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Represents a channel in a Widget\n   * @typedef {Object} WidgetChannel\n   * @property {Snowflake} id Id of the channel\n   * @property {string} name Name of the channel\n   * @property {number} position Position of the channel\n   */\n\n  _patch(data) {\n    /**\n     * The id of the guild.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the guild.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('instant_invite' in data) {\n      /**\n       * The invite of the guild.\n       * @type {?string}\n       */\n      this.instantInvite = data.instant_invite;\n    }\n\n    /**\n     * The list of channels in the guild.\n     * @type {Collection<Snowflake, WidgetChannel>}\n     */\n    this.channels = new Collection();\n    for (const channel of data.channels) {\n      this.channels.set(channel.id, channel);\n    }\n\n    /**\n     * The list of members in the guild.\n     * These strings are just arbitrary numbers, they aren't Snowflakes.\n     * @type {Collection<string, WidgetMember>}\n     */\n    this.members = new Collection();\n    for (const member of data.members) {\n      this.members.set(member.id, new WidgetMember(this.client, member));\n    }\n\n    if ('presence_count' in data) {\n      /**\n       * The number of members online.\n       * @type {number}\n       */\n      this.presenceCount = data.presence_count;\n    }\n  }\n\n  /**\n   * Update the Widget.\n   * @returns {Promise<Widget>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildWidgetJSON(this.id));\n    this._patch(data);\n    return this;\n  }\n}\n\nmodule.exports = Widget;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMG,YAAY,GAAGH,OAAO,CAAC,gBAAgB,CAAC;;AAE9C;AACA;AACA;AACA;AACA,MAAMI,MAAM,SAASF,IAAI,CAAC;EACxBG,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;IACb,IAAI,CAACE,MAAM,CAACD,IAAI,CAAC;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEC,MAAM,CAACD,IAAI,EAAE;IACX;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGF,IAAI,CAACE,EAAE;IAEjB,IAAI,MAAM,IAAIF,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACG,IAAI;IACvB;IAEA,IAAI,gBAAgB,IAAIH,IAAI,EAAE;MAC5B;AACN;AACA;AACA;MACM,IAAI,CAACI,aAAa,GAAGJ,IAAI,CAACK,cAAc;IAC1C;;IAEA;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,IAAId,UAAU,EAAE;IAChC,KAAK,MAAMe,OAAO,IAAIP,IAAI,CAACM,QAAQ,EAAE;MACnC,IAAI,CAACA,QAAQ,CAACE,GAAG,CAACD,OAAO,CAACL,EAAE,EAAEK,OAAO,CAAC;IACxC;;IAEA;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACE,OAAO,GAAG,IAAIjB,UAAU,EAAE;IAC/B,KAAK,MAAMkB,MAAM,IAAIV,IAAI,CAACS,OAAO,EAAE;MACjC,IAAI,CAACA,OAAO,CAACD,GAAG,CAACE,MAAM,CAACR,EAAE,EAAE,IAAIN,YAAY,CAAC,IAAI,CAACG,MAAM,EAAEW,MAAM,CAAC,CAAC;IACpE;IAEA,IAAI,gBAAgB,IAAIV,IAAI,EAAE;MAC5B;AACN;AACA;AACA;MACM,IAAI,CAACW,aAAa,GAAGX,IAAI,CAACY,cAAc;IAC1C;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMC,KAAK,GAAG;IACZ,MAAMb,IAAI,GAAG,MAAM,IAAI,CAACD,MAAM,CAACe,IAAI,CAACC,GAAG,CAACrB,MAAM,CAACsB,eAAe,CAAC,IAAI,CAACd,EAAE,CAAC,CAAC;IACxE,IAAI,CAACD,MAAM,CAACD,IAAI,CAAC;IACjB,OAAO,IAAI;EACb;AACF;AAEAiB,MAAM,CAACC,OAAO,GAAGrB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}