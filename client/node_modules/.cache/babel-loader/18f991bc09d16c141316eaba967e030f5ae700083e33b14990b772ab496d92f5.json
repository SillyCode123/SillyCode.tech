{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('node:buffer');\nconst fs = require('node:fs/promises');\nconst path = require('node:path');\nconst {\n  fetch\n} = require('undici');\nconst {\n  DiscordjsError,\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst Invite = require('../structures/Invite');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver extends null {\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give a template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    return regex.exec(data)?.[1] ?? data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, Invite.InvitesPattern);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    const GuildTemplate = require('../structures/GuildTemplate');\n    return this.resolveCode(data, GuildTemplate.GuildTemplatesPattern);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFile(image);\n    return this.resolveBase64(file.data);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL <warn>When provided a URL, discord.js will fetch the URL internally in order to create a Buffer.\n   * This can pose a security risk when the URL has not been sanitized</warn>\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * @typedef {Object} ResolvedFile\n   * @property {Buffer} data Buffer containing the file data\n   * @property {string} [contentType] Content type of the file\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<ResolvedFile>}\n   */\n  static async resolveFile(resource) {\n    if (Buffer.isBuffer(resource)) return {\n      data: resource\n    };\n    if (typeof resource[Symbol.asyncIterator] === 'function') {\n      const buffers = [];\n      for await (const data of resource) buffers.push(Buffer.from(data));\n      return {\n        data: Buffer.concat(buffers)\n      };\n    }\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return {\n          data: Buffer.from(await res.arrayBuffer()),\n          contentType: res.headers.get('content-type')\n        };\n      }\n      const file = path.resolve(resource);\n      const stats = await fs.stat(file);\n      if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.FileNotFound, file);\n      return {\n        data: await fs.readFile(file)\n      };\n    }\n    throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n  }\n}\nmodule.exports = DataResolver;","map":{"version":3,"names":["Buffer","require","fs","path","fetch","DiscordjsError","DiscordjsTypeError","ErrorCodes","Invite","DataResolver","resolveCode","data","regex","exec","resolveInviteCode","InvitesPattern","resolveGuildTemplateCode","GuildTemplate","GuildTemplatesPattern","resolveImage","image","startsWith","file","resolveFile","resolveBase64","isBuffer","toString","resource","Symbol","asyncIterator","buffers","push","from","concat","test","res","arrayBuffer","contentType","headers","get","resolve","stats","stat","isFile","FileNotFound","readFile","ReqResourceType","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/DataResolver.js"],"sourcesContent":["'use strict';\n\nconst { Buffer } = require('node:buffer');\nconst fs = require('node:fs/promises');\nconst path = require('node:path');\nconst { fetch } = require('undici');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst Invite = require('../structures/Invite');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver extends null {\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give a template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    return regex.exec(data)?.[1] ?? data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, Invite.InvitesPattern);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    const GuildTemplate = require('../structures/GuildTemplate');\n    return this.resolveCode(data, GuildTemplate.GuildTemplatesPattern);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFile(image);\n    return this.resolveBase64(file.data);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL <warn>When provided a URL, discord.js will fetch the URL internally in order to create a Buffer.\n   * This can pose a security risk when the URL has not been sanitized</warn>\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * @typedef {Object} ResolvedFile\n   * @property {Buffer} data Buffer containing the file data\n   * @property {string} [contentType] Content type of the file\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<ResolvedFile>}\n   */\n  static async resolveFile(resource) {\n    if (Buffer.isBuffer(resource)) return { data: resource };\n\n    if (typeof resource[Symbol.asyncIterator] === 'function') {\n      const buffers = [];\n      for await (const data of resource) buffers.push(Buffer.from(data));\n      return { data: Buffer.concat(buffers) };\n    }\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return { data: Buffer.from(await res.arrayBuffer()), contentType: res.headers.get('content-type') };\n      }\n\n      const file = path.resolve(resource);\n\n      const stats = await fs.stat(file);\n      if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.FileNotFound, file);\n      return { data: await fs.readFile(file) };\n    }\n\n    throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n  }\n}\n\nmodule.exports = DataResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}