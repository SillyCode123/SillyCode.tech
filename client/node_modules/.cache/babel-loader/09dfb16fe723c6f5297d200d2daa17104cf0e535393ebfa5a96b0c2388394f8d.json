{"ast":null,"code":"'use strict';\n\nconst {\n  channelLink\n} = require('@discordjs/builders');\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  ChannelType,\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst ChannelFlagsBitField = require('../util/ChannelFlagsBitField');\nconst {\n  ThreadChannelTypes\n} = require('../util/Constants');\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass BaseChannel extends Base {\n  constructor(client, data) {\n    let immediatePatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super(client);\n\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n    this.type = data.type;\n    if (data && immediatePatch) this._patch(data);\n  }\n  _patch(data) {\n    if ('flags' in data) {\n      /**\n       * The flags that are applied to the channel.\n       * <info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>\n       * @type {?Readonly<ChannelFlagsBitField>}\n       */\n      this.flags = new ChannelFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new ChannelFlagsBitField().freeze();\n    }\n\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to the channel\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.isDMBased() ? channelLink(this.id) : channelLink(this.id, this.guildId);\n  }\n\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return false;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<BaseChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.channel(this.id));\n    return this;\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<BaseChannel>}\n   */\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.channels.fetch(this.id, {\n      force\n    });\n  }\n\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n  isTextBased() {\n    return 'messages' in this;\n  }\n\n  /**\n   * Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).\n   * @returns {boolean}\n   */\n  isDMBased() {\n    return [ChannelType.DM, ChannelType.GroupDM].includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.\n   * @returns {boolean}\n   */\n  isVoiceBased() {\n    return 'bitrate' in this;\n  }\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n    return super.toJSON({\n      createdTimestamp: true\n    }, ...props);\n  }\n}\nexports.BaseChannel = BaseChannel;\n\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */","map":{"version":3,"names":["channelLink","require","DiscordSnowflake","ChannelType","Routes","Base","ChannelFlagsBitField","ThreadChannelTypes","BaseChannel","constructor","client","data","immediatePatch","type","_patch","flags","freeze","id","createdTimestamp","timestampFrom","createdAt","Date","url","isDMBased","guildId","partial","toString","delete","rest","channel","fetch","force","channels","isThread","includes","isTextBased","DM","GroupDM","isVoiceBased","toJSON","props","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/BaseChannel.js"],"sourcesContent":["'use strict';\n\nconst { channelLink } = require('@discordjs/builders');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst ChannelFlagsBitField = require('../util/ChannelFlagsBitField');\nconst { ThreadChannelTypes } = require('../util/Constants');\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass BaseChannel extends Base {\n  constructor(client, data, immediatePatch = true) {\n    super(client);\n\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n    this.type = data.type;\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('flags' in data) {\n      /**\n       * The flags that are applied to the channel.\n       * <info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>\n       * @type {?Readonly<ChannelFlagsBitField>}\n       */\n      this.flags = new ChannelFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new ChannelFlagsBitField().freeze();\n    }\n\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to the channel\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.isDMBased() ? channelLink(this.id) : channelLink(this.id, this.guildId);\n  }\n\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return false;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<BaseChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.channel(this.id));\n    return this;\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<BaseChannel>}\n   */\n  fetch(force = true) {\n    return this.client.channels.fetch(this.id, { force });\n  }\n\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n  isTextBased() {\n    return 'messages' in this;\n  }\n\n  /**\n   * Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).\n   * @returns {boolean}\n   */\n  isDMBased() {\n    return [ChannelType.DM, ChannelType.GroupDM].includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.\n   * @returns {boolean}\n   */\n  isVoiceBased() {\n    return 'bitrate' in this;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nexports.BaseChannel = BaseChannel;\n\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}