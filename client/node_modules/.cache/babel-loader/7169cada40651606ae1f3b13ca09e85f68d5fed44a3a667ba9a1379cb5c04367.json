{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  ComponentType\n} = require('discord-api-types/v10');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents the serialized fields from a modal submit interaction\n */\nclass ModalSubmitFields {\n  constructor(components) {\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]} The components in the modal\n     */\n    this.components = components;\n\n    /**\n     * The extracted fields from the modal\n     * @type {Collection<string, ModalData>} The fields in the modal\n     */\n    this.fields = components.reduce((accumulator, next) => {\n      next.components.forEach(c => accumulator.set(c.customId, c));\n      return accumulator;\n    }, new Collection());\n  }\n\n  /**\n   * Gets a field given a custom id from a component\n   * @param {string} customId The custom id of the component\n   * @param {ComponentType} [type] The type of the component\n   * @returns {ModalData}\n   */\n  getField(customId, type) {\n    const field = this.fields.get(customId);\n    if (!field) throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldNotFound, customId);\n    if (type !== undefined && type !== field.type) {\n      throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldType, customId, field.type, type);\n    }\n    return field;\n  }\n\n  /**\n   * Gets the value of a text input component given a custom id\n   * @param {string} customId The custom id of the text input component\n   * @returns {string}\n   */\n  getTextInputValue(customId) {\n    return this.getField(customId, ComponentType.TextInput).value;\n  }\n}\nmodule.exports = ModalSubmitFields;","map":{"version":3,"names":["Collection","require","ComponentType","DiscordjsTypeError","ErrorCodes","ModalSubmitFields","constructor","components","fields","reduce","accumulator","next","forEach","c","set","customId","getField","type","field","get","ModalSubmitInteractionFieldNotFound","undefined","ModalSubmitInteractionFieldType","getTextInputValue","TextInput","value","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ModalSubmitFields.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { ComponentType } = require('discord-api-types/v10');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the serialized fields from a modal submit interaction\n */\nclass ModalSubmitFields {\n  constructor(components) {\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]} The components in the modal\n     */\n    this.components = components;\n\n    /**\n     * The extracted fields from the modal\n     * @type {Collection<string, ModalData>} The fields in the modal\n     */\n    this.fields = components.reduce((accumulator, next) => {\n      next.components.forEach(c => accumulator.set(c.customId, c));\n      return accumulator;\n    }, new Collection());\n  }\n\n  /**\n   * Gets a field given a custom id from a component\n   * @param {string} customId The custom id of the component\n   * @param {ComponentType} [type] The type of the component\n   * @returns {ModalData}\n   */\n  getField(customId, type) {\n    const field = this.fields.get(customId);\n    if (!field) throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldNotFound, customId);\n\n    if (type !== undefined && type !== field.type) {\n      throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldType, customId, field.type, type);\n    }\n\n    return field;\n  }\n\n  /**\n   * Gets the value of a text input component given a custom id\n   * @param {string} customId The custom id of the text input component\n   * @returns {string}\n   */\n  getTextInputValue(customId) {\n    return this.getField(customId, ComponentType.TextInput).value;\n  }\n}\n\nmodule.exports = ModalSubmitFields;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC;AAAc,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAC1D,MAAM;EAAEE,kBAAkB;EAAEC;AAAW,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAE/D;AACA;AACA;AACA,MAAMI,iBAAiB,CAAC;EACtBC,WAAW,CAACC,UAAU,EAAE;IACtB;AACJ;AACA;AACA;IACI,IAAI,CAACA,UAAU,GAAGA,UAAU;;IAE5B;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGD,UAAU,CAACE,MAAM,CAAC,CAACC,WAAW,EAAEC,IAAI,KAAK;MACrDA,IAAI,CAACJ,UAAU,CAACK,OAAO,CAACC,CAAC,IAAIH,WAAW,CAACI,GAAG,CAACD,CAAC,CAACE,QAAQ,EAAEF,CAAC,CAAC,CAAC;MAC5D,OAAOH,WAAW;IACpB,CAAC,EAAE,IAAIV,UAAU,EAAE,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgB,QAAQ,CAACD,QAAQ,EAAEE,IAAI,EAAE;IACvB,MAAMC,KAAK,GAAG,IAAI,CAACV,MAAM,CAACW,GAAG,CAACJ,QAAQ,CAAC;IACvC,IAAI,CAACG,KAAK,EAAE,MAAM,IAAIf,kBAAkB,CAACC,UAAU,CAACgB,mCAAmC,EAAEL,QAAQ,CAAC;IAElG,IAAIE,IAAI,KAAKI,SAAS,IAAIJ,IAAI,KAAKC,KAAK,CAACD,IAAI,EAAE;MAC7C,MAAM,IAAId,kBAAkB,CAACC,UAAU,CAACkB,+BAA+B,EAAEP,QAAQ,EAAEG,KAAK,CAACD,IAAI,EAAEA,IAAI,CAAC;IACtG;IAEA,OAAOC,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEK,iBAAiB,CAACR,QAAQ,EAAE;IAC1B,OAAO,IAAI,CAACC,QAAQ,CAACD,QAAQ,EAAEb,aAAa,CAACsB,SAAS,CAAC,CAACC,KAAK;EAC/D;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGtB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}