{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the stage instance\n       * @type {StageInstancePrivacyLevel}\n       */\n      this.privacyLevel = data.privacy_level;\n    }\n    if ('discoverable_disabled' in data) {\n      /**\n       * Whether or not stage discovery is disabled\n       * @type {?boolean}\n       * @deprecated See https://github.com/discord/discord-api-docs/pull/4296 for more information\n       */\n      this.discoverableDisabled = data.discoverable_disabled;\n    } else {\n      this.discoverableDisabled ??= null;\n    }\n    if ('guild_scheduled_event_id' in data) {\n      /**\n       * The associated guild scheduled event id of this stage instance\n       * @type {?Snowflake}\n       */\n      this.guildScheduledEventId = data.guild_scheduled_event_id;\n    } else {\n      this.guildScheduledEventId ??= null;\n    }\n  }\n\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The associated guild scheduled event of this stage instance\n   * @type {?GuildScheduledEvent}\n   * @readonly\n   */\n  get guildScheduledEvent() {\n    return this.guild?.scheduledEvents.resolve(this.guildScheduledEventId) ?? null;\n  }\n\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n    const clone = this._clone();\n    return clone;\n  }\n\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, {\n      topic\n    });\n  }\n\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\nexports.StageInstance = StageInstance;","map":{"version":3,"names":["DiscordSnowflake","require","Base","StageInstance","constructor","client","data","id","_patch","guildId","guild_id","channelId","channel_id","topic","privacyLevel","privacy_level","discoverableDisabled","discoverable_disabled","guildScheduledEventId","guild_scheduled_event_id","channel","channels","resolve","guild","guilds","guildScheduledEvent","scheduledEvents","edit","options","stageInstances","delete","clone","_clone","setTopic","createdTimestamp","timestampFrom","createdAt","Date","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/StageInstance.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the stage instance\n       * @type {StageInstancePrivacyLevel}\n       */\n      this.privacyLevel = data.privacy_level;\n    }\n\n    if ('discoverable_disabled' in data) {\n      /**\n       * Whether or not stage discovery is disabled\n       * @type {?boolean}\n       * @deprecated See https://github.com/discord/discord-api-docs/pull/4296 for more information\n       */\n      this.discoverableDisabled = data.discoverable_disabled;\n    } else {\n      this.discoverableDisabled ??= null;\n    }\n\n    if ('guild_scheduled_event_id' in data) {\n      /**\n       * The associated guild scheduled event id of this stage instance\n       * @type {?Snowflake}\n       */\n      this.guildScheduledEventId = data.guild_scheduled_event_id;\n    } else {\n      this.guildScheduledEventId ??= null;\n    }\n  }\n\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The associated guild scheduled event of this stage instance\n   * @type {?GuildScheduledEvent}\n   * @readonly\n   */\n  get guildScheduledEvent() {\n    return this.guild?.scheduledEvents.resolve(this.guildScheduledEventId) ?? null;\n  }\n\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n    const clone = this._clone();\n    return clone;\n  }\n\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, { topic });\n  }\n\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nexports.StageInstance = StageInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}