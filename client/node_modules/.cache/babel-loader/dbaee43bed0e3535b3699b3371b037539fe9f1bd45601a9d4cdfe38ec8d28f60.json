{"ast":null,"code":"'use strict';\n\nconst BaseClient = require('./BaseClient');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst Webhook = require('../structures/Webhook');\nconst {\n  parseWebhookURL\n} = require('../util/Util');\n\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\nclass WebhookClient extends BaseClient {\n  /**\n   * Represents the credentials used for a webhook in the form of its id and token.\n   * @typedef {Object} WebhookClientDataIdWithToken\n   * @property {Snowflake} id The webhook's id\n   * @property {string} token The webhook's token\n   */\n\n  /**\n   * Represents the credentials used for a webhook in the form of a URL.\n   * @typedef {Object} WebhookClientDataURL\n   * @property {string} url The full URL for the webhook\n   */\n\n  /**\n   * Represents the credentials used for a webhook.\n   * @typedef {WebhookClientDataIdWithToken|WebhookClientDataURL} WebhookClientData\n   */\n\n  /**\n   * Options for a webhook client.\n   * @typedef {Object} WebhookClientOptions\n   * @property {MessageMentionOptions} [allowedMentions] Default value for {@link BaseMessageOptions#allowedMentions}\n   * @property {RESTOptions} [rest] Options for the REST manager\n   */\n\n  /**\n   * @param {WebhookClientData} data The data of the webhook\n   * @param {WebhookClientOptions} [options] Options for the webhook client\n   */\n  constructor(data, options) {\n    super(options);\n    Object.defineProperty(this, 'client', {\n      value: this\n    });\n    let {\n      id,\n      token\n    } = data;\n    if ('url' in data) {\n      const parsed = parseWebhookURL(data.url);\n      if (!parsed) {\n        throw new DiscordjsError(ErrorCodes.WebhookURLInvalid);\n      }\n      ({\n        id,\n        token\n      } = parsed);\n    }\n    this.id = id;\n    Object.defineProperty(this, 'token', {\n      value: token,\n      writable: true,\n      configurable: true\n    });\n  }\n\n  /**\n   * The options the webhook client was instantiated with.\n   * @type {WebhookClientOptions}\n   * @name WebhookClient#options\n   */\n\n  // These are here only for documentation purposes - they are implemented by Webhook\n  /* eslint-disable no-empty-function, valid-jsdoc */\n  /**\n   * Sends a message with this webhook.\n   * @param {string|MessagePayload|WebhookCreateMessageOptions} options The content for the reply\n   * @returns {Promise<APIMessage>}\n   */\n  send() {}\n\n  /**\n   * Gets a message that was sent by this webhook.\n   * @param {Snowflake} message The id of the message to fetch\n   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.\n   * @returns {Promise<APIMessage>} Returns the message sent by this webhook\n   */\n  fetchMessage() {}\n\n  /**\n   * Edits a message that was sent by this webhook.\n   * @param {MessageResolvable} message The message to edit\n   * @param {string|MessagePayload|WebhookEditMessageOptions} options The options to provide\n   * @returns {Promise<APIMessage>} Returns the message edited by this webhook\n   */\n  editMessage() {}\n  sendSlackMessage() {}\n  edit() {}\n  delete() {}\n  deleteMessage() {}\n  get createdTimestamp() {}\n  get createdAt() {}\n  get url() {}\n}\nWebhook.applyToClass(WebhookClient);\nmodule.exports = WebhookClient;","map":{"version":3,"names":["BaseClient","require","DiscordjsError","ErrorCodes","Webhook","parseWebhookURL","WebhookClient","constructor","data","options","Object","defineProperty","value","id","token","parsed","url","WebhookURLInvalid","writable","configurable","send","fetchMessage","editMessage","sendSlackMessage","edit","delete","deleteMessage","createdTimestamp","createdAt","applyToClass","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/WebhookClient.js"],"sourcesContent":["'use strict';\n\nconst BaseClient = require('./BaseClient');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst Webhook = require('../structures/Webhook');\nconst { parseWebhookURL } = require('../util/Util');\n\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\nclass WebhookClient extends BaseClient {\n  /**\n   * Represents the credentials used for a webhook in the form of its id and token.\n   * @typedef {Object} WebhookClientDataIdWithToken\n   * @property {Snowflake} id The webhook's id\n   * @property {string} token The webhook's token\n   */\n\n  /**\n   * Represents the credentials used for a webhook in the form of a URL.\n   * @typedef {Object} WebhookClientDataURL\n   * @property {string} url The full URL for the webhook\n   */\n\n  /**\n   * Represents the credentials used for a webhook.\n   * @typedef {WebhookClientDataIdWithToken|WebhookClientDataURL} WebhookClientData\n   */\n\n  /**\n   * Options for a webhook client.\n   * @typedef {Object} WebhookClientOptions\n   * @property {MessageMentionOptions} [allowedMentions] Default value for {@link BaseMessageOptions#allowedMentions}\n   * @property {RESTOptions} [rest] Options for the REST manager\n   */\n\n  /**\n   * @param {WebhookClientData} data The data of the webhook\n   * @param {WebhookClientOptions} [options] Options for the webhook client\n   */\n  constructor(data, options) {\n    super(options);\n    Object.defineProperty(this, 'client', { value: this });\n    let { id, token } = data;\n\n    if ('url' in data) {\n      const parsed = parseWebhookURL(data.url);\n      if (!parsed) {\n        throw new DiscordjsError(ErrorCodes.WebhookURLInvalid);\n      }\n\n      ({ id, token } = parsed);\n    }\n\n    this.id = id;\n    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });\n  }\n\n  /**\n   * The options the webhook client was instantiated with.\n   * @type {WebhookClientOptions}\n   * @name WebhookClient#options\n   */\n\n  // These are here only for documentation purposes - they are implemented by Webhook\n  /* eslint-disable no-empty-function, valid-jsdoc */\n  /**\n   * Sends a message with this webhook.\n   * @param {string|MessagePayload|WebhookCreateMessageOptions} options The content for the reply\n   * @returns {Promise<APIMessage>}\n   */\n  send() {}\n\n  /**\n   * Gets a message that was sent by this webhook.\n   * @param {Snowflake} message The id of the message to fetch\n   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.\n   * @returns {Promise<APIMessage>} Returns the message sent by this webhook\n   */\n  fetchMessage() {}\n\n  /**\n   * Edits a message that was sent by this webhook.\n   * @param {MessageResolvable} message The message to edit\n   * @param {string|MessagePayload|WebhookEditMessageOptions} options The options to provide\n   * @returns {Promise<APIMessage>} Returns the message edited by this webhook\n   */\n  editMessage() {}\n\n  sendSlackMessage() {}\n  edit() {}\n  delete() {}\n  deleteMessage() {}\n  get createdTimestamp() {}\n  get createdAt() {}\n  get url() {}\n}\n\nWebhook.applyToClass(WebhookClient);\n\nmodule.exports = WebhookClient;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAM;EAAEC,cAAc;EAAEC;AAAW,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AAC3D,MAAMG,OAAO,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAChD,MAAM;EAAEI;AAAgB,CAAC,GAAGJ,OAAO,CAAC,cAAc,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA,MAAMK,aAAa,SAASN,UAAU,CAAC;EACrC;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACEO,WAAW,CAACC,IAAI,EAAEC,OAAO,EAAE;IACzB,KAAK,CAACA,OAAO,CAAC;IACdC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACtD,IAAI;MAAEC,EAAE;MAAEC;IAAM,CAAC,GAAGN,IAAI;IAExB,IAAI,KAAK,IAAIA,IAAI,EAAE;MACjB,MAAMO,MAAM,GAAGV,eAAe,CAACG,IAAI,CAACQ,GAAG,CAAC;MACxC,IAAI,CAACD,MAAM,EAAE;QACX,MAAM,IAAIb,cAAc,CAACC,UAAU,CAACc,iBAAiB,CAAC;MACxD;MAEA,CAAC;QAAEJ,EAAE;QAAEC;MAAM,CAAC,GAAGC,MAAM;IACzB;IAEA,IAAI,CAACF,EAAE,GAAGA,EAAE;IACZH,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MAAEC,KAAK,EAAEE,KAAK;MAAEI,QAAQ,EAAE,IAAI;MAAEC,YAAY,EAAE;IAAK,CAAC,CAAC;EAC5F;;EAEA;AACF;AACA;AACA;AACA;;EAEE;EACA;EACA;AACF;AACA;AACA;AACA;EACEC,IAAI,GAAG,CAAC;;EAER;AACF;AACA;AACA;AACA;AACA;EACEC,YAAY,GAAG,CAAC;;EAEhB;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,GAAG,CAAC;EAEfC,gBAAgB,GAAG,CAAC;EACpBC,IAAI,GAAG,CAAC;EACRC,MAAM,GAAG,CAAC;EACVC,aAAa,GAAG,CAAC;EACjB,IAAIC,gBAAgB,GAAG,CAAC;EACxB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIZ,GAAG,GAAG,CAAC;AACb;AAEAZ,OAAO,CAACyB,YAAY,CAACvB,aAAa,CAAC;AAEnCwB,MAAM,CAACC,OAAO,GAAGzB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}