{"ast":null,"code":"// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict';\n\nconst {\n  kHeadersList\n} = require('../core/symbols');\nconst {\n  kGuard,\n  kHeadersCaseInsensitive\n} = require('./symbols');\nconst {\n  kEnumerableProperty\n} = require('../core/util');\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util');\nconst {\n  webidl\n} = require('./webidl');\nconst kHeadersMap = Symbol('headers map');\nconst kHeadersSortedMap = Symbol('headers map sorted');\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize(potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  return potentialValue.replace(/^[\\r\\n\\t ]+|[\\r\\n\\t ]+$/g, '');\n}\nfunction fill(headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (const header of object) {\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        });\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      headers.append(header[0], header[1]);\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    for (const [key, value] of Object.entries(object)) {\n      headers.append(key, value);\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    });\n  }\n}\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null;\n  constructor(init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap]);\n      this[kHeadersSortedMap] = init[kHeadersSortedMap];\n    } else {\n      this[kHeadersMap] = new Map(init);\n      this[kHeadersSortedMap] = null;\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains(name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase();\n    return this[kHeadersMap].has(name);\n  }\n  clear() {\n    this[kHeadersMap].clear();\n    this[kHeadersSortedMap] = null;\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append(name, value) {\n    this[kHeadersSortedMap] = null;\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = name.toLowerCase();\n    const exists = this[kHeadersMap].get(lowercaseName);\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}, ${value}`\n      });\n    } else {\n      this[kHeadersMap].set(lowercaseName, {\n        name,\n        value\n      });\n    }\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= [];\n      this.cookies.push([name, value]);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set(name, value) {\n    this[kHeadersSortedMap] = null;\n    const lowercaseName = name.toLowerCase();\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [[name, value]];\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    return this[kHeadersMap].set(lowercaseName, {\n      name,\n      value\n    });\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete(name) {\n    this[kHeadersSortedMap] = null;\n    name = name.toLowerCase();\n    if (name === 'set-cookie') {\n      this.cookies = null;\n    }\n    return this[kHeadersMap].delete(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get(name) {\n    // 1. If list does not contain name, then return null.\n    if (!this.contains(name)) {\n      return null;\n    }\n\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(name.toLowerCase())?.value ?? null;\n  }\n  *[Symbol.iterator]() {\n    // use the lowercased name\n    for (const [name, {\n      value\n    }] of this[kHeadersMap]) {\n      yield [name, value];\n    }\n  }\n  get [kHeadersCaseInsensitive]() {\n    /** @type {string[]} */\n    const flatList = [];\n    for (const {\n      name,\n      value\n    } of this[kHeadersMap].values()) {\n      flatList.push(name, value);\n    }\n    return flatList;\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    this[kHeadersList] = new HeadersList();\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this[kGuard] = 'none';\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init);\n      fill(this, init);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, {\n      header: 'Headers.append'\n    });\n    name = webidl.converters.ByteString(name);\n    value = webidl.converters.ByteString(value);\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if headers’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n      // TODO\n    }\n\n    // 6. Otherwise, if headers’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n\n    // 7. Append (name, value) to headers’s header list.\n    // 8. If headers’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from headers\n    return this[kHeadersList].append(name, value);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.delete'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return;\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    return this[kHeadersList].delete(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.get'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this[kHeadersList].get(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.has'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, {\n      header: 'Headers.set'\n    });\n    name = webidl.converters.ByteString(name);\n    value = webidl.converters.ByteString(value);\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    return this[kHeadersList].set(name, value);\n  }\n  get [kHeadersSortedMap]() {\n    if (!this[kHeadersList][kHeadersSortedMap]) {\n      this[kHeadersList][kHeadersSortedMap] = new Map([...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1));\n    }\n    return this[kHeadersList][kHeadersSortedMap];\n  }\n  keys() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].entries()], 'Headers', 'key');\n  }\n  values() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].entries()], 'Headers', 'value');\n  }\n  entries() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].entries()], 'Headers', 'key+value');\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach(callbackFn) {\n    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis;\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.forEach'\n    });\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\");\n    }\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this]);\n    }\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    webidl.brandCheck(this, Headers);\n    return this[kHeadersList];\n  }\n}\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries;\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: {\n    enumerable: false\n  },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n});\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V);\n    }\n    return webidl.converters['record<ByteString, ByteString>'](V);\n  }\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  });\n};\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n};","map":{"version":3,"names":["kHeadersList","require","kGuard","kHeadersCaseInsensitive","kEnumerableProperty","makeIterator","isValidHeaderName","isValidHeaderValue","webidl","kHeadersMap","Symbol","kHeadersSortedMap","headerValueNormalize","potentialValue","replace","fill","headers","object","Array","isArray","header","length","errors","exception","message","append","key","value","Object","entries","conversionFailed","prefix","argument","types","HeadersList","cookies","constructor","init","Map","contains","name","toLowerCase","has","clear","lowercaseName","exists","get","set","push","delete","iterator","flatList","values","Headers","undefined","converters","HeadersInit","brandCheck","argumentLengthCheck","arguments","ByteString","invalidArgument","type","TypeError","sort","a","b","keys","forEach","callbackFn","thisArg","globalThis","apply","for","prototype","defineProperties","enumerable","toStringTag","configurable","V","util","Type","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/undici/lib/fetch/headers.js"],"sourcesContent":["// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kHeadersList } = require('../core/symbols')\nconst { kGuard, kHeadersCaseInsensitive } = require('./symbols')\nconst { kEnumerableProperty } = require('../core/util')\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  return potentialValue.replace(\n    /^[\\r\\n\\t ]+|[\\r\\n\\t ]+$/g,\n    ''\n  )\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (const header of object) {\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      headers.append(header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    for (const [key, value] of Object.entries(object)) {\n      headers.append(key, value)\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains (name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase()\n\n    return this[kHeadersMap].has(name)\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append (name, value) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      this[kHeadersMap].set(lowercaseName, { name: exists.name, value: `${exists.value}, ${value}` })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= []\n      this.cookies.push([name, value])\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set (name, value) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [[name, value]]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    return this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete (name) {\n    this[kHeadersSortedMap] = null\n\n    name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    return this[kHeadersMap].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get (name) {\n    // 1. If list does not contain name, then return null.\n    if (!this.contains(name)) {\n      return null\n    }\n\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(name.toLowerCase())?.value ?? null\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const [name, { value }] of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get [kHeadersCaseInsensitive] () {\n    /** @type {string[]} */\n    const flatList = []\n\n    for (const { name, value } of this[kHeadersMap].values()) {\n      flatList.push(name, value)\n    }\n\n    return flatList\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor (init = undefined) {\n    this[kHeadersList] = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this[kGuard] = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init)\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if headers’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n      // TODO\n    }\n\n    // 6. Otherwise, if headers’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n\n    // 7. Append (name, value) to headers’s header list.\n    // 8. If headers’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from headers\n    return this[kHeadersList].append(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    return this[kHeadersList].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this[kHeadersList].get(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    return this[kHeadersList].set(name, value)\n  }\n\n  get [kHeadersSortedMap] () {\n    if (!this[kHeadersList][kHeadersSortedMap]) {\n      this[kHeadersList][kHeadersSortedMap] = new Map([...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1))\n    }\n    return this[kHeadersList][kHeadersSortedMap]\n  }\n\n  keys () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].entries()],\n      'Headers',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].entries()],\n      'Headers',\n      'value'\n    )\n  }\n\n  entries () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].entries()],\n      'Headers',\n      'key+value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    webidl.brandCheck(this, Headers)\n\n    return this[kHeadersList]\n  }\n}\n\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: { enumerable: false },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n})\n\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V)\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}