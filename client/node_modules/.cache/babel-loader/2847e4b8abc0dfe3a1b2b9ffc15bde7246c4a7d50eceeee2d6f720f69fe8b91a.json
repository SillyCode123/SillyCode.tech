{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TeamMember = require('./TeamMember');\n\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The Team's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the Team\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('icon' in data) {\n      /**\n       * The Team's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n    if ('owner_user_id' in data) {\n      /**\n       * The Team's owner id\n       * @type {?Snowflake}\n       */\n      this.ownerId = data.owner_user_id;\n    } else {\n      this.ownerId ??= null;\n    }\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n    this.members = new Collection();\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerId) ?? null;\n  }\n\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the team's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.icon && this.client.rest.cdn.teamIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    return super.toJSON({\n      createdTimestamp: true\n    });\n  }\n}\nmodule.exports = Team;","map":{"version":3,"names":["Collection","require","DiscordSnowflake","Base","TeamMember","Team","constructor","client","data","_patch","id","name","icon","ownerId","owner_user_id","members","memberData","member","set","owner","get","createdTimestamp","timestampFrom","createdAt","Date","iconURL","options","rest","cdn","teamIcon","toString","toJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Team.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TeamMember = require('./TeamMember');\n\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The Team's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the Team\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The Team's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n\n    if ('owner_user_id' in data) {\n      /**\n       * The Team's owner id\n       * @type {?Snowflake}\n       */\n      this.ownerId = data.owner_user_id;\n    } else {\n      this.ownerId ??= null;\n    }\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n    this.members = new Collection();\n\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerId) ?? null;\n  }\n\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the team's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.teamIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Team;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMG,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC;;AAE1C;AACA;AACA;AACA;AACA,MAAMI,IAAI,SAASF,IAAI,CAAC;EACtBG,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;IACb,IAAI,CAACE,MAAM,CAACD,IAAI,CAAC;EACnB;EAEAC,MAAM,CAACD,IAAI,EAAE;IACX;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGF,IAAI,CAACE,EAAE;IAEjB,IAAI,MAAM,IAAIF,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACG,IAAI;IACvB;IAEA,IAAI,MAAM,IAAIH,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACI,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACvB,CAAC,MAAM;MACL,IAAI,CAACA,IAAI,KAAK,IAAI;IACpB;IAEA,IAAI,eAAe,IAAIJ,IAAI,EAAE;MAC3B;AACN;AACA;AACA;MACM,IAAI,CAACK,OAAO,GAAGL,IAAI,CAACM,aAAa;IACnC,CAAC,MAAM;MACL,IAAI,CAACD,OAAO,KAAK,IAAI;IACvB;IACA;AACJ;AACA;AACA;IACI,IAAI,CAACE,OAAO,GAAG,IAAIf,UAAU,EAAE;IAE/B,KAAK,MAAMgB,UAAU,IAAIR,IAAI,CAACO,OAAO,EAAE;MACrC,MAAME,MAAM,GAAG,IAAIb,UAAU,CAAC,IAAI,EAAEY,UAAU,CAAC;MAC/C,IAAI,CAACD,OAAO,CAACG,GAAG,CAACD,MAAM,CAACP,EAAE,EAAEO,MAAM,CAAC;IACrC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIE,KAAK,GAAG;IACV,OAAO,IAAI,CAACJ,OAAO,CAACK,GAAG,CAAC,IAAI,CAACP,OAAO,CAAC,IAAI,IAAI;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIQ,gBAAgB,GAAG;IACrB,OAAOnB,gBAAgB,CAACoB,aAAa,CAAC,IAAI,CAACZ,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIa,SAAS,GAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEI,OAAO,GAAe;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAClB,OAAO,IAAI,CAACd,IAAI,IAAI,IAAI,CAACL,MAAM,CAACoB,IAAI,CAACC,GAAG,CAACC,QAAQ,CAAC,IAAI,CAACnB,EAAE,EAAE,IAAI,CAACE,IAAI,EAAEc,OAAO,CAAC;EAChF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,QAAQ,GAAG;IACT,OAAO,IAAI,CAACnB,IAAI;EAClB;EAEAoB,MAAM,GAAG;IACP,OAAO,KAAK,CAACA,MAAM,CAAC;MAAEV,gBAAgB,EAAE;IAAK,CAAC,CAAC;EACjD;AACF;AAEAW,MAAM,CAACC,OAAO,GAAG5B,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}