{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst Base = require('./Base');\n\n/**\n * Represents the data about a public {@link StageInstance} in an {@link Invite}.\n * @extends {Base}\n * @deprecated\n */\nclass InviteStageInstance extends Base {\n  constructor(client, data, channelId, guildId) {\n    super(client);\n\n    /**\n     * The id of the stage channel this invite is for\n     * @type {Snowflake}\n     */\n    this.channelId = channelId;\n\n    /**\n     * The stage channel's guild id\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    /**\n     * The members speaking in the stage channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n    if ('participant_count' in data) {\n      /**\n       * The number of users in the stage channel\n       * @type {number}\n       */\n      this.participantCount = data.participant_count;\n    }\n    if ('speaker_count' in data) {\n      /**\n       * The number of users speaking in the stage channel\n       * @type {number}\n       */\n      this.speakerCount = data.speaker_count;\n    }\n    this.members.clear();\n    for (const rawMember of data.members) {\n      const member = this.guild.members._add(rawMember);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The stage channel this invite is for\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild of the stage channel this invite is for\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n}\nmodule.exports = InviteStageInstance;","map":{"version":3,"names":["Collection","require","Base","InviteStageInstance","constructor","client","data","channelId","guildId","members","_patch","topic","participantCount","participant_count","speakerCount","speaker_count","clear","rawMember","member","guild","_add","set","id","channel","channels","resolve","guilds","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/InviteStageInstance.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\n\n/**\n * Represents the data about a public {@link StageInstance} in an {@link Invite}.\n * @extends {Base}\n * @deprecated\n */\nclass InviteStageInstance extends Base {\n  constructor(client, data, channelId, guildId) {\n    super(client);\n\n    /**\n     * The id of the stage channel this invite is for\n     * @type {Snowflake}\n     */\n    this.channelId = channelId;\n\n    /**\n     * The stage channel's guild id\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    /**\n     * The members speaking in the stage channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('participant_count' in data) {\n      /**\n       * The number of users in the stage channel\n       * @type {number}\n       */\n      this.participantCount = data.participant_count;\n    }\n\n    if ('speaker_count' in data) {\n      /**\n       * The number of users speaking in the stage channel\n       * @type {number}\n       */\n      this.speakerCount = data.speaker_count;\n    }\n\n    this.members.clear();\n    for (const rawMember of data.members) {\n      const member = this.guild.members._add(rawMember);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The stage channel this invite is for\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild of the stage channel this invite is for\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n}\n\nmodule.exports = InviteStageInstance;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,SAASD,IAAI,CAAC;EACrCE,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;IAC5C,KAAK,CAACH,MAAM,CAAC;;IAEb;AACJ;AACA;AACA;IACI,IAAI,CAACE,SAAS,GAAGA,SAAS;;IAE1B;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAIT,UAAU,EAAE;IAE/B,IAAI,CAACU,MAAM,CAACJ,IAAI,CAAC;EACnB;EAEAI,MAAM,CAACJ,IAAI,EAAE;IACX,IAAI,OAAO,IAAIA,IAAI,EAAE;MACnB;AACN;AACA;AACA;MACM,IAAI,CAACK,KAAK,GAAGL,IAAI,CAACK,KAAK;IACzB;IAEA,IAAI,mBAAmB,IAAIL,IAAI,EAAE;MAC/B;AACN;AACA;AACA;MACM,IAAI,CAACM,gBAAgB,GAAGN,IAAI,CAACO,iBAAiB;IAChD;IAEA,IAAI,eAAe,IAAIP,IAAI,EAAE;MAC3B;AACN;AACA;AACA;MACM,IAAI,CAACQ,YAAY,GAAGR,IAAI,CAACS,aAAa;IACxC;IAEA,IAAI,CAACN,OAAO,CAACO,KAAK,EAAE;IACpB,KAAK,MAAMC,SAAS,IAAIX,IAAI,CAACG,OAAO,EAAE;MACpC,MAAMS,MAAM,GAAG,IAAI,CAACC,KAAK,CAACV,OAAO,CAACW,IAAI,CAACH,SAAS,CAAC;MACjD,IAAI,CAACR,OAAO,CAACY,GAAG,CAACH,MAAM,CAACI,EAAE,EAAEJ,MAAM,CAAC;IACrC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIK,OAAO,GAAG;IACZ,OAAO,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAACC,OAAO,CAAC,IAAI,CAAClB,SAAS,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIY,KAAK,GAAG;IACV,OAAO,IAAI,CAACd,MAAM,CAACqB,MAAM,CAACD,OAAO,CAAC,IAAI,CAACjB,OAAO,CAAC;EACjD;AACF;AAEAmB,MAAM,CAACC,OAAO,GAAGzB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}