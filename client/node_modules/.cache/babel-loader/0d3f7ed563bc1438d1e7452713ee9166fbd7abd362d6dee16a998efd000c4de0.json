{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst DataManager = require('./DataManager');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst {\n  Role\n} = require('../structures/Role');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n * @extends {DataManager}\n */\nclass GuildEmojiRoleManager extends DataManager {\n  constructor(emoji) {\n    super(emoji.client, Role);\n\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n    const resolvedRoles = [];\n    for (const role of roleOrRoles.values()) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n      if (!resolvedRole) {\n        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));\n      }\n      resolvedRoles.push(resolvedRole);\n    }\n    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n    const resolvedRoleIds = [];\n    for (const role of roleOrRoles.values()) {\n      const roleId = this.guild.roles.resolveId(role);\n      if (!roleId) {\n        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));\n      }\n      resolvedRoleIds.push(roleId);\n    }\n    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({\n      roles\n    });\n  }\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch([...this.cache.keys()]);\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n  valueOf() {\n    return this.cache;\n  }\n}\nmodule.exports = GuildEmojiRoleManager;","map":{"version":3,"names":["Collection","require","DataManager","DiscordjsTypeError","ErrorCodes","Role","GuildEmojiRoleManager","constructor","emoji","client","guild","cache","roles","filter","role","_roles","includes","id","add","roleOrRoles","Array","isArray","resolvedRoles","values","resolvedRole","resolveId","Promise","reject","InvalidElement","push","newRoles","Set","concat","keys","set","remove","resolvedRoleIds","roleId","edit","clone","_patch","valueOf","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/GuildEmojiRoleManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst DataManager = require('./DataManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Role } = require('../structures/Role');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n * @extends {DataManager}\n */\nclass GuildEmojiRoleManager extends DataManager {\n  constructor(emoji) {\n    super(emoji.client, Role);\n\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoles = [];\n    for (const role of roleOrRoles.values()) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n      if (!resolvedRole) {\n        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));\n      }\n      resolvedRoles.push(resolvedRole);\n    }\n\n    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoleIds = [];\n    for (const role of roleOrRoles.values()) {\n      const roleId = this.guild.roles.resolveId(role);\n      if (!roleId) {\n        return Promise.reject(new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role));\n      }\n      resolvedRoleIds.push(roleId);\n    }\n\n    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch([...this.cache.keys()]);\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}