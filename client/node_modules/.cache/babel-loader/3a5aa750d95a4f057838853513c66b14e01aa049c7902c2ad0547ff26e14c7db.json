{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst MessageManager = require('../managers/MessageManager');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n * @implements {TextBasedChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n    this._patch(data);\n  }\n  _patch(data) {\n    super._patch(data);\n    if ('video_quality_mode' in data) {\n      /**\n       * The camera video quality mode of the channel.\n       * @type {?VideoQualityMode}\n       */\n      this.videoQualityMode = data.video_quality_mode;\n    } else {\n      this.videoQualityMode ??= null;\n    }\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n    if ('nsfw' in data) {\n      this.nsfw = Boolean(data.nsfw);\n    }\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    return this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() && permissions.has(PermissionFlagsBits.Speak, false);\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48_000)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({\n      bitrate,\n      reason\n    });\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({\n      userLimit,\n      reason\n    });\n  }\n\n  /**\n   * Sets the camera video quality mode of the channel.\n   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n   * @param {string} [reason] Reason for changing the camera video quality mode.\n   * @returns {Promise<VoiceChannel>}\n   */\n  setVideoQualityMode(videoQualityMode, reason) {\n    return this.edit({\n      videoQualityMode,\n      reason\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\nTextBasedChannel.applyToClass(VoiceChannel, true, ['lastPinAt']);\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof VoiceChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the RTC region to sydney\n * voiceChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\nmodule.exports = VoiceChannel;","map":{"version":3,"names":["PermissionFlagsBits","require","BaseGuildVoiceChannel","TextBasedChannel","MessageManager","VoiceChannel","constructor","guild","data","client","messages","nsfw","Boolean","_patch","videoQualityMode","video_quality_mode","lastMessageId","last_message_id","message","_add","rateLimitPerUser","rate_limit_per_user","joinable","full","permissionsFor","user","has","MoveMembers","speakable","permissions","Administrator","members","me","communicationDisabledUntilTimestamp","Date","now","Speak","setBitrate","bitrate","reason","edit","setUserLimit","userLimit","setVideoQualityMode","lastMessage","send","sendTyping","createMessageCollector","awaitMessages","createMessageComponentCollector","awaitMessageComponent","bulkDelete","fetchWebhooks","createWebhook","setRateLimitPerUser","setNSFW","applyToClass","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/VoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst MessageManager = require('../managers/MessageManager');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n * @implements {TextBasedChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('video_quality_mode' in data) {\n      /**\n       * The camera video quality mode of the channel.\n       * @type {?VideoQualityMode}\n       */\n      this.videoQualityMode = data.video_quality_mode;\n    } else {\n      this.videoQualityMode ??= null;\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n\n    if ('nsfw' in data) {\n      this.nsfw = Boolean(data.nsfw);\n    }\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Speak, false)\n    );\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48_000)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({ bitrate, reason });\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit, reason });\n  }\n\n  /**\n   * Sets the camera video quality mode of the channel.\n   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n   * @param {string} [reason] Reason for changing the camera video quality mode.\n   * @returns {Promise<VoiceChannel>}\n   */\n  setVideoQualityMode(videoQualityMode, reason) {\n    return this.edit({ videoQualityMode, reason });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(VoiceChannel, true, ['lastPinAt']);\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof VoiceChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the RTC region to sydney\n * voiceChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\nmodule.exports = VoiceChannel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}