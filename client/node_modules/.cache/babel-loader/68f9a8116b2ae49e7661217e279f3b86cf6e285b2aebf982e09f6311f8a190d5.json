{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  isEquatable: () => isEquatable,\n  isJSONEncodable: () => isJSONEncodable,\n  lazy: () => lazy,\n  range: () => range\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/functions/lazy.ts\nfunction lazy(cb) {\n  let defaultValue;\n  return () => defaultValue ??= cb();\n}\n__name(lazy, \"lazy\");\n\n// src/functions/range.ts\nfunction range(start, end) {\n  let step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return Array.from({\n    length: (end - start) / step + 1\n  }, (_, index) => start + index * step);\n}\n__name(range, \"range\");\n\n// src/JSONEncodable.ts\nfunction isJSONEncodable(maybeEncodable) {\n  return maybeEncodable !== null && typeof maybeEncodable === \"object\" && \"toJSON\" in maybeEncodable;\n}\n__name(isJSONEncodable, \"isJSONEncodable\");\n\n// src/Equatable.ts\nfunction isEquatable(maybeEquatable) {\n  return maybeEquatable !== null && typeof maybeEquatable === \"object\" && \"equals\" in maybeEquatable;\n}\n__name(isEquatable, \"isEquatable\");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  isEquatable,\n  isJSONEncodable,\n  lazy,\n  range\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAA;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAAAC;;;ACaO,SAASF,KAAQG,IAAsB;EAC7C,IAAIC;EAEJ,OAAO,MAAOA,iBAAiBD,IAAG;AACnC;AAJgBE;;;ACIT,SAASJ,MAAMK,OAAeC,KAAiC;EAAA,IAApBC,2EAAO;EACxD,OAAOC,MAAMC,KAAK;IAAEC,SAASJ,MAAMD,SAASE,OAAO;EAAE,GAAG,CAACI,GAAGC,UAAUP,QAAQO,QAAQL,IAAI;AAC3F;AAFgBH;;;ACAT,SAASN,gBAAgBe,gBAAmE;EAClG,OAAOA,mBAAmB,QAAQ,OAAOA,mBAAmB,YAAY,YAAYA;AACrF;AAFgBT;;;ACCT,SAASP,YAAYiB,gBAA+D;EAC1F,OAAOA,mBAAmB,QAAQ,OAAOA,mBAAmB,YAAY,YAAYA;AACrF;AAFgBV","names":["__export","isEquatable","isJSONEncodable","lazy","range","module","cb","defaultValue","__name","start","end","step","Array","from","length","_","index","maybeEncodable","maybeEquatable"],"sources":["J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\util\\src\\index.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\util\\src\\functions\\lazy.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\util\\src\\functions\\range.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\util\\src\\JSONEncodable.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\util\\src\\Equatable.ts"],"sourcesContent":["export * from './types.js';\nexport * from './functions/index.js';\nexport * from './JSONEncodable.js';\nexport * from './Equatable.js';\n","/**\n * Lazy is a wrapper around a value that is computed lazily. It is useful for\n * cases where the value is expensive to compute and the computation may not\n * be needed at all.\n *\n * @param cb - The callback to lazily evaluate\n * @typeParam T - The type of the value\n * @example\n * ```ts\n * const value = lazy(() => computeExpensiveValue());\n * ```\n */\n// eslint-disable-next-line promise/prefer-await-to-callbacks\nexport function lazy<T>(cb: () => T): () => T {\n\tlet defaultValue: T;\n\t// eslint-disable-next-line promise/prefer-await-to-callbacks\n\treturn () => (defaultValue ??= cb());\n}\n","/**\n * Yields the numbers in the given range as an array\n *\n * @param start - The start of the range\n * @param end - The end of the range (inclusive)\n * @param step - The amount to increment between each number\n * @example\n * Basic range\n * ```ts\n * range(3, 5); // [3, 4, 5]\n * ```\n * @example\n * Range with a step\n * ```ts\n * range(3, 10, 2); // [3, 5, 7, 9]\n * ```\n */\nexport function range(start: number, end: number, step = 1): number[] {\n\treturn Array.from({ length: (end - start) / step + 1 }, (_, index) => start + index * step);\n}\n","/**\n * Represents an object capable of representing itself as a JSON object\n *\n * @typeParam T - The JSON type corresponding to {@link JSONEncodable.toJSON} outputs.\n */\nexport interface JSONEncodable<T> {\n\t/**\n\t * Transforms this object to its JSON format\n\t */\n\ttoJSON(): T;\n}\n\n/**\n * Indicates if an object is encodable or not.\n *\n * @param maybeEncodable - The object to check against\n */\nexport function isJSONEncodable(maybeEncodable: unknown): maybeEncodable is JSONEncodable<unknown> {\n\treturn maybeEncodable !== null && typeof maybeEncodable === 'object' && 'toJSON' in maybeEncodable;\n}\n","/**\n * Represents a structure that can be checked against another\n * given structure for equality\n *\n * @typeParam T - The type of object to compare the current object to\n */\nexport interface Equatable<T> {\n\t/**\n\t * Whether or not this is equal to another structure\n\t */\n\tequals(other: T): boolean;\n}\n\n/**\n * Indicates if an object is equatable or not.\n *\n * @param maybeEquatable - The object to check against\n */\nexport function isEquatable(maybeEquatable: unknown): maybeEquatable is Equatable<unknown> {\n\treturn maybeEquatable !== null && typeof maybeEquatable === 'object' && 'equals' in maybeEquatable;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}