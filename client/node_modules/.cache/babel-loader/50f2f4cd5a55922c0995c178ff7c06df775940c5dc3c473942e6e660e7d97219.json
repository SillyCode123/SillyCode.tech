{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst {\n  Sticker\n} = require('./Sticker');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n    if (!data) return;\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of this guild\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('icon' in data) {\n      /**\n       * The icon of this guild\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    }\n    if ('splash' in data) {\n      /**\n       * The splash icon of this guild\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n    if ('discovery_splash' in data) {\n      /**\n       * The discovery splash icon of this guild\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n    if ('features' in data) {\n      /**\n       * An array of enabled guild features\n       * @type {GuildFeature[]}\n       */\n      this.features = data.features;\n    }\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate count of members in this guild\n       * @type {number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    }\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate count of online members in this guild\n       * @type {number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    }\n    if ('description' in data) {\n      /**\n       * The description for this guild\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n\n    /**\n     * Collection of stickers belonging to this guild\n     * @type {Collection<Snowflake, Sticker>}\n     */\n    this.stickers = data.stickers.reduce((stickers, sticker) => stickers.set(sticker.id, new Sticker(this.client, sticker)), new Collection());\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\nmodule.exports = GuildPreview;","map":{"version":3,"names":["Collection","require","DiscordSnowflake","Routes","Base","GuildPreviewEmoji","Sticker","GuildPreview","constructor","client","data","_patch","id","name","icon","splash","discoverySplash","discovery_splash","features","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","description","emojis","clear","emoji","set","stickers","reduce","sticker","createdTimestamp","timestampFrom","createdAt","Date","splashURL","options","rest","cdn","discoverySplashURL","iconURL","fetch","get","guildPreview","toString","toJSON","json","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildPreview.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst { Sticker } = require('./Sticker');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of this guild\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The icon of this guild\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    }\n\n    if ('splash' in data) {\n      /**\n       * The splash icon of this guild\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The discovery splash icon of this guild\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('features' in data) {\n      /**\n       * An array of enabled guild features\n       * @type {GuildFeature[]}\n       */\n      this.features = data.features;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate count of members in this guild\n       * @type {number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate count of online members in this guild\n       * @type {number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description for this guild\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n\n    /**\n     * Collection of stickers belonging to this guild\n     * @type {Collection<Snowflake, Sticker>}\n     */\n    this.stickers = data.stickers.reduce(\n      (stickers, sticker) => stickers.set(sticker.id, new Sticker(this.client, sticker)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL(options = {}) {\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL(options = {}) {\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMG,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AACxD,MAAM;EAAEK;AAAQ,CAAC,GAAGL,OAAO,CAAC,WAAW,CAAC;;AAExC;AACA;AACA;AACA;AACA,MAAMM,YAAY,SAASH,IAAI,CAAC;EAC9BI,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;IAEb,IAAI,CAACC,IAAI,EAAE;IAEX,IAAI,CAACC,MAAM,CAACD,IAAI,CAAC;EACnB;EAEAC,MAAM,CAACD,IAAI,EAAE;IACX;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGF,IAAI,CAACE,EAAE;IAEjB,IAAI,MAAM,IAAIF,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACG,IAAI;IACvB;IAEA,IAAI,MAAM,IAAIH,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACI,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACvB;IAEA,IAAI,QAAQ,IAAIJ,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACK,MAAM;IAC3B;IAEA,IAAI,kBAAkB,IAAIL,IAAI,EAAE;MAC9B;AACN;AACA;AACA;MACM,IAAI,CAACM,eAAe,GAAGN,IAAI,CAACO,gBAAgB;IAC9C;IAEA,IAAI,UAAU,IAAIP,IAAI,EAAE;MACtB;AACN;AACA;AACA;MACM,IAAI,CAACQ,QAAQ,GAAGR,IAAI,CAACQ,QAAQ;IAC/B;IAEA,IAAI,0BAA0B,IAAIR,IAAI,EAAE;MACtC;AACN;AACA;AACA;MACM,IAAI,CAACS,sBAAsB,GAAGT,IAAI,CAACU,wBAAwB;IAC7D;IAEA,IAAI,4BAA4B,IAAIV,IAAI,EAAE;MACxC;AACN;AACA;AACA;MACM,IAAI,CAACW,wBAAwB,GAAGX,IAAI,CAACY,0BAA0B;IACjE;IAEA,IAAI,aAAa,IAAIZ,IAAI,EAAE;MACzB;AACN;AACA;AACA;MACM,IAAI,CAACa,WAAW,GAAGb,IAAI,CAACa,WAAW;IACrC,CAAC,MAAM;MACL,IAAI,CAACA,WAAW,KAAK,IAAI;IAC3B;IAEA,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;MAChB;AACN;AACA;AACA;MACM,IAAI,CAACA,MAAM,GAAG,IAAIxB,UAAU,EAAE;IAChC,CAAC,MAAM;MACL,IAAI,CAACwB,MAAM,CAACC,KAAK,EAAE;IACrB;IACA,KAAK,MAAMC,KAAK,IAAIhB,IAAI,CAACc,MAAM,EAAE;MAC/B,IAAI,CAACA,MAAM,CAACG,GAAG,CAACD,KAAK,CAACd,EAAE,EAAE,IAAIP,iBAAiB,CAAC,IAAI,CAACI,MAAM,EAAEiB,KAAK,EAAE,IAAI,CAAC,CAAC;IAC5E;;IAEA;AACJ;AACA;AACA;IACI,IAAI,CAACE,QAAQ,GAAGlB,IAAI,CAACkB,QAAQ,CAACC,MAAM,CAClC,CAACD,QAAQ,EAAEE,OAAO,KAAKF,QAAQ,CAACD,GAAG,CAACG,OAAO,CAAClB,EAAE,EAAE,IAAIN,OAAO,CAAC,IAAI,CAACG,MAAM,EAAEqB,OAAO,CAAC,CAAC,EAClF,IAAI9B,UAAU,EAAE,CACjB;EACH;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAI+B,gBAAgB,GAAG;IACrB,OAAO7B,gBAAgB,CAAC8B,aAAa,CAAC,IAAI,CAACpB,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIqB,SAAS,GAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEI,SAAS,GAAe;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IACpB,OAAO,IAAI,CAACrB,MAAM,IAAI,IAAI,CAACN,MAAM,CAAC4B,IAAI,CAACC,GAAG,CAACvB,MAAM,CAAC,IAAI,CAACH,EAAE,EAAE,IAAI,CAACG,MAAM,EAAEqB,OAAO,CAAC;EAClF;;EAEA;AACF;AACA;AACA;AACA;EACEG,kBAAkB,GAAe;IAAA,IAAdH,OAAO,uEAAG,CAAC,CAAC;IAC7B,OAAO,IAAI,CAACpB,eAAe,IAAI,IAAI,CAACP,MAAM,CAAC4B,IAAI,CAACC,GAAG,CAACtB,eAAe,CAAC,IAAI,CAACJ,EAAE,EAAE,IAAI,CAACI,eAAe,EAAEoB,OAAO,CAAC;EAC7G;;EAEA;AACF;AACA;AACA;AACA;EACEI,OAAO,GAAe;IAAA,IAAdJ,OAAO,uEAAG,CAAC,CAAC;IAClB,OAAO,IAAI,CAACtB,IAAI,IAAI,IAAI,CAACL,MAAM,CAAC4B,IAAI,CAACC,GAAG,CAACxB,IAAI,CAAC,IAAI,CAACF,EAAE,EAAE,IAAI,CAACE,IAAI,EAAEsB,OAAO,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;EACE,MAAMK,KAAK,GAAG;IACZ,MAAM/B,IAAI,GAAG,MAAM,IAAI,CAACD,MAAM,CAAC4B,IAAI,CAACK,GAAG,CAACvC,MAAM,CAACwC,YAAY,CAAC,IAAI,CAAC/B,EAAE,CAAC,CAAC;IACrE,IAAI,CAACD,MAAM,CAACD,IAAI,CAAC;IACjB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEkC,QAAQ,GAAG;IACT,OAAO,IAAI,CAAC/B,IAAI;EAClB;EAEAgC,MAAM,GAAG;IACP,MAAMC,IAAI,GAAG,KAAK,CAACD,MAAM,EAAE;IAC3BC,IAAI,CAACN,OAAO,GAAG,IAAI,CAACA,OAAO,EAAE;IAC7BM,IAAI,CAACX,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;IACjC,OAAOW,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGzC,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}