{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst {\n  DiscordjsTypeError,\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst {\n  StageInstance\n} = require('../structures/StageInstance');\n\n/**\n * Manages API methods for {@link StageInstance} objects and holds their cache.\n * @extends {CachedManager}\n */\nclass StageInstanceManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, StageInstance, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, StageInstance>}\n   * @name StageInstanceManager#cache\n   */\n\n  /**\n   * Options used to create a stage instance.\n   * @typedef {Object} StageInstanceCreateOptions\n   * @property {string} topic The topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The privacy level of the stage instance\n   * @property {boolean} [sendStartNotification] Whether to notify `@everyone` that the stage instance has started\n   */\n\n  /**\n   * Data that can be resolved to a Stage Channel object. This can be:\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {StageChannel|Snowflake} StageChannelResolvable\n   */\n\n  /**\n   * Creates a new stage instance.\n   * @param {StageChannelResolvable} channel The stage channel to associate the created stage instance to\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Create a stage instance\n   * guild.stageInstances.create('1234567890123456789', {\n   *  topic: 'A very creative topic',\n   *  privacyLevel: GuildPrivacyLevel.GuildOnly\n   * })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async create(channel, options) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    let {\n      topic,\n      privacyLevel,\n      sendStartNotification\n    } = options;\n    const data = await this.client.rest.post(Routes.stageInstances(), {\n      body: {\n        channel_id: channelId,\n        topic,\n        privacy_level: privacyLevel,\n        send_start_notification: sendStartNotification\n      }\n    });\n    return this._add(data);\n  }\n\n  /**\n   * Fetches the stage instance associated with a stage channel, if it exists.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Fetch a stage instance\n   * guild.stageInstances.fetch('1234567890123456789')\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async fetch(channel) {\n    let {\n      cache = true,\n      force = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    if (!force) {\n      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);\n      if (existing) return existing;\n    }\n    const data = await this.client.rest.get(Routes.stageInstance(channelId));\n    return this._add(data, cache);\n  }\n\n  /**\n   * Options used to edit an existing stage instance.\n   * @typedef {Object} StageInstanceEditOptions\n   * @property {string} [topic] The new topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The new privacy level of the stage instance\n   */\n\n  /**\n   * Edits an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be edited\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async edit(channel, options) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    let {\n      topic,\n      privacyLevel\n    } = options;\n    const data = await this.client.rest.patch(Routes.stageInstance(channelId), {\n      body: {\n        topic,\n        privacy_level: privacyLevel\n      }\n    });\n    if (this.cache.has(data.id)) {\n      const clone = this.cache.get(data.id)._clone();\n      clone._patch(data);\n      return clone;\n    }\n    return this._add(data);\n  }\n\n  /**\n   * Deletes an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be deleted\n   * @returns {Promise<void>}\n   */\n  async delete(channel) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    await this.client.rest.delete(Routes.stageInstance(channelId));\n  }\n}\nmodule.exports = StageInstanceManager;","map":{"version":3,"names":["Routes","require","CachedManager","DiscordjsTypeError","DiscordjsError","ErrorCodes","StageInstance","StageInstanceManager","constructor","guild","iterable","client","create","channel","options","channelId","channels","resolveId","StageChannelResolve","InvalidType","topic","privacyLevel","sendStartNotification","data","rest","post","stageInstances","body","channel_id","privacy_level","send_start_notification","_add","fetch","cache","force","existing","find","stageInstance","get","edit","patch","has","id","clone","_clone","_patch","delete","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/StageInstanceManager.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../errors');\nconst { StageInstance } = require('../structures/StageInstance');\n\n/**\n * Manages API methods for {@link StageInstance} objects and holds their cache.\n * @extends {CachedManager}\n */\nclass StageInstanceManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, StageInstance, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, StageInstance>}\n   * @name StageInstanceManager#cache\n   */\n\n  /**\n   * Options used to create a stage instance.\n   * @typedef {Object} StageInstanceCreateOptions\n   * @property {string} topic The topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The privacy level of the stage instance\n   * @property {boolean} [sendStartNotification] Whether to notify `@everyone` that the stage instance has started\n   */\n\n  /**\n   * Data that can be resolved to a Stage Channel object. This can be:\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {StageChannel|Snowflake} StageChannelResolvable\n   */\n\n  /**\n   * Creates a new stage instance.\n   * @param {StageChannelResolvable} channel The stage channel to associate the created stage instance to\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Create a stage instance\n   * guild.stageInstances.create('1234567890123456789', {\n   *  topic: 'A very creative topic',\n   *  privacyLevel: GuildPrivacyLevel.GuildOnly\n   * })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async create(channel, options) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    let { topic, privacyLevel, sendStartNotification } = options;\n\n    const data = await this.client.rest.post(Routes.stageInstances(), {\n      body: {\n        channel_id: channelId,\n        topic,\n        privacy_level: privacyLevel,\n        send_start_notification: sendStartNotification,\n      },\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Fetches the stage instance associated with a stage channel, if it exists.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Fetch a stage instance\n   * guild.stageInstances.fetch('1234567890123456789')\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async fetch(channel, { cache = true, force = false } = {}) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    if (!force) {\n      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.stageInstance(channelId));\n    return this._add(data, cache);\n  }\n\n  /**\n   * Options used to edit an existing stage instance.\n   * @typedef {Object} StageInstanceEditOptions\n   * @property {string} [topic] The new topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The new privacy level of the stage instance\n   */\n\n  /**\n   * Edits an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be edited\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async edit(channel, options) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    let { topic, privacyLevel } = options;\n\n    const data = await this.client.rest.patch(Routes.stageInstance(channelId), {\n      body: {\n        topic,\n        privacy_level: privacyLevel,\n      },\n    });\n\n    if (this.cache.has(data.id)) {\n      const clone = this.cache.get(data.id)._clone();\n      clone._patch(data);\n      return clone;\n    }\n\n    return this._add(data);\n  }\n\n  /**\n   * Deletes an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be deleted\n   * @returns {Promise<void>}\n   */\n  async delete(channel) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    await this.client.rest.delete(Routes.stageInstance(channelId));\n  }\n}\n\nmodule.exports = StageInstanceManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}