{"ast":null,"code":"'use strict';\n\n// This file contains the typedefs for camel-cased JSON data\nconst {\n  ComponentBuilder\n} = require('@discordjs/builders');\nconst {\n  ComponentType\n} = require('discord-api-types/v10');\n/**\n * @typedef {Object} BaseComponentData\n * @property {ComponentType} type The type of component\n */\n\n/**\n * @typedef {BaseComponentData} ActionRowData\n * @property {ComponentData[]} components The components in this action row\n */\n\n/**\n * @typedef {BaseComponentData} ButtonComponentData\n * @property {ButtonStyle} style The style of the button\n * @property {?boolean} disabled Whether this button is disabled\n * @property {string} label The label of this button\n * @property {?APIMessageComponentEmoji} emoji The emoji on this button\n * @property {?string} customId The custom id of the button\n * @property {?string} url The URL of the button\n */\n\n/**\n * @typedef {object} SelectMenuComponentOptionData\n * @property {string} label The label of the option\n * @property {string} value The value of the option\n * @property {?string} description The description of the option\n * @property {?APIMessageComponentEmoji} emoji The emoji on the option\n * @property {?boolean} default Whether this option is selected by default\n */\n\n/**\n * @typedef {BaseComponentData} SelectMenuComponentData\n * @property {string} customId The custom id of the select menu\n * @property {?boolean} disabled Whether the select menu is disabled or not\n * @property {?number} maxValues The maximum amount of options that can be selected\n * @property {?number} minValues The minimum amount of options that can be selected\n * @property {?SelectMenuComponentOptionData[]} options The options in this select menu\n * @property {?string} placeholder The placeholder of the select menu\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData} MessageComponentData\n */\n\n/**\n * @typedef {BaseComponentData} TextInputComponentData\n * @property {string} customId The custom id of the text input\n * @property {TextInputStyle} style The style of the text input\n * @property {string} label The text that appears on top of the text input field\n * @property {?number} minLength The minimum number of characters that can be entered in the text input\n * @property {?number} maxLength The maximum number of characters that can be entered in the text input\n * @property {?boolean} required Whether or not the text input is required or not\n * @property {?string} value The pre-filled text in the text input\n * @property {?string} placeholder Placeholder for the text input\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData|TextInputComponentData} ComponentData\n */\n\n/**\n * Any emoji data that can be used within a button\n * @typedef {APIMessageComponentEmoji|string} ComponentEmojiResolvable\n */\n\n/**\n * Transforms API data into a component\n * @param {APIMessageComponent|Component} data The data to create the component from\n * @returns {Component}\n */\nfunction createComponent(data) {\n  if (data instanceof Component) {\n    return data;\n  }\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRow(data);\n    case ComponentType.Button:\n      return new ButtonComponent(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuComponent(data);\n    case ComponentType.TextInput:\n      return new TextInputComponent(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuComponent(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuComponent(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuComponent(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuComponent(data);\n    default:\n      return new Component(data);\n  }\n}\n\n/**\n * Transforms API data into a component builder\n * @param {APIMessageComponent|ComponentBuilder} data The data to create the component from\n * @returns {ComponentBuilder}\n */\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case ComponentType.Button:\n      return new ButtonBuilder(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      return new ComponentBuilder(data);\n  }\n}\nmodule.exports = {\n  createComponent,\n  createComponentBuilder\n};\nconst ActionRow = require('../structures/ActionRow');\nconst ActionRowBuilder = require('../structures/ActionRowBuilder');\nconst ButtonBuilder = require('../structures/ButtonBuilder');\nconst ButtonComponent = require('../structures/ButtonComponent');\nconst ChannelSelectMenuBuilder = require('../structures/ChannelSelectMenuBuilder');\nconst ChannelSelectMenuComponent = require('../structures/ChannelSelectMenuComponent');\nconst Component = require('../structures/Component');\nconst MentionableSelectMenuBuilder = require('../structures/MentionableSelectMenuBuilder');\nconst MentionableSelectMenuComponent = require('../structures/MentionableSelectMenuComponent');\nconst RoleSelectMenuBuilder = require('../structures/RoleSelectMenuBuilder');\nconst RoleSelectMenuComponent = require('../structures/RoleSelectMenuComponent');\nconst StringSelectMenuBuilder = require('../structures/StringSelectMenuBuilder');\nconst StringSelectMenuComponent = require('../structures/StringSelectMenuComponent');\nconst TextInputBuilder = require('../structures/TextInputBuilder');\nconst TextInputComponent = require('../structures/TextInputComponent');\nconst UserSelectMenuBuilder = require('../structures/UserSelectMenuBuilder');\nconst UserSelectMenuComponent = require('../structures/UserSelectMenuComponent');\n\n/**\n * @external JSONEncodable\n * @see {@link https://discord.js.org/#/docs/builders/main/typedef/JSONEncodable}\n */","map":{"version":3,"names":["ComponentBuilder","require","ComponentType","createComponent","data","Component","type","ActionRow","Button","ButtonComponent","StringSelect","StringSelectMenuComponent","TextInput","TextInputComponent","UserSelect","UserSelectMenuComponent","RoleSelect","RoleSelectMenuComponent","MentionableSelect","MentionableSelectMenuComponent","ChannelSelect","ChannelSelectMenuComponent","createComponentBuilder","ActionRowBuilder","ButtonBuilder","StringSelectMenuBuilder","TextInputBuilder","UserSelectMenuBuilder","RoleSelectMenuBuilder","MentionableSelectMenuBuilder","ChannelSelectMenuBuilder","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/Components.js"],"sourcesContent":["'use strict';\n\n// This file contains the typedefs for camel-cased JSON data\nconst { ComponentBuilder } = require('@discordjs/builders');\nconst { ComponentType } = require('discord-api-types/v10');\n/**\n * @typedef {Object} BaseComponentData\n * @property {ComponentType} type The type of component\n */\n\n/**\n * @typedef {BaseComponentData} ActionRowData\n * @property {ComponentData[]} components The components in this action row\n */\n\n/**\n * @typedef {BaseComponentData} ButtonComponentData\n * @property {ButtonStyle} style The style of the button\n * @property {?boolean} disabled Whether this button is disabled\n * @property {string} label The label of this button\n * @property {?APIMessageComponentEmoji} emoji The emoji on this button\n * @property {?string} customId The custom id of the button\n * @property {?string} url The URL of the button\n */\n\n/**\n * @typedef {object} SelectMenuComponentOptionData\n * @property {string} label The label of the option\n * @property {string} value The value of the option\n * @property {?string} description The description of the option\n * @property {?APIMessageComponentEmoji} emoji The emoji on the option\n * @property {?boolean} default Whether this option is selected by default\n */\n\n/**\n * @typedef {BaseComponentData} SelectMenuComponentData\n * @property {string} customId The custom id of the select menu\n * @property {?boolean} disabled Whether the select menu is disabled or not\n * @property {?number} maxValues The maximum amount of options that can be selected\n * @property {?number} minValues The minimum amount of options that can be selected\n * @property {?SelectMenuComponentOptionData[]} options The options in this select menu\n * @property {?string} placeholder The placeholder of the select menu\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData} MessageComponentData\n */\n\n/**\n * @typedef {BaseComponentData} TextInputComponentData\n * @property {string} customId The custom id of the text input\n * @property {TextInputStyle} style The style of the text input\n * @property {string} label The text that appears on top of the text input field\n * @property {?number} minLength The minimum number of characters that can be entered in the text input\n * @property {?number} maxLength The maximum number of characters that can be entered in the text input\n * @property {?boolean} required Whether or not the text input is required or not\n * @property {?string} value The pre-filled text in the text input\n * @property {?string} placeholder Placeholder for the text input\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData|TextInputComponentData} ComponentData\n */\n\n/**\n * Any emoji data that can be used within a button\n * @typedef {APIMessageComponentEmoji|string} ComponentEmojiResolvable\n */\n\n/**\n * Transforms API data into a component\n * @param {APIMessageComponent|Component} data The data to create the component from\n * @returns {Component}\n */\nfunction createComponent(data) {\n  if (data instanceof Component) {\n    return data;\n  }\n\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRow(data);\n    case ComponentType.Button:\n      return new ButtonComponent(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuComponent(data);\n    case ComponentType.TextInput:\n      return new TextInputComponent(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuComponent(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuComponent(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuComponent(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuComponent(data);\n    default:\n      return new Component(data);\n  }\n}\n\n/**\n * Transforms API data into a component builder\n * @param {APIMessageComponent|ComponentBuilder} data The data to create the component from\n * @returns {ComponentBuilder}\n */\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case ComponentType.Button:\n      return new ButtonBuilder(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      return new ComponentBuilder(data);\n  }\n}\n\nmodule.exports = { createComponent, createComponentBuilder };\n\nconst ActionRow = require('../structures/ActionRow');\nconst ActionRowBuilder = require('../structures/ActionRowBuilder');\nconst ButtonBuilder = require('../structures/ButtonBuilder');\nconst ButtonComponent = require('../structures/ButtonComponent');\nconst ChannelSelectMenuBuilder = require('../structures/ChannelSelectMenuBuilder');\nconst ChannelSelectMenuComponent = require('../structures/ChannelSelectMenuComponent');\nconst Component = require('../structures/Component');\nconst MentionableSelectMenuBuilder = require('../structures/MentionableSelectMenuBuilder');\nconst MentionableSelectMenuComponent = require('../structures/MentionableSelectMenuComponent');\nconst RoleSelectMenuBuilder = require('../structures/RoleSelectMenuBuilder');\nconst RoleSelectMenuComponent = require('../structures/RoleSelectMenuComponent');\nconst StringSelectMenuBuilder = require('../structures/StringSelectMenuBuilder');\nconst StringSelectMenuComponent = require('../structures/StringSelectMenuComponent');\nconst TextInputBuilder = require('../structures/TextInputBuilder');\nconst TextInputComponent = require('../structures/TextInputComponent');\nconst UserSelectMenuBuilder = require('../structures/UserSelectMenuBuilder');\nconst UserSelectMenuComponent = require('../structures/UserSelectMenuComponent');\n\n/**\n * @external JSONEncodable\n * @see {@link https://discord.js.org/#/docs/builders/main/typedef/JSONEncodable}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}