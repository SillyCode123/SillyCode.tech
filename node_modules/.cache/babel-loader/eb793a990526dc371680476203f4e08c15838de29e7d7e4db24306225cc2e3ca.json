{"ast":null,"code":"'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildForumThreadManager = require('../managers/GuildForumThreadManager');\nconst {\n  transformAPIGuildForumTag,\n  transformAPIGuildDefaultReaction\n} = require('../util/Channels');\n\n/**\n * @typedef {Object} GuildForumTagEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * @typedef {Object} GuildForumTag\n * @property {Snowflake} id The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} moderated Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} emoji The emoji of this tag\n */\n\n/**\n * @typedef {Object} GuildForumTagData\n * @property {Snowflake} [id] The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} [moderated] Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} [emoji] The emoji of this tag\n */\n\n/**\n * @typedef {Object} DefaultReactionEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * Represents a channel that only contains threads\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass ForumChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the threads belonging to this channel\n     * @type {GuildForumThreadManager}\n     */\n    this.threads = new GuildForumThreadManager(this);\n    this._patch(data);\n  }\n  _patch(data) {\n    super._patch(data);\n    if ('available_tags' in data) {\n      /**\n       * The set of tags that can be used in this channel.\n       * @type {GuildForumTag[]}\n       */\n      this.availableTags = data.available_tags.map(tag => transformAPIGuildForumTag(tag));\n    } else {\n      this.availableTags ??= [];\n    }\n    if ('default_reaction_emoji' in data) {\n      /**\n       * The emoji to show in the add reaction button on a thread in a guild forum channel\n       * @type {?DefaultReactionEmoji}\n       */\n      this.defaultReactionEmoji = data.default_reaction_emoji ? transformAPIGuildDefaultReaction(data.default_reaction_emoji) : null;\n    } else {\n      this.defaultReactionEmoji ??= null;\n    }\n    if ('default_thread_rate_limit_per_user' in data) {\n      /**\n       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.\n       * @type {?number}\n       */\n      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;\n    } else {\n      this.defaultThreadRateLimitPerUser ??= null;\n    }\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel.\n       * @type {?number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    } else {\n      this.rateLimitPerUser ??= null;\n    }\n    if ('default_auto_archive_duration' in data) {\n      /**\n       * The default auto archive duration for newly created threads in this channel.\n       * @type {?ThreadAutoArchiveDuration}\n       */\n      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;\n    } else {\n      this.defaultAutoArchiveDuration ??= null;\n    }\n    if ('nsfw' in data) {\n      /**\n       * If this channel is considered NSFW.\n       * @type {boolean}\n       */\n      this.nsfw = data.nsfw;\n    } else {\n      this.nsfw ??= false;\n    }\n    if ('topic' in data) {\n      /**\n       * The topic of this channel.\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n    if ('default_sort_order' in data) {\n      /**\n       * The default sort order mode used to order posts\n       * @type {?SortOrderType}\n       */\n      this.defaultSortOrder = data.default_sort_order;\n    } else {\n      this.defaultSortOrder ??= null;\n    }\n  }\n\n  /**\n   * Sets the available tags for this forum channel\n   * @param {GuildForumTagData[]} availableTags The tags to set as available in this channel\n   * @param {string} [reason] Reason for changing the available tags\n   * @returns {Promise<ForumChannel>}\n   */\n  setAvailableTags(availableTags, reason) {\n    return this.edit({\n      availableTags,\n      reason\n    });\n  }\n\n  /**\n   * Sets the default reaction emoji for this channel\n   * @param {?DefaultReactionEmoji} defaultReactionEmoji The emoji to set as the default reaction emoji\n   * @param {string} [reason] Reason for changing the default reaction emoji\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultReactionEmoji(defaultReactionEmoji, reason) {\n    return this.edit({\n      defaultReactionEmoji,\n      reason\n    });\n  }\n\n  /**\n   * Sets the default rate limit per user (slowmode) for new threads in this channel\n   * @param {number} defaultThreadRateLimitPerUser The rate limit to set on newly created threads in this channel\n   * @param {string} [reason] Reason for changing the default rate limit\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultThreadRateLimitPerUser(defaultThreadRateLimitPerUser, reason) {\n    return this.edit({\n      defaultThreadRateLimitPerUser,\n      reason\n    });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache) {\n    return this.guild.invites.fetch({\n      channelId: this.id,\n      cache\n    });\n  }\n\n  /**\n   * Sets the default auto archive duration for all newly created threads in this channel.\n   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration\n   * @param {string} [reason] Reason for changing the channel's default auto archive duration\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {\n    return this.edit({\n      defaultAutoArchiveDuration,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<ForumChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({\n      topic,\n      reason\n    });\n  }\n\n  /**\n   * Sets the default sort order mode used to order posts\n   * @param {?SortOrderType} defaultSortOrder The default sort order mode to set on this channel\n   * @param {string} [reason] Reason for changing the default sort order\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultSortOrder(defaultSortOrder, reason) {\n    return this.edit({\n      defaultSortOrder,\n      reason\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  createWebhook() {}\n  fetchWebhooks() {}\n  setNSFW() {}\n  setRateLimitPerUser() {}\n}\nTextBasedChannel.applyToClass(ForumChannel, true, ['send', 'lastMessage', 'lastPinAt', 'bulkDelete', 'sendTyping', 'createMessageCollector', 'awaitMessages', 'createMessageComponentCollector', 'awaitMessageComponent']);\nmodule.exports = ForumChannel;","map":{"version":3,"names":["GuildChannel","require","TextBasedChannel","GuildForumThreadManager","transformAPIGuildForumTag","transformAPIGuildDefaultReaction","ForumChannel","constructor","guild","data","client","threads","_patch","availableTags","available_tags","map","tag","defaultReactionEmoji","default_reaction_emoji","defaultThreadRateLimitPerUser","default_thread_rate_limit_per_user","rateLimitPerUser","rate_limit_per_user","defaultAutoArchiveDuration","default_auto_archive_duration","nsfw","topic","defaultSortOrder","default_sort_order","setAvailableTags","reason","edit","setDefaultReactionEmoji","setDefaultThreadRateLimitPerUser","createInvite","options","invites","create","id","fetchInvites","cache","fetch","channelId","setDefaultAutoArchiveDuration","setTopic","setDefaultSortOrder","createWebhook","fetchWebhooks","setNSFW","setRateLimitPerUser","applyToClass","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ForumChannel.js"],"sourcesContent":["'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildForumThreadManager = require('../managers/GuildForumThreadManager');\nconst { transformAPIGuildForumTag, transformAPIGuildDefaultReaction } = require('../util/Channels');\n\n/**\n * @typedef {Object} GuildForumTagEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * @typedef {Object} GuildForumTag\n * @property {Snowflake} id The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} moderated Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} emoji The emoji of this tag\n */\n\n/**\n * @typedef {Object} GuildForumTagData\n * @property {Snowflake} [id] The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} [moderated] Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} [emoji] The emoji of this tag\n */\n\n/**\n * @typedef {Object} DefaultReactionEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * Represents a channel that only contains threads\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass ForumChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the threads belonging to this channel\n     * @type {GuildForumThreadManager}\n     */\n    this.threads = new GuildForumThreadManager(this);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n    if ('available_tags' in data) {\n      /**\n       * The set of tags that can be used in this channel.\n       * @type {GuildForumTag[]}\n       */\n      this.availableTags = data.available_tags.map(tag => transformAPIGuildForumTag(tag));\n    } else {\n      this.availableTags ??= [];\n    }\n\n    if ('default_reaction_emoji' in data) {\n      /**\n       * The emoji to show in the add reaction button on a thread in a guild forum channel\n       * @type {?DefaultReactionEmoji}\n       */\n      this.defaultReactionEmoji = data.default_reaction_emoji\n        ? transformAPIGuildDefaultReaction(data.default_reaction_emoji)\n        : null;\n    } else {\n      this.defaultReactionEmoji ??= null;\n    }\n\n    if ('default_thread_rate_limit_per_user' in data) {\n      /**\n       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.\n       * @type {?number}\n       */\n      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;\n    } else {\n      this.defaultThreadRateLimitPerUser ??= null;\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel.\n       * @type {?number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    } else {\n      this.rateLimitPerUser ??= null;\n    }\n\n    if ('default_auto_archive_duration' in data) {\n      /**\n       * The default auto archive duration for newly created threads in this channel.\n       * @type {?ThreadAutoArchiveDuration}\n       */\n      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;\n    } else {\n      this.defaultAutoArchiveDuration ??= null;\n    }\n\n    if ('nsfw' in data) {\n      /**\n       * If this channel is considered NSFW.\n       * @type {boolean}\n       */\n      this.nsfw = data.nsfw;\n    } else {\n      this.nsfw ??= false;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of this channel.\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('default_sort_order' in data) {\n      /**\n       * The default sort order mode used to order posts\n       * @type {?SortOrderType}\n       */\n      this.defaultSortOrder = data.default_sort_order;\n    } else {\n      this.defaultSortOrder ??= null;\n    }\n  }\n\n  /**\n   * Sets the available tags for this forum channel\n   * @param {GuildForumTagData[]} availableTags The tags to set as available in this channel\n   * @param {string} [reason] Reason for changing the available tags\n   * @returns {Promise<ForumChannel>}\n   */\n  setAvailableTags(availableTags, reason) {\n    return this.edit({ availableTags, reason });\n  }\n\n  /**\n   * Sets the default reaction emoji for this channel\n   * @param {?DefaultReactionEmoji} defaultReactionEmoji The emoji to set as the default reaction emoji\n   * @param {string} [reason] Reason for changing the default reaction emoji\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultReactionEmoji(defaultReactionEmoji, reason) {\n    return this.edit({ defaultReactionEmoji, reason });\n  }\n\n  /**\n   * Sets the default rate limit per user (slowmode) for new threads in this channel\n   * @param {number} defaultThreadRateLimitPerUser The rate limit to set on newly created threads in this channel\n   * @param {string} [reason] Reason for changing the default rate limit\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultThreadRateLimitPerUser(defaultThreadRateLimitPerUser, reason) {\n    return this.edit({ defaultThreadRateLimitPerUser, reason });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n\n  /**\n   * Sets the default auto archive duration for all newly created threads in this channel.\n   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration\n   * @param {string} [reason] Reason for changing the channel's default auto archive duration\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {\n    return this.edit({ defaultAutoArchiveDuration, reason });\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<ForumChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic, reason });\n  }\n\n  /**\n   * Sets the default sort order mode used to order posts\n   * @param {?SortOrderType} defaultSortOrder The default sort order mode to set on this channel\n   * @param {string} [reason] Reason for changing the default sort order\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultSortOrder(defaultSortOrder, reason) {\n    return this.edit({ defaultSortOrder, reason });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  createWebhook() {}\n  fetchWebhooks() {}\n  setNSFW() {}\n  setRateLimitPerUser() {}\n}\n\nTextBasedChannel.applyToClass(ForumChannel, true, [\n  'send',\n  'lastMessage',\n  'lastPinAt',\n  'bulkDelete',\n  'sendTyping',\n  'createMessageCollector',\n  'awaitMessages',\n  'createMessageComponentCollector',\n  'awaitMessageComponent',\n]);\n\nmodule.exports = ForumChannel;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}