{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst {\n  Presence\n} = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {CachedManager}\n */\nclass PresenceManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Presence, iterable);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.user.id\n    });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveId(presence);\n    return super.resolve(UserResolvable);\n  }\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(presence) {\n    const presenceResolvable = super.resolveId(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveId(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\nmodule.exports = PresenceManager;","map":{"version":3,"names":["CachedManager","require","Presence","PresenceManager","constructor","client","iterable","_add","data","cache","id","user","resolve","presence","presenceResolvable","UserResolvable","users","resolveId","userResolvable","has","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/PresenceManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst { Presence } = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {CachedManager}\n */\nclass PresenceManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Presence, iterable);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveId(presence);\n    return super.resolve(UserResolvable);\n  }\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(presence) {\n    const presenceResolvable = super.resolveId(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveId(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAM;EAAEC;AAAS,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAEtD;AACA;AACA;AACA;AACA,MAAME,eAAe,SAASH,aAAa,CAAC;EAC1CI,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC5B,KAAK,CAACD,MAAM,EAAEH,QAAQ,EAAEI,QAAQ,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;;EAEEC,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEC,EAAE,EAAEF,IAAI,CAACG,IAAI,CAACD;IAAG,CAAC,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACEE,OAAO,CAACC,QAAQ,EAAE;IAChB,MAAMC,kBAAkB,GAAG,KAAK,CAACF,OAAO,CAACC,QAAQ,CAAC;IAClD,IAAIC,kBAAkB,EAAE,OAAOA,kBAAkB;IACjD,MAAMC,cAAc,GAAG,IAAI,CAACV,MAAM,CAACW,KAAK,CAACC,SAAS,CAACJ,QAAQ,CAAC;IAC5D,OAAO,KAAK,CAACD,OAAO,CAACG,cAAc,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACEE,SAAS,CAACJ,QAAQ,EAAE;IAClB,MAAMC,kBAAkB,GAAG,KAAK,CAACG,SAAS,CAACJ,QAAQ,CAAC;IACpD,IAAIC,kBAAkB,EAAE,OAAOA,kBAAkB;IACjD,MAAMI,cAAc,GAAG,IAAI,CAACb,MAAM,CAACW,KAAK,CAACC,SAAS,CAACJ,QAAQ,CAAC;IAC5D,OAAO,IAAI,CAACJ,KAAK,CAACU,GAAG,CAACD,cAAc,CAAC,GAAGA,cAAc,GAAG,IAAI;EAC/D;AACF;AAEAE,MAAM,CAACC,OAAO,GAAGlB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}