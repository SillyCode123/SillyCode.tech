{"ast":null,"code":"'use strict';\n\nconst {\n  lazy\n} = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst ModalSubmitFields = require('./ModalSubmitFields');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * @typedef {Object} ModalData\n * @property {string} value The value of the field\n * @property {ComponentType} type The component type of the field\n * @property {string} customId The custom id of the field\n */\n\n/**\n * @typedef {Object} ActionRowModalData\n * @property {ModalData[]} components The components of this action row\n * @property {ComponentType} type The component type of the action row\n */\n\n/**\n * Represents a modal interaction\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass ModalSubmitInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The custom id of the modal.\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n    if ('message' in data) {\n      /**\n       * The message associated with this interaction\n       * @type {?Message}\n       */\n      this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(this.client, data.message);\n    } else {\n      this.message = null;\n    }\n\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]}\n     */\n    this.components = data.data.components?.map(c => ModalSubmitInteraction.transformComponent(c));\n\n    /**\n     * The fields within the modal\n     * @type {ModalSubmitFields}\n     */\n    this.fields = new ModalSubmitFields(this.components);\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Transforms component data to discord.js-compatible data\n   * @param {*} rawComponent The data to transform\n   * @returns {ModalData[]}\n   */\n  static transformComponent(rawComponent) {\n    return {\n      value: rawComponent.value,\n      type: rawComponent.type,\n      customId: rawComponent.custom_id,\n      components: rawComponent.components?.map(c => this.transformComponent(c))\n    };\n  }\n\n  /**\n   * Whether this is from a {@link MessageComponentInteraction}.\n   * @returns {boolean}\n   */\n  isFromMessage() {\n    return Boolean(this.message);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n}\nInteractionResponses.applyToClass(ModalSubmitInteraction, 'showModal');\nmodule.exports = ModalSubmitInteraction;","map":{"version":3,"names":["lazy","require","BaseInteraction","InteractionWebhook","ModalSubmitFields","InteractionResponses","getMessage","Message","ModalSubmitInteraction","constructor","client","data","customId","custom_id","message","channel","messages","_add","components","map","c","transformComponent","fields","deferred","replied","ephemeral","webhook","applicationId","token","rawComponent","value","type","isFromMessage","Boolean","deferReply","reply","fetchReply","editReply","deleteReply","followUp","deferUpdate","update","applyToClass","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ModalSubmitInteraction.js"],"sourcesContent":["'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst ModalSubmitFields = require('./ModalSubmitFields');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * @typedef {Object} ModalData\n * @property {string} value The value of the field\n * @property {ComponentType} type The component type of the field\n * @property {string} customId The custom id of the field\n */\n\n/**\n * @typedef {Object} ActionRowModalData\n * @property {ModalData[]} components The components of this action row\n * @property {ComponentType} type The component type of the action row\n */\n\n/**\n * Represents a modal interaction\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass ModalSubmitInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The custom id of the modal.\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    if ('message' in data) {\n      /**\n       * The message associated with this interaction\n       * @type {?Message}\n       */\n      this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(this.client, data.message);\n    } else {\n      this.message = null;\n    }\n\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]}\n     */\n    this.components = data.data.components?.map(c => ModalSubmitInteraction.transformComponent(c));\n\n    /**\n     * The fields within the modal\n     * @type {ModalSubmitFields}\n     */\n    this.fields = new ModalSubmitFields(this.components);\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Transforms component data to discord.js-compatible data\n   * @param {*} rawComponent The data to transform\n   * @returns {ModalData[]}\n   */\n  static transformComponent(rawComponent) {\n    return {\n      value: rawComponent.value,\n      type: rawComponent.type,\n      customId: rawComponent.custom_id,\n      components: rawComponent.components?.map(c => this.transformComponent(c)),\n    };\n  }\n\n  /**\n   * Whether this is from a {@link MessageComponentInteraction}.\n   * @returns {boolean}\n   */\n  isFromMessage() {\n    return Boolean(this.message);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n}\n\nInteractionResponses.applyToClass(ModalSubmitInteraction, 'showModal');\n\nmodule.exports = ModalSubmitInteraction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}