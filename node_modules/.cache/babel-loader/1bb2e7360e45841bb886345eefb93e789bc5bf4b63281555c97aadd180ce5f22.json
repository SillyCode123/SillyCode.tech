{"ast":null,"code":"'use strict';\n\nconst {\n  lazy\n} = require('@discordjs/util');\nconst {\n  ApplicationCommandOptionType\n} = require('discord-api-types/v10');\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a context menu interaction.\n * @extends {CommandInteraction}\n */\nclass ContextMenuCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The target of the interaction, parsed into options\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(this.client, this.resolveContextMenuOptions(data.data), this.transformResolved(data.data.resolved));\n\n    /**\n     * The id of the target of this interaction\n     * @type {Snowflake}\n     */\n    this.targetId = data.data.target_id;\n  }\n\n  /**\n   * Resolves and transforms options received from the API for a context menu interaction.\n   * @param {APIApplicationCommandInteractionData} data The interaction data\n   * @returns {CommandInteractionOption[]}\n   * @private\n   */\n  resolveContextMenuOptions(_ref) {\n    let {\n      target_id,\n      resolved\n    } = _ref;\n    const result = [];\n    if (resolved.users?.[target_id]) {\n      result.push(this.transformOption({\n        name: 'user',\n        type: ApplicationCommandOptionType.User,\n        value: target_id\n      }, resolved));\n    }\n    if (resolved.messages?.[target_id]) {\n      result.push({\n        name: 'message',\n        type: '_MESSAGE',\n        value: target_id,\n        message: this.channel?.messages._add(resolved.messages[target_id]) ?? new (getMessage())(this.client, resolved.messages[target_id])\n      });\n    }\n    return result;\n  }\n}\nmodule.exports = ContextMenuCommandInteraction;","map":{"version":3,"names":["lazy","require","ApplicationCommandOptionType","CommandInteraction","CommandInteractionOptionResolver","getMessage","Message","ContextMenuCommandInteraction","constructor","client","data","options","resolveContextMenuOptions","transformResolved","resolved","targetId","target_id","result","users","push","transformOption","name","type","User","value","messages","message","channel","_add","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ContextMenuCommandInteraction.js"],"sourcesContent":["'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst { ApplicationCommandOptionType } = require('discord-api-types/v10');\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a context menu interaction.\n * @extends {CommandInteraction}\n */\nclass ContextMenuCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The target of the interaction, parsed into options\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      this.resolveContextMenuOptions(data.data),\n      this.transformResolved(data.data.resolved),\n    );\n\n    /**\n     * The id of the target of this interaction\n     * @type {Snowflake}\n     */\n    this.targetId = data.data.target_id;\n  }\n\n  /**\n   * Resolves and transforms options received from the API for a context menu interaction.\n   * @param {APIApplicationCommandInteractionData} data The interaction data\n   * @returns {CommandInteractionOption[]}\n   * @private\n   */\n  resolveContextMenuOptions({ target_id, resolved }) {\n    const result = [];\n\n    if (resolved.users?.[target_id]) {\n      result.push(\n        this.transformOption({ name: 'user', type: ApplicationCommandOptionType.User, value: target_id }, resolved),\n      );\n    }\n\n    if (resolved.messages?.[target_id]) {\n      result.push({\n        name: 'message',\n        type: '_MESSAGE',\n        value: target_id,\n        message:\n          this.channel?.messages._add(resolved.messages[target_id]) ??\n          new (getMessage())(this.client, resolved.messages[target_id]),\n      });\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = ContextMenuCommandInteraction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAM;EAAEC;AAA6B,CAAC,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACzE,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMG,gCAAgC,GAAGH,OAAO,CAAC,oCAAoC,CAAC;AAEtF,MAAMI,UAAU,GAAGL,IAAI,CAAC,MAAMC,OAAO,CAAC,WAAW,CAAC,CAACK,OAAO,CAAC;;AAE3D;AACA;AACA;AACA;AACA,MAAMC,6BAA6B,SAASJ,kBAAkB,CAAC;EAC7DK,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;IACnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAIP,gCAAgC,CACjD,IAAI,CAACK,MAAM,EACX,IAAI,CAACG,yBAAyB,CAACF,IAAI,CAACA,IAAI,CAAC,EACzC,IAAI,CAACG,iBAAiB,CAACH,IAAI,CAACA,IAAI,CAACI,QAAQ,CAAC,CAC3C;;IAED;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGL,IAAI,CAACA,IAAI,CAACM,SAAS;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEJ,yBAAyB,OAA0B;IAAA,IAAzB;MAAEI,SAAS;MAAEF;IAAS,CAAC;IAC/C,MAAMG,MAAM,GAAG,EAAE;IAEjB,IAAIH,QAAQ,CAACI,KAAK,GAAGF,SAAS,CAAC,EAAE;MAC/BC,MAAM,CAACE,IAAI,CACT,IAAI,CAACC,eAAe,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,IAAI,EAAEpB,4BAA4B,CAACqB,IAAI;QAAEC,KAAK,EAAER;MAAU,CAAC,EAAEF,QAAQ,CAAC,CAC5G;IACH;IAEA,IAAIA,QAAQ,CAACW,QAAQ,GAAGT,SAAS,CAAC,EAAE;MAClCC,MAAM,CAACE,IAAI,CAAC;QACVE,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,UAAU;QAChBE,KAAK,EAAER,SAAS;QAChBU,OAAO,EACL,IAAI,CAACC,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACd,QAAQ,CAACW,QAAQ,CAACT,SAAS,CAAC,CAAC,IACzD,KAAKX,UAAU,EAAE,EAAE,IAAI,CAACI,MAAM,EAAEK,QAAQ,CAACW,QAAQ,CAACT,SAAS,CAAC;MAChE,CAAC,CAAC;IACJ;IAEA,OAAOC,MAAM;EACf;AACF;AAEAY,MAAM,CAACC,OAAO,GAAGvB,6BAA6B"},"metadata":{},"sourceType":"script","externalDependencies":[]}