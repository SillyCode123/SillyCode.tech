{"ast":null,"code":"'use strict';\n\nconst {\n  setTimeout,\n  clearTimeout\n} = require('node:timers');\nconst {\n  RouteBases,\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst DataResolver = require('../util/DataResolver');\nconst Events = require('../util/Events');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * A regular expression that matches guild template links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof GuildTemplate\n   */\n  static GuildTemplatesPattern = /discord(?:app)?\\.(?:com\\/template|new)\\/(?<code>[\\w-]{2,255})/i;\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('code' in data) {\n      /**\n       * The unique code of this template\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n    if ('name' in data) {\n      /**\n       * The name of this template\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n    if ('description' in data) {\n      /**\n       * The description of this template\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n    if ('usage_count' in data) {\n      /**\n       * The amount of times this template has been used\n       * @type {number}\n       */\n      this.usageCount = data.usage_count;\n    }\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this template\n       * @type {Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    }\n    if ('creator' in data) {\n      /**\n       * The user that created this template\n       * @type {User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    }\n    if ('created_at' in data) {\n      /**\n       * The timestamp of when this template was created at\n       * @type {number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    }\n    if ('updated_at' in data) {\n      /**\n       * The timestamp of when this template was last synced to the guild\n       * @type {number}\n       */\n      this.updatedTimestamp = Date.parse(data.updated_at);\n    }\n    if ('source_guild_id' in data) {\n      /**\n       * The id of the guild that this template belongs to\n       * @type {Snowflake}\n       */\n      this.guildId = data.source_guild_id;\n    }\n    if ('serialized_source_guild' in data) {\n      /**\n       * The data of the guild that this template would create\n       * @type {APIGuild}\n       */\n      this.serializedGuild = data.serialized_source_guild;\n    }\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n    return this;\n  }\n\n  /**\n   * Creates a guild based on this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const {\n      client\n    } = this;\n    const data = await client.rest.post(Routes.template(this.code), {\n      body: {\n        name,\n        icon: await DataResolver.resolveImage(icon)\n      }\n    });\n    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);\n    return new Promise(resolve => {\n      const resolveGuild = guild => {\n        client.off(Events.GuildCreate, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n      client.incrementMaxListeners();\n      client.on(Events.GuildCreate, handleGuild);\n      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();\n    });\n  }\n\n  /**\n   * Options used to edit a guild template.\n   * @typedef {Object} EditGuildTemplateOptions\n   * @property {string} [name] The name of this template\n   * @property {string} [description] The description of this template\n   */\n\n  /**\n   * Updates the metadata of this template.\n   * @param {EditGuildTemplateOptions} [options] Options for editing the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async edit() {\n    let {\n      name,\n      description\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const data = await this.client.rest.patch(Routes.guildTemplate(this.guildId, this.code), {\n      body: {\n        name,\n        description\n      }\n    });\n    return this._patch(data);\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guildTemplate(this.guildId, this.code));\n    return this;\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async sync() {\n    const data = await this.client.rest.put(Routes.guildTemplate(this.guildId, this.code));\n    return this._patch(data);\n  }\n\n  /**\n   * The time when this template was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time when this template was last synced to the guild\n   * @type {Date}\n   * @readonly\n   */\n  get updatedAt() {\n    return new Date(this.updatedTimestamp);\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the template's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\nmodule.exports = GuildTemplate;","map":{"version":3,"names":["setTimeout","clearTimeout","require","RouteBases","Routes","Base","DataResolver","Events","GuildTemplate","GuildTemplatesPattern","constructor","client","data","_patch","code","name","description","usageCount","usage_count","creatorId","creator_id","creator","users","_add","createdTimestamp","Date","parse","created_at","updatedTimestamp","updated_at","guildId","source_guild_id","serializedGuild","serialized_source_guild","unSynced","Boolean","is_dirty","createGuild","icon","rest","post","template","body","resolveImage","guilds","cache","has","id","get","Promise","resolve","resolveGuild","guild","off","GuildCreate","handleGuild","decrementMaxListeners","timeout","incrementMaxListeners","on","unref","edit","patch","guildTemplate","delete","sync","put","createdAt","updatedAt","url","toString","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildTemplate.js"],"sourcesContent":["'use strict';\n\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { RouteBases, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst DataResolver = require('../util/DataResolver');\nconst Events = require('../util/Events');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * A regular expression that matches guild template links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof GuildTemplate\n   */\n  static GuildTemplatesPattern = /discord(?:app)?\\.(?:com\\/template|new)\\/(?<code>[\\w-]{2,255})/i;\n\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('code' in data) {\n      /**\n       * The unique code of this template\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('name' in data) {\n      /**\n       * The name of this template\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of this template\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n\n    if ('usage_count' in data) {\n      /**\n       * The amount of times this template has been used\n       * @type {number}\n       */\n      this.usageCount = data.usage_count;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this template\n       * @type {Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this template\n       * @type {User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp of when this template was created at\n       * @type {number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    }\n\n    if ('updated_at' in data) {\n      /**\n       * The timestamp of when this template was last synced to the guild\n       * @type {number}\n       */\n      this.updatedTimestamp = Date.parse(data.updated_at);\n    }\n\n    if ('source_guild_id' in data) {\n      /**\n       * The id of the guild that this template belongs to\n       * @type {Snowflake}\n       */\n      this.guildId = data.source_guild_id;\n    }\n\n    if ('serialized_source_guild' in data) {\n      /**\n       * The data of the guild that this template would create\n       * @type {APIGuild}\n       */\n      this.serializedGuild = data.serialized_source_guild;\n    }\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n\n    return this;\n  }\n\n  /**\n   * Creates a guild based on this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const { client } = this;\n    const data = await client.rest.post(Routes.template(this.code), {\n      body: {\n        name,\n        icon: await DataResolver.resolveImage(icon),\n      },\n    });\n\n    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);\n\n    return new Promise(resolve => {\n      const resolveGuild = guild => {\n        client.off(Events.GuildCreate, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GuildCreate, handleGuild);\n\n      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();\n    });\n  }\n\n  /**\n   * Options used to edit a guild template.\n   * @typedef {Object} EditGuildTemplateOptions\n   * @property {string} [name] The name of this template\n   * @property {string} [description] The description of this template\n   */\n\n  /**\n   * Updates the metadata of this template.\n   * @param {EditGuildTemplateOptions} [options] Options for editing the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async edit({ name, description } = {}) {\n    const data = await this.client.rest.patch(Routes.guildTemplate(this.guildId, this.code), {\n      body: { name, description },\n    });\n    return this._patch(data);\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guildTemplate(this.guildId, this.code));\n    return this;\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async sync() {\n    const data = await this.client.rest.put(Routes.guildTemplate(this.guildId, this.code));\n    return this._patch(data);\n  }\n\n  /**\n   * The time when this template was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time when this template was last synced to the guild\n   * @type {Date}\n   * @readonly\n   */\n  get updatedAt() {\n    return new Date(this.updatedTimestamp);\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the template's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\n\nmodule.exports = GuildTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}