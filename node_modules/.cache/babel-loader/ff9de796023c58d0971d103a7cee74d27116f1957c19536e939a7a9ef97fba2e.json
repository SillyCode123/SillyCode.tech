{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n      if (channel.isThread()) {\n        channel.messageCount++;\n        channel.totalMessageSent++;\n      }\n      const existing = channel.messages.cache.get(data.id);\n      if (existing) return {\n        message: existing\n      };\n      const message = channel.messages._add(data);\n      channel.lastMessageId = data.id;\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#messageCreate\n       * @param {Message} message The created message\n       */\n      client.emit(Events.MessageCreate, message);\n      return {\n        message\n      };\n    }\n    return {};\n  }\n}\nmodule.exports = MessageCreateAction;","map":{"version":3,"names":["Action","require","Events","MessageCreateAction","handle","data","client","channel","getChannel","isTextBased","isThread","messageCount","totalMessageSent","existing","messages","cache","get","id","message","_add","lastMessageId","emit","MessageCreate","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/MessageCreate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n\n      if (channel.isThread()) {\n        channel.messageCount++;\n        channel.totalMessageSent++;\n      }\n\n      const existing = channel.messages.cache.get(data.id);\n      if (existing) return { message: existing };\n      const message = channel.messages._add(data);\n      channel.lastMessageId = data.id;\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#messageCreate\n       * @param {Message} message The created message\n       */\n      client.emit(Events.MessageCreate, message);\n\n      return { message };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageCreateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAME,mBAAmB,SAASH,MAAM,CAAC;EACvCI,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACH,IAAI,CAAC;IACrC,IAAIE,OAAO,EAAE;MACX,IAAI,CAACA,OAAO,CAACE,WAAW,EAAE,EAAE,OAAO,CAAC,CAAC;MAErC,IAAIF,OAAO,CAACG,QAAQ,EAAE,EAAE;QACtBH,OAAO,CAACI,YAAY,EAAE;QACtBJ,OAAO,CAACK,gBAAgB,EAAE;MAC5B;MAEA,MAAMC,QAAQ,GAAGN,OAAO,CAACO,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACX,IAAI,CAACY,EAAE,CAAC;MACpD,IAAIJ,QAAQ,EAAE,OAAO;QAAEK,OAAO,EAAEL;MAAS,CAAC;MAC1C,MAAMK,OAAO,GAAGX,OAAO,CAACO,QAAQ,CAACK,IAAI,CAACd,IAAI,CAAC;MAC3CE,OAAO,CAACa,aAAa,GAAGf,IAAI,CAACY,EAAE;;MAE/B;AACN;AACA;AACA;AACA;MACMX,MAAM,CAACe,IAAI,CAACnB,MAAM,CAACoB,aAAa,EAAEJ,OAAO,CAAC;MAE1C,OAAO;QAAEA;MAAQ,CAAC;IACpB;IAEA,OAAO,CAAC,CAAC;EACX;AACF;AAEAK,MAAM,CAACC,OAAO,GAAGrB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}