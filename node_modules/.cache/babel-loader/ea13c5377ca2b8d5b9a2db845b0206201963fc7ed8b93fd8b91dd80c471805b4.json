{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(message.client, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users that have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.message.id)) this.stop('messageDelete');\n    };\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MessageReactionAdd, this.handleCollect);\n    this.client.on(Events.MessageReactionRemove, this.handleDispose);\n    this.client.on(Events.MessageReactionRemoveAll, this.empty);\n    this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n    this.once('end', () => {\n      this.client.removeListener(Events.MessageReactionAdd, this.handleCollect);\n      this.client.removeListener(Events.MessageReactionRemove, this.handleDispose);\n      this.client.removeListener(Events.MessageReactionRemoveAll, this.empty);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n    this.on('collect', (reaction, user) => {\n      /**\n       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\n       * added to the message, as opposed to {@link Collector#collect} which will\n       * be emitted even when a reaction has already been added to the message.\n       * @event ReactionCollector#create\n       * @param {MessageReaction} reaction The reaction that was added\n       * @param {User} user The user that added the reaction\n       */\n      if (reaction.count === 1) {\n        this.emit('create', reaction, user);\n      }\n      this.total++;\n      this.users.set(user.id, user);\n    });\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @param {User} user The user that added the reaction\n   * @returns {?(Snowflake|string)}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?(Snowflake|string)}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.message.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.message.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id ?? reaction.emoji.name;\n  }\n}\nmodule.exports = ReactionCollector;","map":{"version":3,"names":["Collection","require","Collector","Events","ReactionCollector","constructor","message","options","client","users","total","empty","bind","_handleChannelDeletion","_handleThreadDeletion","_handleGuildDeletion","_handleMessageDeletion","bulkDeleteListener","messages","has","id","stop","incrementMaxListeners","on","MessageReactionAdd","handleCollect","MessageReactionRemove","handleDispose","MessageReactionRemoveAll","MessageDelete","MessageBulkDelete","ChannelDelete","ThreadDelete","GuildDelete","once","removeListener","decrementMaxListeners","reaction","user","count","emit","set","collected","some","r","cache","delete","collect","key","dispose","clear","checkEnd","endReason","max","maxEmojis","size","maxUsers","channel","channelId","threads","thread","guild","emoji","name","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ReactionCollector.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, options = {}) {\n    super(message.client, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users that have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.message.id)) this.stop('messageDelete');\n    };\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MessageReactionAdd, this.handleCollect);\n    this.client.on(Events.MessageReactionRemove, this.handleDispose);\n    this.client.on(Events.MessageReactionRemoveAll, this.empty);\n    this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MessageReactionAdd, this.handleCollect);\n      this.client.removeListener(Events.MessageReactionRemove, this.handleDispose);\n      this.client.removeListener(Events.MessageReactionRemoveAll, this.empty);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', (reaction, user) => {\n      /**\n       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\n       * added to the message, as opposed to {@link Collector#collect} which will\n       * be emitted even when a reaction has already been added to the message.\n       * @event ReactionCollector#create\n       * @param {MessageReaction} reaction The reaction that was added\n       * @param {User} user The user that added the reaction\n       */\n      if (reaction.count === 1) {\n        this.emit('create', reaction, user);\n      }\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @param {User} user The user that added the reaction\n   * @returns {?(Snowflake|string)}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?(Snowflake|string)}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.message.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.message.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id ?? reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}