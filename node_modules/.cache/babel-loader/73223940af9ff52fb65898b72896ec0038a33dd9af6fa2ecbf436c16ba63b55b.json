{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  Routes,\n  StickerFormatType\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\nclass Sticker extends Base {\n  constructor(client, sticker) {\n    super(client);\n    this._patch(sticker);\n  }\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n    if ('description' in sticker) {\n      /**\n       * The description of the sticker\n       * @type {?string}\n       */\n      this.description = sticker.description;\n    } else {\n      this.description ??= null;\n    }\n    if ('type' in sticker) {\n      /**\n       * The type of the sticker\n       * @type {?StickerType}\n       */\n      this.type = sticker.type;\n    } else {\n      this.type ??= null;\n    }\n    if ('format_type' in sticker) {\n      /**\n       * The format of the sticker\n       * @type {StickerFormatType}\n       */\n      this.format = sticker.format_type;\n    }\n    if ('name' in sticker) {\n      /**\n       * The name of the sticker\n       * @type {string}\n       */\n      this.name = sticker.name;\n    }\n    if ('pack_id' in sticker) {\n      /**\n       * The id of the pack the sticker is from, for standard stickers\n       * @type {?Snowflake}\n       */\n      this.packId = sticker.pack_id;\n    } else {\n      this.packId ??= null;\n    }\n    if ('tags' in sticker) {\n      /**\n       * Autocomplete/suggestions for the sticker\n       * @type {?string}\n       */\n      this.tags = sticker.tags;\n    } else {\n      this.tags ??= null;\n    }\n    if ('available' in sticker) {\n      /**\n       * Whether or not the guild sticker is available\n       * @type {?boolean}\n       */\n      this.available = sticker.available;\n    } else {\n      this.available ??= null;\n    }\n    if ('guild_id' in sticker) {\n      /**\n       * The id of the guild that owns this sticker\n       * @type {?Snowflake}\n       */\n      this.guildId = sticker.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n    if ('user' in sticker) {\n      /**\n       * The user that uploaded the guild sticker\n       * @type {?User}\n       */\n      this.user = this.client.users._add(sticker.user);\n    } else {\n      this.user ??= null;\n    }\n    if ('sort_value' in sticker) {\n      /**\n       * The standard sticker's sort order within its pack\n       * @type {?number}\n       */\n      this.sortValue = sticker.sort_value;\n    } else {\n      this.sortValue ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.type;\n  }\n\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is {@link StickerFormatType.Lottie}, it returns\n   * the URL of the Lottie JSON file.</info>\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.client.rest.cdn.sticker(this.id, this.format === StickerFormatType.Lottie ? 'json' : 'png');\n  }\n\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.sticker(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new DiscordjsError(ErrorCodes.NotGuildSticker);\n    return this.guild.stickers.fetchUser(this);\n  }\n\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   * @property {string} [reason] Reason for editing this sticker\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} data The new data for the sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.stickers.edit(this, data);\n  }\n\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Sticker) {\n      return other.id === this.id && other.description === this.description && other.type === this.type && other.format === this.format && other.name === this.name && other.packId === this.packId && other.tags === this.tags && other.available === this.available && other.guildId === this.guildId && other.sortValue === this.sortValue;\n    } else {\n      return other.id === this.id && other.description === this.description && other.name === this.name && other.tags === this.tags;\n    }\n  }\n}\nexports.Sticker = Sticker;\n\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */","map":{"version":3,"names":["DiscordSnowflake","require","Routes","StickerFormatType","Base","DiscordjsError","ErrorCodes","Sticker","constructor","client","sticker","_patch","id","description","type","format","format_type","name","packId","pack_id","tags","available","guildId","guild_id","user","users","_add","sortValue","sort_value","createdTimestamp","timestampFrom","createdAt","Date","partial","guild","guilds","resolve","url","rest","cdn","Lottie","fetch","data","get","fetchPack","fetchPremiumStickerPacks","fetchUser","NotGuildSticker","stickers","edit","delete","reason","equals","other","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Sticker.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes, StickerFormatType } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\nclass Sticker extends Base {\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n\n    if ('description' in sticker) {\n      /**\n       * The description of the sticker\n       * @type {?string}\n       */\n      this.description = sticker.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('type' in sticker) {\n      /**\n       * The type of the sticker\n       * @type {?StickerType}\n       */\n      this.type = sticker.type;\n    } else {\n      this.type ??= null;\n    }\n\n    if ('format_type' in sticker) {\n      /**\n       * The format of the sticker\n       * @type {StickerFormatType}\n       */\n      this.format = sticker.format_type;\n    }\n\n    if ('name' in sticker) {\n      /**\n       * The name of the sticker\n       * @type {string}\n       */\n      this.name = sticker.name;\n    }\n\n    if ('pack_id' in sticker) {\n      /**\n       * The id of the pack the sticker is from, for standard stickers\n       * @type {?Snowflake}\n       */\n      this.packId = sticker.pack_id;\n    } else {\n      this.packId ??= null;\n    }\n\n    if ('tags' in sticker) {\n      /**\n       * Autocomplete/suggestions for the sticker\n       * @type {?string}\n       */\n      this.tags = sticker.tags;\n    } else {\n      this.tags ??= null;\n    }\n\n    if ('available' in sticker) {\n      /**\n       * Whether or not the guild sticker is available\n       * @type {?boolean}\n       */\n      this.available = sticker.available;\n    } else {\n      this.available ??= null;\n    }\n\n    if ('guild_id' in sticker) {\n      /**\n       * The id of the guild that owns this sticker\n       * @type {?Snowflake}\n       */\n      this.guildId = sticker.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('user' in sticker) {\n      /**\n       * The user that uploaded the guild sticker\n       * @type {?User}\n       */\n      this.user = this.client.users._add(sticker.user);\n    } else {\n      this.user ??= null;\n    }\n\n    if ('sort_value' in sticker) {\n      /**\n       * The standard sticker's sort order within its pack\n       * @type {?number}\n       */\n      this.sortValue = sticker.sort_value;\n    } else {\n      this.sortValue ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.type;\n  }\n\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is {@link StickerFormatType.Lottie}, it returns\n   * the URL of the Lottie JSON file.</info>\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.client.rest.cdn.sticker(this.id, this.format === StickerFormatType.Lottie ? 'json' : 'png');\n  }\n\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.sticker(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new DiscordjsError(ErrorCodes.NotGuildSticker);\n    return this.guild.stickers.fetchUser(this);\n  }\n\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   * @property {string} [reason] Reason for editing this sticker\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} data The new data for the sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.stickers.edit(this, data);\n  }\n\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Sticker) {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.type === this.type &&\n        other.format === this.format &&\n        other.name === this.name &&\n        other.packId === this.packId &&\n        other.tags === this.tags &&\n        other.available === this.available &&\n        other.guildId === this.guildId &&\n        other.sortValue === this.sortValue\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.name === this.name &&\n        other.tags === this.tags\n      );\n    }\n  }\n}\n\nexports.Sticker = Sticker;\n\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}