{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nclass ThreadMembersUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n    if (thread) {\n      thread.memberCount = data.member_count;\n      const addedMembers = new Collection();\n      const removedMembers = new Collection();\n      data.added_members?.reduce((_addedMembers, addedMember) => _addedMembers.set(addedMember.user_id, thread.members._add(addedMember)), addedMembers);\n      data.removed_member_ids?.reduce((removedMembersIds, removedMembersId) => {\n        const threadMember = this.getThreadMember(removedMembersId, thread.members);\n        if (threadMember) removedMembersIds.set(threadMember.id, threadMember);\n        thread.members.cache.delete(removedMembersId);\n        return removedMembersIds;\n      }, removedMembers);\n      if (addedMembers.size === 0 && removedMembers.size === 0) {\n        // Uncached thread member(s) left.\n        return {};\n      }\n\n      /**\n       * Emitted whenever members are added or removed from a thread.\n       * <info>This event requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>\n       * @event Client#threadMembersUpdate\n       * @param {Collection<Snowflake, ThreadMember>} addedMembers The members that were added\n       * @param {Collection<Snowflake, ThreadMember>} removedMembers The members that were removed\n       * @param {ThreadChannel} thread The thread where members got updated\n       */\n      client.emit(Events.ThreadMembersUpdate, addedMembers, removedMembers, thread);\n    }\n    return {};\n  }\n}\nmodule.exports = ThreadMembersUpdateAction;","map":{"version":3,"names":["Collection","require","Action","Events","ThreadMembersUpdateAction","handle","data","client","thread","channels","cache","get","id","memberCount","member_count","addedMembers","removedMembers","added_members","reduce","_addedMembers","addedMember","set","user_id","members","_add","removed_member_ids","removedMembersIds","removedMembersId","threadMember","getThreadMember","delete","size","emit","ThreadMembersUpdate","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/ThreadMembersUpdate.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadMembersUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n    if (thread) {\n      thread.memberCount = data.member_count;\n      const addedMembers = new Collection();\n      const removedMembers = new Collection();\n\n      data.added_members?.reduce(\n        (_addedMembers, addedMember) => _addedMembers.set(addedMember.user_id, thread.members._add(addedMember)),\n        addedMembers,\n      );\n\n      data.removed_member_ids?.reduce((removedMembersIds, removedMembersId) => {\n        const threadMember = this.getThreadMember(removedMembersId, thread.members);\n        if (threadMember) removedMembersIds.set(threadMember.id, threadMember);\n        thread.members.cache.delete(removedMembersId);\n        return removedMembersIds;\n      }, removedMembers);\n\n      if (addedMembers.size === 0 && removedMembers.size === 0) {\n        // Uncached thread member(s) left.\n        return {};\n      }\n\n      /**\n       * Emitted whenever members are added or removed from a thread.\n       * <info>This event requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>\n       * @event Client#threadMembersUpdate\n       * @param {Collection<Snowflake, ThreadMember>} addedMembers The members that were added\n       * @param {Collection<Snowflake, ThreadMember>} removedMembers The members that were removed\n       * @param {ThreadChannel} thread The thread where members got updated\n       */\n      client.emit(Events.ThreadMembersUpdate, addedMembers, removedMembers, thread);\n    }\n    return {};\n  }\n}\n\nmodule.exports = ThreadMembersUpdateAction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAMG,yBAAyB,SAASF,MAAM,CAAC;EAC7CG,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,MAAM,GAAGD,MAAM,CAACE,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACL,IAAI,CAACM,EAAE,CAAC;IACjD,IAAIJ,MAAM,EAAE;MACVA,MAAM,CAACK,WAAW,GAAGP,IAAI,CAACQ,YAAY;MACtC,MAAMC,YAAY,GAAG,IAAIf,UAAU,EAAE;MACrC,MAAMgB,cAAc,GAAG,IAAIhB,UAAU,EAAE;MAEvCM,IAAI,CAACW,aAAa,EAAEC,MAAM,CACxB,CAACC,aAAa,EAAEC,WAAW,KAAKD,aAAa,CAACE,GAAG,CAACD,WAAW,CAACE,OAAO,EAAEd,MAAM,CAACe,OAAO,CAACC,IAAI,CAACJ,WAAW,CAAC,CAAC,EACxGL,YAAY,CACb;MAEDT,IAAI,CAACmB,kBAAkB,EAAEP,MAAM,CAAC,CAACQ,iBAAiB,EAAEC,gBAAgB,KAAK;QACvE,MAAMC,YAAY,GAAG,IAAI,CAACC,eAAe,CAACF,gBAAgB,EAAEnB,MAAM,CAACe,OAAO,CAAC;QAC3E,IAAIK,YAAY,EAAEF,iBAAiB,CAACL,GAAG,CAACO,YAAY,CAAChB,EAAE,EAAEgB,YAAY,CAAC;QACtEpB,MAAM,CAACe,OAAO,CAACb,KAAK,CAACoB,MAAM,CAACH,gBAAgB,CAAC;QAC7C,OAAOD,iBAAiB;MAC1B,CAAC,EAAEV,cAAc,CAAC;MAElB,IAAID,YAAY,CAACgB,IAAI,KAAK,CAAC,IAAIf,cAAc,CAACe,IAAI,KAAK,CAAC,EAAE;QACxD;QACA,OAAO,CAAC,CAAC;MACX;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACMxB,MAAM,CAACyB,IAAI,CAAC7B,MAAM,CAAC8B,mBAAmB,EAAElB,YAAY,EAAEC,cAAc,EAAER,MAAM,CAAC;IAC/E;IACA,OAAO,CAAC,CAAC;EACX;AACF;AAEA0B,MAAM,CAACC,OAAO,GAAG/B,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}