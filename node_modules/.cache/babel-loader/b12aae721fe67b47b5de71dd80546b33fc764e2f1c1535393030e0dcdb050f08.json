{"ast":null,"code":"'use strict';\n\nconst {\n  InteractionType\n} = require('discord-api-types/v10');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionResponse {\n  constructor(interaction, id) {\n    /**\n     * The interaction associated with the interaction response\n     * @type {BaseInteraction}\n     */\n    this.interaction = interaction;\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = id ?? interaction.id;\n    this.client = interaction.client;\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   */\n  awaitMessageComponent() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const _options = {\n      ...options,\n      max: 1\n    };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Creates a message component interaction collector\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   */\n  createMessageComponentCollector() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionResponse: this,\n      interactionType: InteractionType.MessageComponent\n    });\n  }\n}\n\n// eslint-disable-next-line import/order\nconst InteractionCollector = require('./InteractionCollector');\nmodule.exports = InteractionResponse;","map":{"version":3,"names":["InteractionType","require","DiscordjsError","ErrorCodes","InteractionResponse","constructor","interaction","id","client","awaitMessageComponent","options","_options","max","Promise","resolve","reject","collector","createMessageComponentCollector","once","interactions","reason","first","InteractionCollectorError","InteractionCollector","interactionResponse","interactionType","MessageComponent","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/InteractionResponse.js"],"sourcesContent":["'use strict';\n\nconst { InteractionType } = require('discord-api-types/v10');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionResponse {\n  constructor(interaction, id) {\n    /**\n     * The interaction associated with the interaction response\n     * @type {BaseInteraction}\n     */\n    this.interaction = interaction;\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = id ?? interaction.id;\n    this.client = interaction.client;\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = { ...options, max: 1 };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Creates a message component interaction collector\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionResponse: this,\n      interactionType: InteractionType.MessageComponent,\n    });\n  }\n}\n\n// eslint-disable-next-line import/order\nconst InteractionCollector = require('./InteractionCollector');\nmodule.exports = InteractionResponse;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAgB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAM;EAAEC,cAAc;EAAEC;AAAW,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;;AAE3D;AACA;AACA;AACA,MAAMG,mBAAmB,CAAC;EACxBC,WAAW,CAACC,WAAW,EAAEC,EAAE,EAAE;IAC3B;AACJ;AACA;AACA;IACI,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGA,EAAE,IAAID,WAAW,CAACC,EAAE;IAC9B,IAAI,CAACC,MAAM,GAAGF,WAAW,CAACE,MAAM;EAClC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,GAAe;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAChC,MAAMC,QAAQ,GAAG;MAAE,GAAGD,OAAO;MAAEE,GAAG,EAAE;IAAE,CAAC;IACvC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,SAAS,GAAG,IAAI,CAACC,+BAA+B,CAACN,QAAQ,CAAC;MAChEK,SAAS,CAACE,IAAI,CAAC,KAAK,EAAE,CAACC,YAAY,EAAEC,MAAM,KAAK;QAC9C,MAAMd,WAAW,GAAGa,YAAY,CAACE,KAAK,EAAE;QACxC,IAAIf,WAAW,EAAEQ,OAAO,CAACR,WAAW,CAAC,CAAC,KACjCS,MAAM,CAAC,IAAIb,cAAc,CAACC,UAAU,CAACmB,yBAAyB,EAAEF,MAAM,CAAC,CAAC;MAC/E,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEH,+BAA+B,GAAe;IAAA,IAAdP,OAAO,uEAAG,CAAC,CAAC;IAC1C,OAAO,IAAIa,oBAAoB,CAAC,IAAI,CAACf,MAAM,EAAE;MAC3C,GAAGE,OAAO;MACVc,mBAAmB,EAAE,IAAI;MACzBC,eAAe,EAAEzB,eAAe,CAAC0B;IACnC,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,MAAMH,oBAAoB,GAAGtB,OAAO,CAAC,wBAAwB,CAAC;AAC9D0B,MAAM,CAACC,OAAO,GAAGxB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}