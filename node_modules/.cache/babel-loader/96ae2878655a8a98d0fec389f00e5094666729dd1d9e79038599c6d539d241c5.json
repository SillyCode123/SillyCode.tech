{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n    this.animated = emoji.animated ?? null;\n\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n    this.name = emoji.name ?? null;\n\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if it's a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.id && this.client.rest.cdn.emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.id && DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true\n    });\n  }\n}\nexports.Emoji = Emoji;\n\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */","map":{"version":3,"names":["DiscordSnowflake","require","Base","Emoji","constructor","client","emoji","animated","name","id","identifier","encodeURIComponent","url","rest","cdn","createdTimestamp","timestampFrom","createdAt","Date","toString","toJSON","guild","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Emoji.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n    this.animated = emoji.animated ?? null;\n\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n    this.name = emoji.name ?? null;\n\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if it's a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.id && this.client.rest.cdn.emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.id && DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nexports.Emoji = Emoji;\n\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAME,KAAK,SAASD,IAAI,CAAC;EACvBE,WAAW,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,KAAK,CAACD,MAAM,CAAC;IACb;AACJ;AACA;AACA;IACI,IAAI,CAACE,QAAQ,GAAGD,KAAK,CAACC,QAAQ,IAAI,IAAI;;IAEtC;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGF,KAAK,CAACE,IAAI,IAAI,IAAI;;IAE9B;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGH,KAAK,CAACG,EAAE;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,UAAU,GAAG;IACf,IAAI,IAAI,CAACD,EAAE,EAAE,OAAQ,GAAE,IAAI,CAACF,QAAQ,GAAG,IAAI,GAAG,EAAG,GAAE,IAAI,CAACC,IAAK,IAAG,IAAI,CAACC,EAAG,EAAC;IACzE,OAAOE,kBAAkB,CAAC,IAAI,CAACH,IAAI,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,GAAG,GAAG;IACR,OAAO,IAAI,CAACH,EAAE,IAAI,IAAI,CAACJ,MAAM,CAACQ,IAAI,CAACC,GAAG,CAACR,KAAK,CAAC,IAAI,CAACG,EAAE,EAAE,IAAI,CAACF,QAAQ,GAAG,KAAK,GAAG,KAAK,CAAC;EACtF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIQ,gBAAgB,GAAG;IACrB,OAAO,IAAI,CAACN,EAAE,IAAIT,gBAAgB,CAACgB,aAAa,CAAC,IAAI,CAACP,EAAE,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIQ,SAAS,GAAG;IACd,OAAO,IAAI,CAACR,EAAE,IAAI,IAAIS,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,QAAQ,GAAG;IACT,OAAO,IAAI,CAACV,EAAE,GAAI,IAAG,IAAI,CAACF,QAAQ,GAAG,GAAG,GAAG,EAAG,IAAG,IAAI,CAACC,IAAK,IAAG,IAAI,CAACC,EAAG,GAAE,GAAG,IAAI,CAACD,IAAI;EACtF;EAEAY,MAAM,GAAG;IACP,OAAO,KAAK,CAACA,MAAM,CAAC;MAClBC,KAAK,EAAE,SAAS;MAChBN,gBAAgB,EAAE,IAAI;MACtBH,GAAG,EAAE,IAAI;MACTF,UAAU,EAAE;IACd,CAAC,CAAC;EACJ;AACF;AAEAY,OAAO,CAACnB,KAAK,GAAGA,KAAK;;AAErB;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}