{"ast":null,"code":"'use strict';\n\nconst {\n  RouteBases,\n  Routes,\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  GuildScheduledEvent\n} = require('./GuildScheduledEvent');\nconst IntegrationApplication = require('./IntegrationApplication');\nconst InviteStageInstance = require('./InviteStageInstance');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents an invitation to a guild channel.\n * @extends {Base}\n */\nclass Invite extends Base {\n  /**\n   * A regular expression that matches Discord invite links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof Invite\n   */\n  static InvitesPattern = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/(?<code>[\\w-]{2,255})/i;\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n    this.guild ??= null;\n    if (data.guild) {\n      this.guild = this.client.guilds.resolve(data.guild.id) ?? new InviteGuild(this.client, data.guild);\n    }\n    if ('code' in data) {\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.presenceCount = data.approximate_presence_count;\n    } else {\n      this.presenceCount ??= null;\n    }\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.memberCount = data.approximate_member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n    if ('temporary' in data) {\n      /**\n       * Whether or not this invite only grants temporary membership\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?boolean}\n       */\n      this.temporary = data.temporary ?? null;\n    } else {\n      this.temporary ??= null;\n    }\n    if ('max_age' in data) {\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxAge = data.max_age;\n    } else {\n      this.maxAge ??= null;\n    }\n    if ('uses' in data) {\n      /**\n       * How many times this invite has been used\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.uses = data.uses;\n    } else {\n      this.uses ??= null;\n    }\n    if ('max_uses' in data) {\n      /**\n       * The maximum uses of this invite\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxUses = data.max_uses;\n    } else {\n      this.maxUses ??= null;\n    }\n    if ('inviter_id' in data) {\n      /**\n       * The user's id who created this invite\n       * @type {?Snowflake}\n       */\n      this.inviterId = data.inviter_id;\n    } else {\n      this.inviterId ??= null;\n    }\n    if ('inviter' in data) {\n      this.client.users._add(data.inviter);\n      this.inviterId = data.inviter.id;\n    }\n    if ('target_user' in data) {\n      /**\n       * The user whose stream to display for this voice channel stream invite\n       * @type {?User}\n       */\n      this.targetUser = this.client.users._add(data.target_user);\n    } else {\n      this.targetUser ??= null;\n    }\n    if ('target_application' in data) {\n      /**\n       * The embedded application to open for this voice channel embedded application invite\n       * @type {?IntegrationApplication}\n       */\n      this.targetApplication = new IntegrationApplication(this.client, data.target_application);\n    } else {\n      this.targetApplication ??= null;\n    }\n    if ('target_type' in data) {\n      /**\n       * The target type\n       * @type {?InviteTargetType}\n       */\n      this.targetType = data.target_type;\n    } else {\n      this.targetType ??= null;\n    }\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel this invite is for\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n    if ('channel' in data) {\n      /**\n       * The channel this invite is for\n       * @type {?BaseChannel}\n       */\n      this.channel = this.client.channels._add(data.channel, this.guild, {\n        cache: false\n      }) ?? this.client.channels.resolve(this.channelId);\n      this.channelId ??= data.channel.id;\n    }\n    if ('created_at' in data) {\n      /**\n       * The timestamp this invite was created at\n       * @type {?number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    } else {\n      this.createdTimestamp ??= null;\n    }\n    if ('expires_at' in data) {\n      this._expiresTimestamp = data.expires_at && Date.parse(data.expires_at);\n    } else {\n      this._expiresTimestamp ??= null;\n    }\n    if ('stage_instance' in data) {\n      /**\n       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n       * @type {?InviteStageInstance}\n       * @deprecated\n       */\n      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);\n    } else {\n      this.stageInstance ??= null;\n    }\n    if ('guild_scheduled_event' in data) {\n      /**\n       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for\n       * @type {?GuildScheduledEvent}\n       */\n      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);\n    } else {\n      this.guildScheduledEvent ??= null;\n    }\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return Boolean(this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) || guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild));\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return this._expiresTimestamp ?? (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null);\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return this.expiresTimestamp && new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * The user who created this invite\n   * @type {?User}\n   * @readonly\n   */\n  get inviter() {\n    return this.inviterId && this.client.users.resolve(this.inviterId);\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.invite}/${this.code}`;\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.invite(this.code), {\n      reason\n    });\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId'\n    });\n  }\n  valueOf() {\n    return this.code;\n  }\n}\nmodule.exports = Invite;","map":{"version":3,"names":["RouteBases","Routes","PermissionFlagsBits","require","Base","GuildScheduledEvent","IntegrationApplication","InviteStageInstance","DiscordjsError","ErrorCodes","Invite","InvitesPattern","constructor","client","data","_patch","InviteGuild","guild","guilds","resolve","id","code","presenceCount","approximate_presence_count","memberCount","approximate_member_count","temporary","maxAge","max_age","uses","maxUses","max_uses","inviterId","inviter_id","users","_add","inviter","targetUser","target_user","targetApplication","target_application","targetType","target_type","channelId","channel_id","channel","channels","cache","createdTimestamp","Date","parse","created_at","_expiresTimestamp","expires_at","stageInstance","stage_instance","guildScheduledEvent","guild_scheduled_event","createdAt","deletable","has","members","me","GuildUncachedMe","Boolean","permissionsFor","user","ManageChannels","permissions","ManageGuild","expiresTimestamp","expiresAt","url","invite","delete","reason","rest","toString","toJSON","valueOf","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Invite.js"],"sourcesContent":["'use strict';\n\nconst { RouteBases, Routes, PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { GuildScheduledEvent } = require('./GuildScheduledEvent');\nconst IntegrationApplication = require('./IntegrationApplication');\nconst InviteStageInstance = require('./InviteStageInstance');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an invitation to a guild channel.\n * @extends {Base}\n */\nclass Invite extends Base {\n  /**\n   * A regular expression that matches Discord invite links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof Invite\n   */\n  static InvitesPattern = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/(?<code>[\\w-]{2,255})/i;\n\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n    this.guild ??= null;\n    if (data.guild) {\n      this.guild = this.client.guilds.resolve(data.guild.id) ?? new InviteGuild(this.client, data.guild);\n    }\n\n    if ('code' in data) {\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.presenceCount = data.approximate_presence_count;\n    } else {\n      this.presenceCount ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.memberCount = data.approximate_member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n\n    if ('temporary' in data) {\n      /**\n       * Whether or not this invite only grants temporary membership\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?boolean}\n       */\n      this.temporary = data.temporary ?? null;\n    } else {\n      this.temporary ??= null;\n    }\n\n    if ('max_age' in data) {\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxAge = data.max_age;\n    } else {\n      this.maxAge ??= null;\n    }\n\n    if ('uses' in data) {\n      /**\n       * How many times this invite has been used\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.uses = data.uses;\n    } else {\n      this.uses ??= null;\n    }\n\n    if ('max_uses' in data) {\n      /**\n       * The maximum uses of this invite\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxUses = data.max_uses;\n    } else {\n      this.maxUses ??= null;\n    }\n\n    if ('inviter_id' in data) {\n      /**\n       * The user's id who created this invite\n       * @type {?Snowflake}\n       */\n      this.inviterId = data.inviter_id;\n    } else {\n      this.inviterId ??= null;\n    }\n\n    if ('inviter' in data) {\n      this.client.users._add(data.inviter);\n      this.inviterId = data.inviter.id;\n    }\n\n    if ('target_user' in data) {\n      /**\n       * The user whose stream to display for this voice channel stream invite\n       * @type {?User}\n       */\n      this.targetUser = this.client.users._add(data.target_user);\n    } else {\n      this.targetUser ??= null;\n    }\n\n    if ('target_application' in data) {\n      /**\n       * The embedded application to open for this voice channel embedded application invite\n       * @type {?IntegrationApplication}\n       */\n      this.targetApplication = new IntegrationApplication(this.client, data.target_application);\n    } else {\n      this.targetApplication ??= null;\n    }\n\n    if ('target_type' in data) {\n      /**\n       * The target type\n       * @type {?InviteTargetType}\n       */\n      this.targetType = data.target_type;\n    } else {\n      this.targetType ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel this invite is for\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('channel' in data) {\n      /**\n       * The channel this invite is for\n       * @type {?BaseChannel}\n       */\n      this.channel =\n        this.client.channels._add(data.channel, this.guild, { cache: false }) ??\n        this.client.channels.resolve(this.channelId);\n\n      this.channelId ??= data.channel.id;\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp this invite was created at\n       * @type {?number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    } else {\n      this.createdTimestamp ??= null;\n    }\n\n    if ('expires_at' in data) {\n      this._expiresTimestamp = data.expires_at && Date.parse(data.expires_at);\n    } else {\n      this._expiresTimestamp ??= null;\n    }\n\n    if ('stage_instance' in data) {\n      /**\n       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n       * @type {?InviteStageInstance}\n       * @deprecated\n       */\n      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);\n    } else {\n      this.stageInstance ??= null;\n    }\n\n    if ('guild_scheduled_event' in data) {\n      /**\n       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for\n       * @type {?GuildScheduledEvent}\n       */\n      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);\n    } else {\n      this.guildScheduledEvent ??= null;\n    }\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return Boolean(\n      this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||\n        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return (\n      this._expiresTimestamp ??\n      (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null)\n    );\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return this.expiresTimestamp && new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * The user who created this invite\n   * @type {?User}\n   * @readonly\n   */\n  get inviter() {\n    return this.inviterId && this.client.users.resolve(this.inviterId);\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.invite}/${this.code}`;\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.invite(this.code), { reason });\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\nmodule.exports = Invite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}