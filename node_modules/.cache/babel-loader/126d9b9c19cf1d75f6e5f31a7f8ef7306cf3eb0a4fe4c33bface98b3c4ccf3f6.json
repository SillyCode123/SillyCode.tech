{"ast":null,"code":"'use strict';\n\nconst Events = require('../../util/Events');\n\n/**\n * Manages voice connections for the client\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n\n    /**\n     * Maps guild ids to voice adapters created for use with @discordjs/voice.\n     * @type {Map<Snowflake, Object>}\n     */\n    this.adapters = new Map();\n    client.on(Events.ShardDisconnect, (_, shardId) => {\n      for (const [guildId, adapter] of this.adapters.entries()) {\n        if (client.guilds.cache.get(guildId)?.shardId === shardId) {\n          adapter.destroy();\n        }\n      }\n    });\n  }\n  onVoiceServer(payload) {\n    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);\n  }\n  onVoiceStateUpdate(payload) {\n    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {\n      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);\n    }\n  }\n}\nmodule.exports = ClientVoiceManager;","map":{"version":3,"names":["Events","require","ClientVoiceManager","constructor","client","Object","defineProperty","value","adapters","Map","on","ShardDisconnect","_","shardId","guildId","adapter","entries","guilds","cache","get","destroy","onVoiceServer","payload","guild_id","onVoiceServerUpdate","onVoiceStateUpdate","session_id","user_id","user","id","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/voice/ClientVoiceManager.js"],"sourcesContent":["'use strict';\n\nconst Events = require('../../util/Events');\n\n/**\n * Manages voice connections for the client\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * Maps guild ids to voice adapters created for use with @discordjs/voice.\n     * @type {Map<Snowflake, Object>}\n     */\n    this.adapters = new Map();\n\n    client.on(Events.ShardDisconnect, (_, shardId) => {\n      for (const [guildId, adapter] of this.adapters.entries()) {\n        if (client.guilds.cache.get(guildId)?.shardId === shardId) {\n          adapter.destroy();\n        }\n      }\n    });\n  }\n\n  onVoiceServer(payload) {\n    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);\n  }\n\n  onVoiceStateUpdate(payload) {\n    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {\n      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);\n    }\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE3C;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACvBC,WAAW,CAACC,MAAM,EAAE;IAClB;AACJ;AACA;AACA;AACA;AACA;IACIC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAAEC,KAAK,EAAEH;IAAO,CAAC,CAAC;;IAExD;AACJ;AACA;AACA;IACI,IAAI,CAACI,QAAQ,GAAG,IAAIC,GAAG,EAAE;IAEzBL,MAAM,CAACM,EAAE,CAACV,MAAM,CAACW,eAAe,EAAE,CAACC,CAAC,EAAEC,OAAO,KAAK;MAChD,KAAK,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,IAAI,IAAI,CAACP,QAAQ,CAACQ,OAAO,EAAE,EAAE;QACxD,IAAIZ,MAAM,CAACa,MAAM,CAACC,KAAK,CAACC,GAAG,CAACL,OAAO,CAAC,EAAED,OAAO,KAAKA,OAAO,EAAE;UACzDE,OAAO,CAACK,OAAO,EAAE;QACnB;MACF;IACF,CAAC,CAAC;EACJ;EAEAC,aAAa,CAACC,OAAO,EAAE;IACrB,IAAI,CAACd,QAAQ,CAACW,GAAG,CAACG,OAAO,CAACC,QAAQ,CAAC,EAAEC,mBAAmB,CAACF,OAAO,CAAC;EACnE;EAEAG,kBAAkB,CAACH,OAAO,EAAE;IAC1B,IAAIA,OAAO,CAACC,QAAQ,IAAID,OAAO,CAACI,UAAU,IAAIJ,OAAO,CAACK,OAAO,KAAK,IAAI,CAACvB,MAAM,CAACwB,IAAI,EAAEC,EAAE,EAAE;MACtF,IAAI,CAACrB,QAAQ,CAACW,GAAG,CAACG,OAAO,CAACC,QAAQ,CAAC,EAAEE,kBAAkB,CAACH,OAAO,CAAC;IAClE;EACF;AACF;AAEAQ,MAAM,CAACC,OAAO,GAAG7B,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}