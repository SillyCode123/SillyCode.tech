{"ast":null,"code":"'use strict';\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild stage channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass StageChannel extends BaseGuildVoiceChannel {\n  _patch(data) {\n    super._patch(data);\n    if ('topic' in data) {\n      /**\n       * The topic of the stage channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n  }\n\n  /**\n   * The stage instance of this stage channel, if it exists\n   * @type {?StageInstance}\n   * @readonly\n   */\n  get stageInstance() {\n    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;\n  }\n\n  /**\n   * Creates a stage instance associated with this stage channel.\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   */\n  createStageInstance(options) {\n    return this.guild.stageInstances.create(this.id, options);\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({\n      topic,\n      reason\n    });\n  }\n}\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof StageChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<StageChannel>}\n * @example\n * // Set the RTC region to sydney\n * stageChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * stageChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\nmodule.exports = StageChannel;","map":{"version":3,"names":["BaseGuildVoiceChannel","require","StageChannel","_patch","data","topic","stageInstance","guild","stageInstances","cache","find","channelId","id","createStageInstance","options","create","setTopic","reason","edit","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/StageChannel.js"],"sourcesContent":["'use strict';\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild stage channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass StageChannel extends BaseGuildVoiceChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n  }\n\n  /**\n   * The stage instance of this stage channel, if it exists\n   * @type {?StageInstance}\n   * @readonly\n   */\n  get stageInstance() {\n    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;\n  }\n\n  /**\n   * Creates a stage instance associated with this stage channel.\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   */\n  createStageInstance(options) {\n    return this.guild.stageInstances.create(this.id, options);\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic, reason });\n  }\n}\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof StageChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<StageChannel>}\n * @example\n * // Set the RTC region to sydney\n * stageChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * stageChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\nmodule.exports = StageChannel;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAEhE;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASF,qBAAqB,CAAC;EAC/CG,MAAM,CAACC,IAAI,EAAE;IACX,KAAK,CAACD,MAAM,CAACC,IAAI,CAAC;IAElB,IAAI,OAAO,IAAIA,IAAI,EAAE;MACnB;AACN;AACA;AACA;MACM,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACC,KAAK;IACzB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,aAAa,GAAG;IAClB,OAAO,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,KAAK,CAACC,IAAI,CAACJ,aAAa,IAAIA,aAAa,CAACK,SAAS,KAAK,IAAI,CAACC,EAAE,CAAC,IAAI,IAAI;EAC3G;;EAEA;AACF;AACA;AACA;AACA;EACEC,mBAAmB,CAACC,OAAO,EAAE;IAC3B,OAAO,IAAI,CAACP,KAAK,CAACC,cAAc,CAACO,MAAM,CAAC,IAAI,CAACH,EAAE,EAAEE,OAAO,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,QAAQ,CAACX,KAAK,EAAEY,MAAM,EAAE;IACtB,OAAO,IAAI,CAACC,IAAI,CAAC;MAAEb,KAAK;MAAEY;IAAO,CAAC,CAAC;EACrC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAGlB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}