{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth2Routes = exports.RouteBases = exports.ImageFormat = exports.CDNRoutes = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;\n__exportStar(require(\"../common\"), exports);\n__exportStar(require(\"./application\"), exports);\n__exportStar(require(\"./auditLog\"), exports);\n__exportStar(require(\"./autoModeration\"), exports);\n__exportStar(require(\"./channel\"), exports);\n__exportStar(require(\"./emoji\"), exports);\n__exportStar(require(\"./gateway\"), exports);\n__exportStar(require(\"./guild\"), exports);\n__exportStar(require(\"./guildScheduledEvent\"), exports);\n__exportStar(require(\"./interactions\"), exports);\n__exportStar(require(\"./invite\"), exports);\n__exportStar(require(\"./oauth2\"), exports);\n__exportStar(require(\"./stageInstance\"), exports);\n__exportStar(require(\"./sticker\"), exports);\n__exportStar(require(\"./template\"), exports);\n__exportStar(require(\"./user\"), exports);\n__exportStar(require(\"./voice\"), exports);\n__exportStar(require(\"./webhook\"), exports);\nexports.APIVersion = '10';\nexports.Routes = {\n  /**\n   * Route for:\n   * - GET `/applications/{application.id}/role-connections/metadata`\n   * - PUT `/applications/{application.id}/role-connections/metadata`\n   */\n  applicationRoleConnectionMetadata(applicationId) {\n    return `/applications/${applicationId}/role-connections/metadata`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/auto-moderation/rules`\n   * - POST `/guilds/{guild.id}/auto-moderation/rules`\n   */\n  guildAutoModerationRules(guildId) {\n    return `/guilds/${guildId}/auto-moderation/rules`;\n  },\n  /**\n   * Routes for:\n   * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n   * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n   * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n   */\n  guildAutoModerationRule(guildId, ruleId) {\n    return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/audit-logs`\n   */\n  guildAuditLog(guildId) {\n    return `/guilds/${guildId}/audit-logs`;\n  },\n  /**\n   * Route for:\n   * - GET    `/channels/{channel.id}`\n   * - PATCH  `/channels/{channel.id}`\n   * - DELETE `/channels/{channel.id}`\n   */\n  channel(channelId) {\n    return `/channels/${channelId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/channels/{channel.id}/messages`\n   * - POST `/channels/{channel.id}/messages`\n   */\n  channelMessages(channelId) {\n    return `/channels/${channelId}/messages`;\n  },\n  /**\n   * Route for:\n   * - GET    `/channels/{channel.id}/messages/{message.id}`\n   * - PATCH  `/channels/{channel.id}/messages/{message.id}`\n   * - DELETE `/channels/{channel.id}/messages/{message.id}`\n   */\n  channelMessage(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`\n   */\n  channelMessageCrosspost(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}/crosspost`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\n   *\n   * **Note**: You need to URL encode the emoji yourself\n   */\n  channelMessageOwnReaction(channelId, messageId, emoji) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;\n  },\n  /**\n   * Route for:\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`\n   *\n   * **Note**: You need to URL encode the emoji yourself\n   */\n  channelMessageUserReaction(channelId, messageId, emoji, userId) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\n   *\n   * **Note**: You need to URL encode the emoji yourself\n   */\n  channelMessageReaction(channelId, messageId, emoji) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;\n  },\n  /**\n   * Route for:\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`\n   */\n  channelMessageAllReactions(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}/reactions`;\n  },\n  /**\n   * Route for:\n   * - POST `/channels/{channel.id}/messages/bulk-delete`\n   */\n  channelBulkDelete(channelId) {\n    return `/channels/${channelId}/messages/bulk-delete`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`\n   * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`\n   */\n  channelPermission(channelId, overwriteId) {\n    return `/channels/${channelId}/permissions/${overwriteId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/channels/{channel.id}/invites`\n   * - POST `/channels/{channel.id}/invites`\n   */\n  channelInvites(channelId) {\n    return `/channels/${channelId}/invites`;\n  },\n  /**\n   * Route for:\n   * - POST `/channels/{channel.id}/followers`\n   */\n  channelFollowers(channelId) {\n    return `/channels/${channelId}/followers`;\n  },\n  /**\n   * Route for:\n   * - POST `/channels/{channel.id}/typing`\n   */\n  channelTyping(channelId) {\n    return `/channels/${channelId}/typing`;\n  },\n  /**\n   * Route for:\n   * - GET `/channels/{channel.id}/pins`\n   */\n  channelPins(channelId) {\n    return `/channels/${channelId}/pins`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/channels/{channel.id}/pins/{message.id}`\n   * - DELETE `/channels/{channel.id}/pins/{message.id}`\n   */\n  channelPin(channelId, messageId) {\n    return `/channels/${channelId}/pins/${messageId}`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/channels/{channel.id}/recipients/{user.id}`\n   * - DELETE `/channels/{channel.id}/recipients/{user.id}`\n   */\n  channelRecipient(channelId, userId) {\n    return `/channels/${channelId}/recipients/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/emojis`\n   * - POST `/guilds/{guild.id}/emojis`\n   */\n  guildEmojis(guildId) {\n    return `/guilds/${guildId}/emojis`;\n  },\n  /**\n   * Route for:\n   * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`\n   * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`\n   * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`\n   */\n  guildEmoji(guildId, emojiId) {\n    return `/guilds/${guildId}/emojis/${emojiId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/guilds`\n   */\n  guilds() {\n    return '/guilds';\n  },\n  /**\n   * Route for:\n   * - GET    `/guilds/{guild.id}`\n   * - PATCH  `/guilds/{guild.id}`\n   * - DELETE `/guilds/{guild.id}`\n   */\n  guild(guildId) {\n    return `/guilds/${guildId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/preview`\n   */\n  guildPreview(guildId) {\n    return `/guilds/${guildId}/preview`;\n  },\n  /**\n   * Route for:\n   * - GET   `/guilds/{guild.id}/channels`\n   * - POST  `/guilds/{guild.id}/channels`\n   * - PATCH `/guilds/{guild.id}/channels`\n   */\n  guildChannels(guildId) {\n    return `/guilds/${guildId}/channels`;\n  },\n  /**\n   * Route for:\n   * - GET    `/guilds/{guild.id}/members/{user.id}`\n   * - PUT    `/guilds/{guild.id}/members/{user.id}`\n   * - PATCH  `/guilds/{guild.id}/members/@me`\n   * - PATCH  `/guilds/{guild.id}/members/{user.id}`\n   * - DELETE `/guilds/{guild.id}/members/{user.id}`\n   */\n  guildMember(guildId) {\n    let userId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '@me';\n    return `/guilds/${guildId}/members/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/members`\n   */\n  guildMembers(guildId) {\n    return `/guilds/${guildId}/members`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/members/search`\n   */\n  guildMembersSearch(guildId) {\n    return `/guilds/${guildId}/members/search`;\n  },\n  /**\n   * Route for:\n   * - PATCH `/guilds/{guild.id}/members/@me/nick`\n   * @deprecated Use {@link Routes.guildMember} instead.\n   */\n  guildCurrentMemberNickname(guildId) {\n    return `/guilds/${guildId}/members/@me/nick`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\n   * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\n   */\n  guildMemberRole(guildId, memberId, roleId) {\n    return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/guilds/{guild.id}/mfa`\n   */\n  guildMFA(guildId) {\n    return `/guilds/${guildId}/mfa`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/bans`\n   */\n  guildBans(guildId) {\n    return `/guilds/${guildId}/bans`;\n  },\n  /**\n   * Route for:\n   * - GET    `/guilds/{guild.id}/bans/{user.id}`\n   * - PUT    `/guilds/{guild.id}/bans/{user.id}`\n   * - DELETE `/guilds/{guild.id}/bans/{user.id}`\n   */\n  guildBan(guildId, userId) {\n    return `/guilds/${guildId}/bans/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET   `/guilds/{guild.id}/roles`\n   * - POST  `/guilds/{guild.id}/roles`\n   * - PATCH `/guilds/{guild.id}/roles`\n   */\n  guildRoles(guildId) {\n    return `/guilds/${guildId}/roles`;\n  },\n  /**\n   * Route for:\n   * - PATCH  `/guilds/{guild.id}/roles/{role.id}`\n   * - DELETE `/guilds/{guild.id}/roles/{role.id}`\n   */\n  guildRole(guildId, roleId) {\n    return `/guilds/${guildId}/roles/${roleId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/prune`\n   * - POST `/guilds/{guild.id}/prune`\n   */\n  guildPrune(guildId) {\n    return `/guilds/${guildId}/prune`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/regions`\n   */\n  guildVoiceRegions(guildId) {\n    return `/guilds/${guildId}/regions`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/invites`\n   */\n  guildInvites(guildId) {\n    return `/guilds/${guildId}/invites`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/integrations`\n   */\n  guildIntegrations(guildId) {\n    return `/guilds/${guildId}/integrations`;\n  },\n  /**\n   * Route for:\n   * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`\n   */\n  guildIntegration(guildId, integrationId) {\n    return `/guilds/${guildId}/integrations/${integrationId}`;\n  },\n  /**\n   * Route for:\n   * - GET   `/guilds/{guild.id}/widget`\n   * - PATCH `/guilds/{guild.id}/widget`\n   */\n  guildWidgetSettings(guildId) {\n    return `/guilds/${guildId}/widget`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/widget.json`\n   */\n  guildWidgetJSON(guildId) {\n    return `/guilds/${guildId}/widget.json`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/vanity-url`\n   */\n  guildVanityUrl(guildId) {\n    return `/guilds/${guildId}/vanity-url`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/widget.png`\n   */\n  guildWidgetImage(guildId) {\n    return `/guilds/${guildId}/widget.png`;\n  },\n  /**\n   * Route for:\n   * - GET    `/invites/{invite.code}`\n   * - DELETE `/invites/{invite.code}`\n   */\n  invite(code) {\n    return `/invites/${code}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/templates/{template.code}`\n   * - POST `/guilds/templates/{template.code}`\n   */\n  template(code) {\n    return `/guilds/templates/${code}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/templates`\n   * - POST `/guilds/{guild.id}/templates`\n   */\n  guildTemplates(guildId) {\n    return `/guilds/${guildId}/templates`;\n  },\n  /**\n   * Route for:\n   * - PUT    `/guilds/{guild.id}/templates/{template.code}`\n   * - PATCH  `/guilds/{guild.id}/templates/{template.code}`\n   * - DELETE `/guilds/{guild.id}/templates/{template.code}`\n   */\n  guildTemplate(guildId, code) {\n    return `/guilds/${guildId}/templates/${code}`;\n  },\n  /**\n   * Route for:\n   * - POST `/channels/{channel.id}/threads`\n   * - POST `/channels/{channel.id}/messages/{message.id}/threads`\n   */\n  threads(parentId, messageId) {\n    const parts = ['', 'channels', parentId];\n    if (messageId) parts.push('messages', messageId);\n    parts.push('threads');\n    return parts.join('/');\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/threads/active`\n   */\n  guildActiveThreads(guildId) {\n    return `/guilds/${guildId}/threads/active`;\n  },\n  /**\n   * Route for:\n   * - GET `/channels/{channel.id}/threads/archived/public`\n   * - GET `/channels/{channel.id}/threads/archived/private`\n   */\n  channelThreads(channelId, archivedStatus) {\n    return `/channels/${channelId}/threads/archived/${archivedStatus}`;\n  },\n  /**\n   * Route for:\n   * - GET `/channels/{channel.id}/users/@me/threads/archived/prviate`\n   */\n  channelJoinedArchivedThreads(channelId) {\n    return `/channels/${channelId}/users/@me/threads/archived/private`;\n  },\n  /**\n   * Route for:\n   * - GET    `/channels/{thread.id}/thread-members`\n   * - GET    `/channels/{thread.id}/thread-members/{user.id}`\n   * - PUT    `/channels/{thread.id}/thread-members/@me`\n   * - PUT    `/channels/{thread.id}/thread-members/{user.id}`\n   * - DELETE `/channels/{thread.id}/thread-members/@me`\n   * - DELETE `/channels/{thread.id}/thread-members/{user.id}`\n   */\n  threadMembers(threadId, userId) {\n    const parts = ['', 'channels', threadId, 'thread-members'];\n    if (userId) parts.push(userId);\n    return parts.join('/');\n  },\n  /**\n   * Route for:\n   * - GET   `/users/@me`\n   * - GET   `/users/{user.id}`\n   * - PATCH `/users/@me`\n   *\n   * @param [userId='@me'] The user ID, defaulted to `@me`\n   */\n  user() {\n    let userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '@me';\n    return `/users/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/users/@me/applications/{application.id}/role-connection`\n   * - PUT `/users/@me/applications/{application.id}/role-connection`\n   */\n  userApplicationRoleConnection(applicationId) {\n    return `/users/@me/applications/${applicationId}/role-connection`;\n  },\n  /**\n   * Route for:\n   * - GET `/users/@me/guilds`\n   */\n  userGuilds() {\n    return `/users/@me/guilds`;\n  },\n  /**\n   * Route for:\n   * - GET `/users/@me/guilds/{guild.id}/member`\n   */\n  userGuildMember(guildId) {\n    return `/users/@me/guilds/${guildId}/member`;\n  },\n  /**\n   * Route for:\n   * - DELETE `/users/@me/guilds/{guild.id}`\n   */\n  userGuild(guildId) {\n    return `/users/@me/guilds/${guildId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/users/@me/channels`\n   */\n  userChannels() {\n    return `/users/@me/channels`;\n  },\n  /**\n   * Route for:\n   * - GET `/users/@me/connections`\n   */\n  userConnections() {\n    return `/users/@me/connections`;\n  },\n  /**\n   * Route for:\n   * - GET `/voice/regions`\n   */\n  voiceRegions() {\n    return `/voice/regions`;\n  },\n  /**\n   * Route for:\n   * - GET  `/channels/{channel.id}/webhooks`\n   * - POST `/channels/{channel.id}/webhooks`\n   */\n  channelWebhooks(channelId) {\n    return `/channels/${channelId}/webhooks`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/webhooks`\n   */\n  guildWebhooks(guildId) {\n    return `/guilds/${guildId}/webhooks`;\n  },\n  /**\n   * Route for:\n   * - GET    `/webhooks/{webhook.id}`\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}`\n   * - PATCH  `/webhooks/{webhook.id}`\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`\n   * - DELETE `/webhooks/{webhook.id}`\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}`\n   * - POST   `/webhooks/{webhook.id}/{webhook.token}`\n   *\n   * - POST   `/webhooks/{application.id}/{interaction.token}`\n   */\n  webhook(webhookId, webhookToken) {\n    const parts = ['', 'webhooks', webhookId];\n    if (webhookToken) parts.push(webhookToken);\n    return parts.join('/');\n  },\n  /**\n   * Route for:\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n   *\n   * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`\n   * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\n   * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\n   *\n   * @param [messageId='@original'] The message ID to change, defaulted to `@original`\n   */\n  webhookMessage(webhookId, webhookToken) {\n    let messageId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '@original';\n    return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/webhooks/{webhook.id}/{webhook.token}/github`\n   * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`\n   */\n  webhookPlatform(webhookId, webhookToken, platform) {\n    return `/webhooks/${webhookId}/${webhookToken}/${platform}`;\n  },\n  /**\n   * Route for:\n   * - GET `/gateway`\n   */\n  gateway() {\n    return `/gateway`;\n  },\n  /**\n   * Route for:\n   * - GET `/gateway/bot`\n   */\n  gatewayBot() {\n    return `/gateway/bot`;\n  },\n  /**\n   * Route for:\n   * - GET `/oauth2/applications/@me`\n   */\n  oauth2CurrentApplication() {\n    return `/oauth2/applications/@me`;\n  },\n  /**\n   * Route for:\n   * - GET `/oauth2/@me`\n   */\n  oauth2CurrentAuthorization() {\n    return `/oauth2/@me`;\n  },\n  /**\n   * Route for:\n   * - GET `/oauth2/authorize`\n   */\n  oauth2Authorization() {\n    return `/oauth2/authorize`;\n  },\n  /**\n   * Route for:\n   * - POST `/oauth2/token`\n   */\n  oauth2TokenExchange() {\n    return `/oauth2/token`;\n  },\n  /**\n   * Route for:\n   * - POST `/oauth2/token/revoke`\n   */\n  oauth2TokenRevocation() {\n    return `/oauth2/token/revoke`;\n  },\n  /**\n   * Route for:\n   * - GET  `/applications/{application.id}/commands`\n   * - PUT  `/applications/{application.id}/commands`\n   * - POST `/applications/{application.id}/commands`\n   */\n  applicationCommands(applicationId) {\n    return `/applications/${applicationId}/commands`;\n  },\n  /**\n   * Route for:\n   * - GET    `/applications/{application.id}/commands/{command.id}`\n   * - PATCH  `/applications/{application.id}/commands/{command.id}`\n   * - DELETE `/applications/{application.id}/commands/{command.id}`\n   */\n  applicationCommand(applicationId, commandId) {\n    return `/applications/${applicationId}/commands/${commandId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`\n   * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`\n   * - POST `/applications/{application.id}/guilds/{guild.id}/commands`\n   */\n  applicationGuildCommands(applicationId, guildId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands`;\n  },\n  /**\n   * Route for:\n   * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n   * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n   * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n   */\n  applicationGuildCommand(applicationId, guildId, commandId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;\n  },\n  /**\n   * Route for:\n   * - POST `/interactions/{interaction.id}/{interaction.token}/callback`\n   */\n  interactionCallback(interactionId, interactionToken) {\n    return `/interactions/${interactionId}/${interactionToken}/callback`;\n  },\n  /**\n   * Route for:\n   * - GET   `/guilds/{guild.id}/member-verification`\n   * - PATCH `/guilds/{guild.id}/member-verification`\n   */\n  guildMemberVerification(guildId) {\n    return `/guilds/${guildId}/member-verification`;\n  },\n  /**\n   * Route for:\n   * - PATCH `/guilds/{guild.id}/voice-states/@me`\n   * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`\n   */\n  guildVoiceState(guildId) {\n    let userId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '@me';\n    return `/guilds/${guildId}/voice-states/${userId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\n   * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\n   */\n  guildApplicationCommandsPermissions(applicationId, guildId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;\n  },\n  /**\n   * Route for:\n   * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\n   * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\n   */\n  applicationCommandPermissions(applicationId, guildId, commandId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;\n  },\n  /**\n   * Route for:\n   * - GET   `/guilds/{guild.id}/welcome-screen`\n   * - PATCH `/guilds/{guild.id}/welcome-screen`\n   */\n  guildWelcomeScreen(guildId) {\n    return `/guilds/${guildId}/welcome-screen`;\n  },\n  /**\n   * Route for:\n   * - POST `/stage-instances`\n   */\n  stageInstances() {\n    return `/stage-instances`;\n  },\n  /**\n   * Route for:\n   * - GET `/stage-instances/{channel.id}`\n   * - PATCH `/stage-instances/{channel.id}`\n   * - DELETE `/stage-instances/{channel.id}`\n   */\n  stageInstance(channelId) {\n    return `/stage-instances/${channelId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/stickers/{sticker.id}`\n   */\n  sticker(stickerId) {\n    return `/stickers/${stickerId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/sticker-packs`\n   */\n  nitroStickerPacks() {\n    return '/sticker-packs';\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/stickers`\n   * - POST `/guilds/{guild.id}/stickers`\n   */\n  guildStickers(guildId) {\n    return `/guilds/${guildId}/stickers`;\n  },\n  /**\n   * Route for:\n   * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`\n   * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`\n   * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`\n   */\n  guildSticker(guildId, stickerId) {\n    return `/guilds/${guildId}/stickers/${stickerId}`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/scheduled-events`\n   * - POST `/guilds/{guild.id}/scheduled-events`\n   */\n  guildScheduledEvents(guildId) {\n    return `/guilds/${guildId}/scheduled-events`;\n  },\n  /**\n   * Route for:\n   * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n   * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n   * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n   */\n  guildScheduledEvent(guildId, guildScheduledEventId) {\n    return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`\n   */\n  guildScheduledEventUsers(guildId, guildScheduledEventId) {\n    return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;\n  }\n};\nexports.StickerPackApplicationId = '710982414301790216';\nexports.CDNRoutes = {\n  /**\n   * Route for:\n   * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  emoji(emojiId, format) {\n    return `/emojis/${emojiId}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/icons/{guild.id}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  guildIcon(guildId, guildIcon, format) {\n    return `icons/${guildId}/${guildIcon}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  guildSplash(guildId, guildSplash, format) {\n    return `/splashes/${guildId}/${guildSplash}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  guildDiscoverySplash(guildId, guildDiscoverySplash, format) {\n    return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  guildBanner(guildId, guildBanner, format) {\n    return `/banners/${guildId}/${guildBanner}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  userBanner(userId, userBanner, format) {\n    return `/banners/${userId}/${userBanner}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/embed/avatars/{user.discriminator % 5}.png`\n   *\n   * The `userDiscriminator` parameter should be the user discriminator modulo 5 (e.g. 1337 % 5 = 2)\n   *\n   * This route supports the extension: PNG\n   */\n  defaultUserAvatar(userDiscriminator) {\n    return `/embed/avatars/${userDiscriminator}.png`;\n  },\n  /**\n   * Route for:\n   * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  userAvatar(userId, userAvatar, format) {\n    return `/avatars/${userId}/${userAvatar}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/{guild.id}/users/{user.id}/{guild_member.avatar}.{png|jpeg|webp|gif}`\n   *\n   * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  guildMemberAvatar(guildId, userId, memberAvatar, format) {\n    return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  applicationIcon(applicationId, applicationIcon, format) {\n    return `/app-icons/${applicationId}/${applicationIcon}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  applicationCover(applicationId, applicationCoverImage, format) {\n    return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/app-icons/{application.id}/{application.asset_id}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  applicationAsset(applicationId, applicationAssetId, format) {\n    return `/app-icons/${applicationId}/${applicationAssetId}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  achievementIcon(applicationId, achievementId, achievementIconHash, format) {\n    return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  stickerPackBanner(stickerPackBannerAssetId, format) {\n    return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  teamIcon(teamId, teamIcon, format) {\n    return `/team-icons/${teamId}/${teamIcon}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/stickers/{sticker.id}.{png|json}`\n   *\n   * This route supports the extensions: PNG, Lottie, GIF\n   */\n  sticker(stickerId, format) {\n    return `/stickers/${stickerId}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  roleIcon(roleId, roleIcon, format) {\n    return `/role-icons/${roleId}/${roleIcon}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP\n   */\n  guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {\n    return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;\n  },\n  /**\n   * Route for:\n   * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`\n   *\n   * This route supports the extensions: PNG, JPEG, WebP, GIF\n   */\n  guildMemberBanner(guildId, userId, guildMemberBanner, format) {\n    return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;\n  }\n};\nvar ImageFormat;\n(function (ImageFormat) {\n  ImageFormat[\"JPEG\"] = \"jpeg\";\n  ImageFormat[\"PNG\"] = \"png\";\n  ImageFormat[\"WebP\"] = \"webp\";\n  ImageFormat[\"GIF\"] = \"gif\";\n  ImageFormat[\"Lottie\"] = \"json\";\n})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));\nexports.RouteBases = {\n  api: `https://discord.com/api/v${exports.APIVersion}`,\n  cdn: 'https://cdn.discordapp.com',\n  invite: 'https://discord.gg',\n  template: 'https://discord.new',\n  gift: 'https://discord.gift',\n  scheduledEvent: 'https://discord.com/events'\n};\n// Freeze bases object\nObject.freeze(exports.RouteBases);\nexports.OAuth2Routes = {\n  authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,\n  tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,\n  /**\n   * See https://tools.ietf.org/html/rfc7009\n   */\n  tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`\n};\n// Freeze OAuth2 route object\nObject.freeze(exports.OAuth2Routes);","map":{"version":3,"mappings":"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","names":["__exportStar","exports","applicationRoleConnectionMetadata","applicationId","guildAutoModerationRules","guildId","guildAutoModerationRule","ruleId","guildAuditLog","channel","channelId","channelMessages","channelMessage","messageId","channelMessageCrosspost","channelMessageOwnReaction","emoji","channelMessageUserReaction","userId","channelMessageReaction","channelMessageAllReactions","channelBulkDelete","channelPermission","overwriteId","channelInvites","channelFollowers","channelTyping","channelPins","channelPin","channelRecipient","guildEmojis","guildEmoji","emojiId","guilds","guild","guildPreview","guildChannels","guildMember","guildMembers","guildMembersSearch","guildCurrentMemberNickname","guildMemberRole","memberId","roleId","guildMFA","guildBans","guildBan","guildRoles","guildRole","guildPrune","guildVoiceRegions","guildInvites","guildIntegrations","guildIntegration","integrationId","guildWidgetSettings","guildWidgetJSON","guildVanityUrl","guildWidgetImage","invite","code","template","guildTemplates","guildTemplate","threads","parentId","parts","push","join","guildActiveThreads","channelThreads","archivedStatus","channelJoinedArchivedThreads","threadMembers","threadId","user","userApplicationRoleConnection","userGuilds","userGuildMember","userGuild","userChannels","userConnections","voiceRegions","channelWebhooks","guildWebhooks","webhook","webhookId","webhookToken","webhookMessage","webhookPlatform","platform","gateway","gatewayBot","oauth2CurrentApplication","oauth2CurrentAuthorization","oauth2Authorization","oauth2TokenExchange","oauth2TokenRevocation","applicationCommands","applicationCommand","commandId","applicationGuildCommands","applicationGuildCommand","interactionCallback","interactionId","interactionToken","guildMemberVerification","guildVoiceState","guildApplicationCommandsPermissions","applicationCommandPermissions","guildWelcomeScreen","stageInstances","stageInstance","sticker","stickerId","nitroStickerPacks","guildStickers","guildSticker","guildScheduledEvents","guildScheduledEvent","guildScheduledEventId","guildScheduledEventUsers","format","guildIcon","guildSplash","guildDiscoverySplash","guildBanner","userBanner","defaultUserAvatar","userDiscriminator","userAvatar","guildMemberAvatar","memberAvatar","applicationIcon","applicationCover","applicationCoverImage","applicationAsset","applicationAssetId","achievementIcon","achievementId","achievementIconHash","stickerPackBanner","stickerPackBannerAssetId","teamIcon","teamId","roleIcon","guildScheduledEventCover","guildScheduledEventCoverImage","guildMemberBanner","ImageFormat","api","cdn","gift","scheduledEvent","Object","freeze","authorizationURL","tokenURL","tokenRevocationURL"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}