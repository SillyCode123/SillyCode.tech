{"ast":null,"code":"'use strict';\n\n// Heavily inspired by node's `internal/errors` module\nconst ErrorCodes = require('./ErrorCodes');\nconst Messages = require('./Messages');\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n * @ignore\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(code) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      super(message(code, args));\n      this.code = code;\n      Error.captureStackTrace?.(this, DiscordjsError);\n    }\n    get name() {\n      return `${super.name} [${this.code}]`;\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} code The error code\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n * @ignore\n */\nfunction message(code, args) {\n  if (!(code in ErrorCodes)) throw new Error('Error code must be a valid DiscordjsErrorCodes');\n  const msg = Messages[code];\n  if (!msg) throw new Error(`No message associated with error code: ${code}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (!args?.length) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\nmodule.exports = {\n  DiscordjsError: makeDiscordjsError(Error),\n  DiscordjsTypeError: makeDiscordjsError(TypeError),\n  DiscordjsRangeError: makeDiscordjsError(RangeError)\n};","map":{"version":3,"names":["ErrorCodes","require","Messages","makeDiscordjsError","Base","DiscordjsError","constructor","code","args","message","Error","captureStackTrace","name","msg","length","unshift","String","module","exports","DiscordjsTypeError","TypeError","DiscordjsRangeError","RangeError"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/errors/DJSError.js"],"sourcesContent":["'use strict';\n\n// Heavily inspired by node's `internal/errors` module\nconst ErrorCodes = require('./ErrorCodes');\nconst Messages = require('./Messages');\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n * @ignore\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(code, ...args) {\n      super(message(code, args));\n      this.code = code;\n      Error.captureStackTrace?.(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this.code}]`;\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} code The error code\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n * @ignore\n */\nfunction message(code, args) {\n  if (!(code in ErrorCodes)) throw new Error('Error code must be a valid DiscordjsErrorCodes');\n  const msg = Messages[code];\n  if (!msg) throw new Error(`No message associated with error code: ${code}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (!args?.length) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\nmodule.exports = {\n  DiscordjsError: makeDiscordjsError(Error),\n  DiscordjsTypeError: makeDiscordjsError(TypeError),\n  DiscordjsRangeError: makeDiscordjsError(RangeError),\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkB,CAACC,IAAI,EAAE;EAChC,OAAO,MAAMC,cAAc,SAASD,IAAI,CAAC;IACvCE,WAAW,CAACC,IAAI,EAAW;MAAA,kCAANC,IAAI;QAAJA,IAAI;MAAA;MACvB,KAAK,CAACC,OAAO,CAACF,IAAI,EAAEC,IAAI,CAAC,CAAC;MAC1B,IAAI,CAACD,IAAI,GAAGA,IAAI;MAChBG,KAAK,CAACC,iBAAiB,GAAG,IAAI,EAAEN,cAAc,CAAC;IACjD;IAEA,IAAIO,IAAI,GAAG;MACT,OAAQ,GAAE,KAAK,CAACA,IAAK,KAAI,IAAI,CAACL,IAAK,GAAE;IACvC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,OAAO,CAACF,IAAI,EAAEC,IAAI,EAAE;EAC3B,IAAI,EAAED,IAAI,IAAIP,UAAU,CAAC,EAAE,MAAM,IAAIU,KAAK,CAAC,gDAAgD,CAAC;EAC5F,MAAMG,GAAG,GAAGX,QAAQ,CAACK,IAAI,CAAC;EAC1B,IAAI,CAACM,GAAG,EAAE,MAAM,IAAIH,KAAK,CAAE,0CAAyCH,IAAK,GAAE,CAAC;EAC5E,IAAI,OAAOM,GAAG,KAAK,UAAU,EAAE,OAAOA,GAAG,CAAC,GAAGL,IAAI,CAAC;EAClD,IAAI,CAACA,IAAI,EAAEM,MAAM,EAAE,OAAOD,GAAG;EAC7BL,IAAI,CAACO,OAAO,CAACF,GAAG,CAAC;EACjB,OAAOG,MAAM,CAAC,GAAGR,IAAI,CAAC;AACxB;AAEAS,MAAM,CAACC,OAAO,GAAG;EACfb,cAAc,EAAEF,kBAAkB,CAACO,KAAK,CAAC;EACzCS,kBAAkB,EAAEhB,kBAAkB,CAACiB,SAAS,CAAC;EACjDC,mBAAmB,EAAElB,kBAAkB,CAACmB,UAAU;AACpD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}