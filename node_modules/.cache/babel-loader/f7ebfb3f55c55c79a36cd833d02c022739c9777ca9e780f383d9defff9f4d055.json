{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass PermissionsBitField extends BitField {\n  /**\n   * Numeric permission flags.\n   * @type {PermissionFlagsBits}\n   * @memberof PermissionsBitField\n   * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}\n   */\n  static Flags = PermissionFlagsBits;\n\n  /**\n   * Bitfield representing every permission combined\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static All = Object.values(PermissionFlagsBits).reduce((all, p) => all | p, 0n);\n\n  /**\n   * Bitfield representing the default permissions for users\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static Default = BigInt(104324673);\n\n  /**\n   * Bitfield representing the permissions required for moderators of stage channels\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static StageModerator = PermissionFlagsBits.ManageChannels | PermissionFlagsBits.MuteMembers | PermissionFlagsBits.MoveMembers;\n\n  /**\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   * @private\n   */\n  static DefaultBit = BigInt(0);\n\n  /**\n   * Bitfield of the packed bits\n   * @type {bigint}\n   * @name PermissionsBitField#bitfield\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link PermissionsBitField.Flags})\n   * * A permission number\n   * * An instance of {@link PermissionsBitField}\n   * * An Array of PermissionResolvable\n   * @typedef {string|bigint|PermissionsBitField|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {string[]}\n   */\n  missing(bits) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && this.has(PermissionFlagsBits.Administrator) ? [] : super.missing(bits);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(PermissionFlagsBits.Administrator) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(PermissionFlagsBits.Administrator) || super.has(permission);\n  }\n\n  /**\n   * Gets an {@link Array} of bitfield names based on the permissions available.\n   * @returns {string[]}\n   */\n  toArray() {\n    return super.toArray(false);\n  }\n}\nmodule.exports = PermissionsBitField;","map":{"version":3,"names":["PermissionFlagsBits","require","BitField","PermissionsBitField","Flags","All","Object","values","reduce","all","p","Default","BigInt","StageModerator","ManageChannels","MuteMembers","MoveMembers","DefaultBit","missing","bits","checkAdmin","has","Administrator","any","permission","toArray","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/PermissionsBitField.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass PermissionsBitField extends BitField {\n  /**\n   * Numeric permission flags.\n   * @type {PermissionFlagsBits}\n   * @memberof PermissionsBitField\n   * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}\n   */\n  static Flags = PermissionFlagsBits;\n\n  /**\n   * Bitfield representing every permission combined\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static All = Object.values(PermissionFlagsBits).reduce((all, p) => all | p, 0n);\n\n  /**\n   * Bitfield representing the default permissions for users\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static Default = BigInt(104324673);\n\n  /**\n   * Bitfield representing the permissions required for moderators of stage channels\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static StageModerator =\n    PermissionFlagsBits.ManageChannels | PermissionFlagsBits.MuteMembers | PermissionFlagsBits.MoveMembers;\n\n  /**\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   * @private\n   */\n  static DefaultBit = BigInt(0);\n\n  /**\n   * Bitfield of the packed bits\n   * @type {bigint}\n   * @name PermissionsBitField#bitfield\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link PermissionsBitField.Flags})\n   * * A permission number\n   * * An instance of {@link PermissionsBitField}\n   * * An Array of PermissionResolvable\n   * @typedef {string|bigint|PermissionsBitField|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {string[]}\n   */\n  missing(bits, checkAdmin = true) {\n    return checkAdmin && this.has(PermissionFlagsBits.Administrator) ? [] : super.missing(bits);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.has(permission);\n  }\n\n  /**\n   * Gets an {@link Array} of bitfield names based on the permissions available.\n   * @returns {string[]}\n   */\n  toArray() {\n    return super.toArray(false);\n  }\n}\n\nmodule.exports = PermissionsBitField;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAoB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAChE,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,mBAAmB,SAASD,QAAQ,CAAC;EACzC;AACF;AACA;AACA;AACA;AACA;EACE,OAAOE,KAAK,GAAGJ,mBAAmB;;EAElC;AACF;AACA;AACA;AACA;EACE,OAAOK,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACP,mBAAmB,CAAC,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,EAAE,EAAE,CAAC;;EAE/E;AACF;AACA;AACA;AACA;EACE,OAAOC,OAAO,GAAGC,MAAM,CAAC,SAAS,CAAC;;EAElC;AACF;AACA;AACA;AACA;EACE,OAAOC,cAAc,GACnBb,mBAAmB,CAACc,cAAc,GAAGd,mBAAmB,CAACe,WAAW,GAAGf,mBAAmB,CAACgB,WAAW;;EAExG;AACF;AACA;AACA;AACA;EACE,OAAOC,UAAU,GAAGL,MAAM,CAAC,CAAC,CAAC;;EAE7B;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACEM,OAAO,CAACC,IAAI,EAAqB;IAAA,IAAnBC,UAAU,uEAAG,IAAI;IAC7B,OAAOA,UAAU,IAAI,IAAI,CAACC,GAAG,CAACrB,mBAAmB,CAACsB,aAAa,CAAC,GAAG,EAAE,GAAG,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;EAC7F;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEI,GAAG,CAACC,UAAU,EAAqB;IAAA,IAAnBJ,UAAU,uEAAG,IAAI;IAC/B,OAAQA,UAAU,IAAI,KAAK,CAACC,GAAG,CAACrB,mBAAmB,CAACsB,aAAa,CAAC,IAAK,KAAK,CAACC,GAAG,CAACC,UAAU,CAAC;EAC9F;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEH,GAAG,CAACG,UAAU,EAAqB;IAAA,IAAnBJ,UAAU,uEAAG,IAAI;IAC/B,OAAQA,UAAU,IAAI,KAAK,CAACC,GAAG,CAACrB,mBAAmB,CAACsB,aAAa,CAAC,IAAK,KAAK,CAACD,GAAG,CAACG,UAAU,CAAC;EAC9F;;EAEA;AACF;AACA;AACA;EACEC,OAAO,GAAG;IACR,OAAO,KAAK,CAACA,OAAO,CAAC,KAAK,CAAC;EAC7B;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGxB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}