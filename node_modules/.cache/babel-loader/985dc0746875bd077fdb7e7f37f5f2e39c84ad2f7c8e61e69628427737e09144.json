{"ast":null,"code":"'use strict';\n\nconst {\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\nconst GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\n\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\nclass GuildEmoji extends BaseGuildEmoji {\n  constructor(client, data, guild) {\n    super(client, data, guild);\n\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n    this.author = null;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name GuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', {\n      value: [],\n      writable: true\n    });\n    this._patch(data);\n  }\n\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n  _patch(data) {\n    super._patch(data);\n    if (data.user) this.author = this.client.users._add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);\n  }\n\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  fetchAuthor() {\n    return this.guild.emojis.fetchAuthor(this);\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   * @property {string} [reason] Reason for editing this emoji\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.emojis.edit(this.id, data);\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async delete(reason) {\n    await this.guild.emojis.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return other.id === this.id && other.name === this.name && other.managed === this.managed && other.available === this.available && other.requiresColons === this.requiresColons && other.roles.cache.size === this.roles.cache.size && other.roles.cache.every(role => this.roles.cache.has(role.id));\n    } else {\n      return other.id === this.id && other.name === this.name && other.roles.length === this.roles.cache.size && other.roles.every(role => this.roles.cache.has(role));\n    }\n  }\n}\nmodule.exports = GuildEmoji;","map":{"version":3,"names":["PermissionFlagsBits","require","BaseGuildEmoji","DiscordjsError","ErrorCodes","GuildEmojiRoleManager","GuildEmoji","constructor","client","data","guild","author","Object","defineProperty","value","writable","_patch","_clone","clone","_roles","slice","user","users","_add","roles","deletable","members","me","GuildUncachedMe","managed","permissions","has","ManageEmojisAndStickers","fetchAuthor","emojis","edit","id","setName","name","reason","delete","equals","other","available","requiresColons","cache","size","every","role","length","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildEmoji.js"],"sourcesContent":["'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\n\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\nclass GuildEmoji extends BaseGuildEmoji {\n  constructor(client, data, guild) {\n    super(client, data, guild);\n\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n    this.author = null;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name GuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n\n    this._patch(data);\n  }\n\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.user) this.author = this.client.users._add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);\n  }\n\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  fetchAuthor() {\n    return this.guild.emojis.fetchAuthor(this);\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   * @property {string} [reason] Reason for editing this emoji\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.guild.emojis.edit(this.id, data);\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async delete(reason) {\n    await this.guild.emojis.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.available === this.available &&\n        other.requiresColons === this.requiresColons &&\n        other.roles.cache.size === this.roles.cache.size &&\n        other.roles.cache.every(role => this.roles.cache.has(role.id))\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.roles.length === this.roles.cache.size &&\n        other.roles.every(role => this.roles.cache.has(role))\n      );\n    }\n  }\n}\n\nmodule.exports = GuildEmoji;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}