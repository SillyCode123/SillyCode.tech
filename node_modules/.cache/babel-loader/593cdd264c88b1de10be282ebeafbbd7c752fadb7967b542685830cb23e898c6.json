{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst MessagePayload = require('../structures/MessagePayload');\n\n/**\n * Manages API methods for threads in forum channels and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildForumThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildForumThreadManager#channel\n   * @type {ForumChannel}\n   */\n\n  /**\n   * @typedef {BaseMessageOptions} GuildForumThreadMessageCreateOptions\n   * @property {stickers} [stickers] The stickers to send with the message\n   * @property {BitFieldResolvable} [flags] The flags to send with the message\n   */\n\n  /**\n   * Options for creating a thread.\n   * @typedef {StartThreadOptions} GuildForumThreadCreateOptions\n   * @property {GuildForumThreadMessageCreateOptions|MessagePayload} message The message associated with the thread post\n   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {GuildForumThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new forum post\n   * forum.threads\n   *   .create({\n   *     name: 'Food Talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     message: {\n   *      content: 'Discuss your favorite food!',\n   *     },\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create() {\n    let {\n      name,\n      autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n      message,\n      reason,\n      rateLimitPerUser,\n      appliedTags\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!message) {\n      throw new DiscordjsTypeError(ErrorCodes.GuildForumMessageRequired);\n    }\n    const {\n      body,\n      files\n    } = await (message instanceof MessagePayload ? message : MessagePayload.create(this, message)).resolveBody().resolveFiles();\n    const data = await this.client.rest.post(Routes.threads(this.channel.id), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        rate_limit_per_user: rateLimitPerUser,\n        applied_tags: appliedTags,\n        message: body\n      },\n      files,\n      reason\n    });\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\nmodule.exports = GuildForumThreadManager;","map":{"version":3,"names":["Routes","require","ThreadManager","DiscordjsTypeError","ErrorCodes","MessagePayload","GuildForumThreadManager","create","name","autoArchiveDuration","channel","defaultAutoArchiveDuration","message","reason","rateLimitPerUser","appliedTags","GuildForumMessageRequired","body","files","resolveBody","resolveFiles","data","client","rest","post","threads","id","auto_archive_duration","rate_limit_per_user","applied_tags","actions","ThreadCreate","handle","thread","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/GuildForumThreadManager.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst MessagePayload = require('../structures/MessagePayload');\n\n/**\n * Manages API methods for threads in forum channels and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildForumThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildForumThreadManager#channel\n   * @type {ForumChannel}\n   */\n\n  /**\n   * @typedef {BaseMessageOptions} GuildForumThreadMessageCreateOptions\n   * @property {stickers} [stickers] The stickers to send with the message\n   * @property {BitFieldResolvable} [flags] The flags to send with the message\n   */\n\n  /**\n   * Options for creating a thread.\n   * @typedef {StartThreadOptions} GuildForumThreadCreateOptions\n   * @property {GuildForumThreadMessageCreateOptions|MessagePayload} message The message associated with the thread post\n   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {GuildForumThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new forum post\n   * forum.threads\n   *   .create({\n   *     name: 'Food Talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     message: {\n   *      content: 'Discuss your favorite food!',\n   *     },\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create({\n    name,\n    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n    message,\n    reason,\n    rateLimitPerUser,\n    appliedTags,\n  } = {}) {\n    if (!message) {\n      throw new DiscordjsTypeError(ErrorCodes.GuildForumMessageRequired);\n    }\n\n    const { body, files } = await (message instanceof MessagePayload ? message : MessagePayload.create(this, message))\n      .resolveBody()\n      .resolveFiles();\n\n    const data = await this.client.rest.post(Routes.threads(this.channel.id), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        rate_limit_per_user: rateLimitPerUser,\n        applied_tags: appliedTags,\n        message: body,\n      },\n      files,\n      reason,\n    });\n\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\n\nmodule.exports = GuildForumThreadManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAM;EAAEE,kBAAkB;EAAEC;AAAW,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;AAC/D,MAAMI,cAAc,GAAGJ,OAAO,CAAC,8BAA8B,CAAC;;AAE9D;AACA;AACA;AACA;AACA,MAAMK,uBAAuB,SAASJ,aAAa,CAAC;EAClD;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMK,MAAM,GAOJ;IAAA,IAPK;MACXC,IAAI;MACJC,mBAAmB,GAAG,IAAI,CAACC,OAAO,CAACC,0BAA0B;MAC7DC,OAAO;MACPC,MAAM;MACNC,gBAAgB;MAChBC;IACF,CAAC,uEAAG,CAAC,CAAC;IACJ,IAAI,CAACH,OAAO,EAAE;MACZ,MAAM,IAAIT,kBAAkB,CAACC,UAAU,CAACY,yBAAyB,CAAC;IACpE;IAEA,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAM,CAACN,OAAO,YAAYP,cAAc,GAAGO,OAAO,GAAGP,cAAc,CAACE,MAAM,CAAC,IAAI,EAAEK,OAAO,CAAC,EAC9GO,WAAW,EAAE,CACbC,YAAY,EAAE;IAEjB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAACxB,MAAM,CAACyB,OAAO,CAAC,IAAI,CAACf,OAAO,CAACgB,EAAE,CAAC,EAAE;MACxET,IAAI,EAAE;QACJT,IAAI;QACJmB,qBAAqB,EAAElB,mBAAmB;QAC1CmB,mBAAmB,EAAEd,gBAAgB;QACrCe,YAAY,EAAEd,WAAW;QACzBH,OAAO,EAAEK;MACX,CAAC;MACDC,KAAK;MACLL;IACF,CAAC,CAAC;IAEF,OAAO,IAAI,CAACS,MAAM,CAACQ,OAAO,CAACC,YAAY,CAACC,MAAM,CAACX,IAAI,CAAC,CAACY,MAAM;EAC7D;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG7B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}