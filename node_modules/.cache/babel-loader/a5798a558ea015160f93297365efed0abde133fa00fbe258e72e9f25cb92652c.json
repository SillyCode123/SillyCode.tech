{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {Snowflake|string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n * The type of an {@link Integration}. This can be:\n * * `twitch`\n * * `youtube`\n * * `discord`\n * @typedef {string} IntegrationType\n */\n\n/**\n * Represents a guild integration.\n * @extends {Base}\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake|string}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type\n     * @type {IntegrationType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {?boolean}\n     */\n    this.enabled = data.enabled ?? null;\n    if ('syncing' in data) {\n      /**\n       * Whether this integration is syncing\n       * @type {?boolean}\n       */\n      this.syncing = data.syncing;\n    } else {\n      this.syncing ??= null;\n    }\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {?Role}\n     */\n    this.role = this.guild.roles.resolve(data.role_id);\n    if ('enable_emoticons' in data) {\n      /**\n       * Whether emoticons should be synced for this integration (twitch only currently)\n       * @type {?boolean}\n       */\n      this.enableEmoticons = data.enable_emoticons;\n    } else {\n      this.enableEmoticons ??= null;\n    }\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user);\n    } else {\n      this.user ??= null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n    if ('synced_at' in data) {\n      /**\n       * The timestamp at which this integration was last synced at\n       * @type {?number}\n       */\n      this.syncedTimestamp = Date.parse(data.synced_at);\n    } else {\n      this.syncedTimestamp ??= null;\n    }\n    if ('subscriber_count' in data) {\n      /**\n       * How many subscribers this integration has\n       * @type {?number}\n       */\n      this.subscriberCount = data.subscriber_count;\n    } else {\n      this.subscriberCount ??= null;\n    }\n    if ('revoked' in data) {\n      /**\n       * Whether this integration has been revoked\n       * @type {?boolean}\n       */\n      this.revoked = data.revoked;\n    } else {\n      this.revoked ??= null;\n    }\n    this._patch(data);\n  }\n\n  /**\n   * The date at which this integration was last synced at\n   * @type {?Date}\n   * @readonly\n   */\n  get syncedAt() {\n    return this.syncedTimestamp && new Date(this.syncedTimestamp);\n  }\n\n  /**\n   * All roles that are managed by this integration\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = this.guild.roles.cache;\n    return roles.filter(role => role.tags?.integrationId === this.id);\n  }\n  _patch(data) {\n    if ('expire_behavior' in data) {\n      /**\n       * The behavior of expiring subscribers\n       * @type {?IntegrationExpireBehavior}\n       */\n      this.expireBehavior = data.expire_behavior;\n    } else {\n      this.expireBehavior ??= null;\n    }\n    if ('expire_grace_period' in data) {\n      /**\n       * The grace period (in days) before expiring subscribers\n       * @type {?number}\n       */\n      this.expireGracePeriod = data.expire_grace_period;\n    } else {\n      this.expireGracePeriod ??= null;\n    }\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else {\n      this.application ??= null;\n    }\n    if ('scopes' in data) {\n      /**\n       * The scopes this application has been authorized for\n       * @type {OAuth2Scopes[]}\n       */\n      this.scopes = data.scopes;\n    } else {\n      this.scopes ??= [];\n    }\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.guildIntegration(this.guild.id, this.id), {\n      reason\n    });\n    return this;\n  }\n  toJSON() {\n    return super.toJSON({\n      role: 'roleId',\n      guild: 'guildId',\n      user: 'userId'\n    });\n  }\n}\nmodule.exports = Integration;","map":{"version":3,"names":["Routes","require","Base","IntegrationApplication","Integration","constructor","client","data","guild","id","name","type","enabled","syncing","role","roles","resolve","role_id","enableEmoticons","enable_emoticons","user","users","_add","account","syncedTimestamp","Date","parse","synced_at","subscriberCount","subscriber_count","revoked","_patch","syncedAt","cache","filter","tags","integrationId","expireBehavior","expire_behavior","expireGracePeriod","expire_grace_period","application","scopes","delete","reason","rest","guildIntegration","toJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/Integration.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {Snowflake|string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n * The type of an {@link Integration}. This can be:\n * * `twitch`\n * * `youtube`\n * * `discord`\n * @typedef {string} IntegrationType\n */\n\n/**\n * Represents a guild integration.\n * @extends {Base}\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake|string}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type\n     * @type {IntegrationType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {?boolean}\n     */\n    this.enabled = data.enabled ?? null;\n\n    if ('syncing' in data) {\n      /**\n       * Whether this integration is syncing\n       * @type {?boolean}\n       */\n      this.syncing = data.syncing;\n    } else {\n      this.syncing ??= null;\n    }\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {?Role}\n     */\n    this.role = this.guild.roles.resolve(data.role_id);\n\n    if ('enable_emoticons' in data) {\n      /**\n       * Whether emoticons should be synced for this integration (twitch only currently)\n       * @type {?boolean}\n       */\n      this.enableEmoticons = data.enable_emoticons;\n    } else {\n      this.enableEmoticons ??= null;\n    }\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user);\n    } else {\n      this.user ??= null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    if ('synced_at' in data) {\n      /**\n       * The timestamp at which this integration was last synced at\n       * @type {?number}\n       */\n      this.syncedTimestamp = Date.parse(data.synced_at);\n    } else {\n      this.syncedTimestamp ??= null;\n    }\n\n    if ('subscriber_count' in data) {\n      /**\n       * How many subscribers this integration has\n       * @type {?number}\n       */\n      this.subscriberCount = data.subscriber_count;\n    } else {\n      this.subscriberCount ??= null;\n    }\n\n    if ('revoked' in data) {\n      /**\n       * Whether this integration has been revoked\n       * @type {?boolean}\n       */\n      this.revoked = data.revoked;\n    } else {\n      this.revoked ??= null;\n    }\n\n    this._patch(data);\n  }\n\n  /**\n   * The date at which this integration was last synced at\n   * @type {?Date}\n   * @readonly\n   */\n  get syncedAt() {\n    return this.syncedTimestamp && new Date(this.syncedTimestamp);\n  }\n\n  /**\n   * All roles that are managed by this integration\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = this.guild.roles.cache;\n    return roles.filter(role => role.tags?.integrationId === this.id);\n  }\n\n  _patch(data) {\n    if ('expire_behavior' in data) {\n      /**\n       * The behavior of expiring subscribers\n       * @type {?IntegrationExpireBehavior}\n       */\n      this.expireBehavior = data.expire_behavior;\n    } else {\n      this.expireBehavior ??= null;\n    }\n\n    if ('expire_grace_period' in data) {\n      /**\n       * The grace period (in days) before expiring subscribers\n       * @type {?number}\n       */\n      this.expireGracePeriod = data.expire_grace_period;\n    } else {\n      this.expireGracePeriod ??= null;\n    }\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else {\n      this.application ??= null;\n    }\n\n    if ('scopes' in data) {\n      /**\n       * The scopes this application has been authorized for\n       * @type {OAuth2Scopes[]}\n       */\n      this.scopes = data.scopes;\n    } else {\n      this.scopes ??= [];\n    }\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.guildIntegration(this.guild.id, this.id), { reason });\n    return this;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleId',\n      guild: 'guildId',\n      user: 'userId',\n    });\n  }\n}\n\nmodule.exports = Integration;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}