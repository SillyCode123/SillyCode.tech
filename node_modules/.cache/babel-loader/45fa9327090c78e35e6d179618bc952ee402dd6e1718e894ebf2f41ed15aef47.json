{"ast":null,"code":"'use strict';\n\nconst {\n  lazy\n} = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a message component interaction.\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass MessageComponentInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name MessageComponentInteraction#channelId\n     */\n\n    /**\n     * The message to which the component was attached\n     * @type {Message}\n     */\n    this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(client, data.message);\n\n    /**\n     * The custom id of the component which was interacted with\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    /**\n     * The type of component which was interacted with\n     * @type {ComponentType}\n     */\n    this.componentType = data.data.component_type;\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Components that can be placed in an action row for messages.\n   * * ButtonComponent\n   * * StringSelectMenuComponent\n   * * UserSelectMenuComponent\n   * * RoleSelectMenuComponent\n   * * MentionableSelectMenuComponent\n   * * ChannelSelectMenuComponent\n   * @typedef {ButtonComponent|StringSelectMenuComponent|UserSelectMenuComponent|\n   * RoleSelectMenuComponent|MentionableSelectMenuComponent|ChannelSelectMenuComponent} MessageActionRowComponent\n   */\n\n  /**\n   * The component which was interacted with\n   * @type {MessageActionRowComponent|APIMessageActionRowComponent}\n   * @readonly\n   */\n  get component() {\n    return this.message.components.flatMap(row => row.components).find(component => (component.customId ?? component.custom_id) === this.customId);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n  showModal() {}\n  awaitModalSubmit() {}\n}\nInteractionResponses.applyToClass(MessageComponentInteraction);\nmodule.exports = MessageComponentInteraction;","map":{"version":3,"names":["lazy","require","BaseInteraction","InteractionWebhook","InteractionResponses","getMessage","Message","MessageComponentInteraction","constructor","client","data","message","channel","messages","_add","customId","custom_id","componentType","component_type","deferred","ephemeral","replied","webhook","applicationId","token","component","components","flatMap","row","find","deferReply","reply","fetchReply","editReply","deleteReply","followUp","deferUpdate","update","showModal","awaitModalSubmit","applyToClass","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/MessageComponentInteraction.js"],"sourcesContent":["'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a message component interaction.\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass MessageComponentInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name MessageComponentInteraction#channelId\n     */\n\n    /**\n     * The message to which the component was attached\n     * @type {Message}\n     */\n    this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(client, data.message);\n\n    /**\n     * The custom id of the component which was interacted with\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    /**\n     * The type of component which was interacted with\n     * @type {ComponentType}\n     */\n    this.componentType = data.data.component_type;\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Components that can be placed in an action row for messages.\n   * * ButtonComponent\n   * * StringSelectMenuComponent\n   * * UserSelectMenuComponent\n   * * RoleSelectMenuComponent\n   * * MentionableSelectMenuComponent\n   * * ChannelSelectMenuComponent\n   * @typedef {ButtonComponent|StringSelectMenuComponent|UserSelectMenuComponent|\n   * RoleSelectMenuComponent|MentionableSelectMenuComponent|ChannelSelectMenuComponent} MessageActionRowComponent\n   */\n\n  /**\n   * The component which was interacted with\n   * @type {MessageActionRowComponent|APIMessageActionRowComponent}\n   * @readonly\n   */\n  get component() {\n    return this.message.components\n      .flatMap(row => row.components)\n      .find(component => (component.customId ?? component.custom_id) === this.customId);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n  showModal() {}\n  awaitModalSubmit() {}\n}\n\nInteractionResponses.applyToClass(MessageComponentInteraction);\n\nmodule.exports = MessageComponentInteraction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,mCAAmC,CAAC;AAEzE,MAAMI,UAAU,GAAGL,IAAI,CAAC,MAAMC,OAAO,CAAC,WAAW,CAAC,CAACK,OAAO,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,SAASL,eAAe,CAAC;EACxDM,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;;IAEnB;AACJ;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,EAAEC,QAAQ,CAACC,IAAI,CAACJ,IAAI,CAACC,OAAO,CAAC,IAAI,KAAKN,UAAU,EAAE,EAAEI,MAAM,EAAEC,IAAI,CAACC,OAAO,CAAC;;IAEpG;AACJ;AACA;AACA;IACI,IAAI,CAACI,QAAQ,GAAGL,IAAI,CAACA,IAAI,CAACM,SAAS;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,GAAGP,IAAI,CAACA,IAAI,CAACQ,cAAc;;IAE7C;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,KAAK;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,KAAK;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAInB,kBAAkB,CAAC,IAAI,CAACM,MAAM,EAAE,IAAI,CAACc,aAAa,EAAE,IAAI,CAACC,KAAK,CAAC;EACpF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACE,IAAIC,SAAS,GAAG;IACd,OAAO,IAAI,CAACd,OAAO,CAACe,UAAU,CAC3BC,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACF,UAAU,CAAC,CAC9BG,IAAI,CAACJ,SAAS,IAAI,CAACA,SAAS,CAACV,QAAQ,IAAIU,SAAS,CAACT,SAAS,MAAM,IAAI,CAACD,QAAQ,CAAC;EACrF;;EAEA;EACA;EACAe,UAAU,GAAG,CAAC;EACdC,KAAK,GAAG,CAAC;EACTC,UAAU,GAAG,CAAC;EACdC,SAAS,GAAG,CAAC;EACbC,WAAW,GAAG,CAAC;EACfC,QAAQ,GAAG,CAAC;EACZC,WAAW,GAAG,CAAC;EACfC,MAAM,GAAG,CAAC;EACVC,SAAS,GAAG,CAAC;EACbC,gBAAgB,GAAG,CAAC;AACtB;AAEAnC,oBAAoB,CAACoC,YAAY,CAACjC,2BAA2B,CAAC;AAE9DkC,MAAM,CAACC,OAAO,GAAGnC,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}