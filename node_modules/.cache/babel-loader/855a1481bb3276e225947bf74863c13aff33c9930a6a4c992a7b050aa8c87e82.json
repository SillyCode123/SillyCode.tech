{"ast":null,"code":"'use strict';\n\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\n/**\n * Represents a command interaction.\n * @extends {CommandInteraction}\n */\nclass ChatInputCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The options passed to the command.\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [], this.transformResolved(data.data.resolved ?? {}));\n  }\n\n  /**\n   * Returns a string representation of the command interaction.\n   * This can then be copied by a user and executed again in a new command while keeping the option order.\n   * @returns {string}\n   */\n  toString() {\n    const properties = [this.commandName, this.options._group, this.options._subcommand, ...this.options._hoistedOptions.map(o => `${o.name}:${o.value}`)];\n    return `/${properties.filter(Boolean).join(' ')}`;\n  }\n}\nmodule.exports = ChatInputCommandInteraction;","map":{"version":3,"names":["CommandInteraction","require","CommandInteractionOptionResolver","ChatInputCommandInteraction","constructor","client","data","options","map","option","transformOption","resolved","transformResolved","toString","properties","commandName","_group","_subcommand","_hoistedOptions","o","name","value","filter","Boolean","join","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ChatInputCommandInteraction.js"],"sourcesContent":["'use strict';\n\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\n/**\n * Represents a command interaction.\n * @extends {CommandInteraction}\n */\nclass ChatInputCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The options passed to the command.\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [],\n      this.transformResolved(data.data.resolved ?? {}),\n    );\n  }\n\n  /**\n   * Returns a string representation of the command interaction.\n   * This can then be copied by a user and executed again in a new command while keeping the option order.\n   * @returns {string}\n   */\n  toString() {\n    const properties = [\n      this.commandName,\n      this.options._group,\n      this.options._subcommand,\n      ...this.options._hoistedOptions.map(o => `${o.name}:${o.value}`),\n    ];\n    return `/${properties.filter(Boolean).join(' ')}`;\n  }\n}\n\nmodule.exports = ChatInputCommandInteraction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMC,gCAAgC,GAAGD,OAAO,CAAC,oCAAoC,CAAC;;AAEtF;AACA;AACA;AACA;AACA,MAAME,2BAA2B,SAASH,kBAAkB,CAAC;EAC3DI,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAIL,gCAAgC,CACjD,IAAI,CAACG,MAAM,EACXC,IAAI,CAACA,IAAI,CAACC,OAAO,EAAEC,GAAG,CAACC,MAAM,IAAI,IAAI,CAACC,eAAe,CAACD,MAAM,EAAEH,IAAI,CAACA,IAAI,CAACK,QAAQ,CAAC,CAAC,IAAI,EAAE,EACxF,IAAI,CAACC,iBAAiB,CAACN,IAAI,CAACA,IAAI,CAACK,QAAQ,IAAI,CAAC,CAAC,CAAC,CACjD;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQ,GAAG;IACT,MAAMC,UAAU,GAAG,CACjB,IAAI,CAACC,WAAW,EAChB,IAAI,CAACR,OAAO,CAACS,MAAM,EACnB,IAAI,CAACT,OAAO,CAACU,WAAW,EACxB,GAAG,IAAI,CAACV,OAAO,CAACW,eAAe,CAACV,GAAG,CAACW,CAAC,IAAK,GAAEA,CAAC,CAACC,IAAK,IAAGD,CAAC,CAACE,KAAM,EAAC,CAAC,CACjE;IACD,OAAQ,IAAGP,UAAU,CAACQ,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAE,EAAC;EACnD;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGvB,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}