{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Partials = require('../../util/Partials');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    let fromStructure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!data.emoji) return false;\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel?.isTextBased()) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    const includePartial = this.client.options.partials.includes(Partials.Reaction);\n    if (message.partial && !includePartial) return false;\n    const reaction = message.reactions._add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    if (fromStructure) return {\n      message,\n      reaction,\n      user\n    };\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MessageReactionAdd, reaction, user);\n    return {\n      message,\n      reaction,\n      user\n    };\n  }\n}\nmodule.exports = MessageReactionAdd;","map":{"version":3,"names":["Action","require","Events","Partials","MessageReactionAdd","handle","data","fromStructure","emoji","user","getUserFromMember","channel","getChannel","isTextBased","message","getMessage","includePartial","client","options","partials","includes","Reaction","partial","reaction","reactions","_add","count","me","id","emit","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/MessageReactionAdd.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Partials = require('../../util/Partials');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data, fromStructure = false) {\n    if (!data.emoji) return false;\n\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel?.isTextBased()) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    const includePartial = this.client.options.partials.includes(Partials.Reaction);\n    if (message.partial && !includePartial) return false;\n    const reaction = message.reactions._add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    if (fromStructure) return { message, reaction, user };\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MessageReactionAdd, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC3C,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAqB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,kBAAkB,SAASJ,MAAM,CAAC;EACtCK,MAAM,CAACC,IAAI,EAAyB;IAAA,IAAvBC,aAAa,uEAAG,KAAK;IAChC,IAAI,CAACD,IAAI,CAACE,KAAK,EAAE,OAAO,KAAK;IAE7B,MAAMC,IAAI,GAAG,IAAI,CAACC,iBAAiB,CAACJ,IAAI,CAAC;IACzC,IAAI,CAACG,IAAI,EAAE,OAAO,KAAK;;IAEvB;IACA,MAAME,OAAO,GAAG,IAAI,CAACC,UAAU,CAACN,IAAI,CAAC;IACrC,IAAI,CAACK,OAAO,EAAEE,WAAW,EAAE,EAAE,OAAO,KAAK;;IAEzC;IACA,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACT,IAAI,EAAEK,OAAO,CAAC;IAC9C,IAAI,CAACG,OAAO,EAAE,OAAO,KAAK;;IAE1B;IACA,MAAME,cAAc,GAAG,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAACjB,QAAQ,CAACkB,QAAQ,CAAC;IAC/E,IAAIP,OAAO,CAACQ,OAAO,IAAI,CAACN,cAAc,EAAE,OAAO,KAAK;IACpD,MAAMO,QAAQ,GAAGT,OAAO,CAACU,SAAS,CAACC,IAAI,CAAC;MACtCjB,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBkB,KAAK,EAAEZ,OAAO,CAACQ,OAAO,GAAG,IAAI,GAAG,CAAC;MACjCK,EAAE,EAAElB,IAAI,CAACmB,EAAE,KAAK,IAAI,CAACX,MAAM,CAACR,IAAI,CAACmB;IACnC,CAAC,CAAC;IACF,IAAI,CAACL,QAAQ,EAAE,OAAO,KAAK;IAC3BA,QAAQ,CAACE,IAAI,CAAChB,IAAI,CAAC;IACnB,IAAIF,aAAa,EAAE,OAAO;MAAEO,OAAO;MAAES,QAAQ;MAAEd;IAAK,CAAC;IACrD;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACQ,MAAM,CAACY,IAAI,CAAC3B,MAAM,CAACE,kBAAkB,EAAEmB,QAAQ,EAAEd,IAAI,CAAC;IAE3D,OAAO;MAAEK,OAAO;MAAES,QAAQ;MAAEd;IAAK,CAAC;EACpC;AACF;AAEAqB,MAAM,CAACC,OAAO,GAAG3B,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}