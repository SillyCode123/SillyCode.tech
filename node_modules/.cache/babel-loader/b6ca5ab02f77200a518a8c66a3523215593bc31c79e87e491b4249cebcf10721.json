{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\nconst VoiceState = require('../../structures/VoiceState');\nconst Events = require('../../util/Events');\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      // Update the state\n      const oldState = guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, {\n        user_id: data.user_id\n      });\n      const newState = guild.voiceStates._add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member?.user && data.member.joined_at) {\n        member = guild.members._add(data.member);\n      }\n\n      // Emit event\n      if (member?.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VoiceStateUpdate, oldState, newState);\n    }\n  }\n}\nmodule.exports = VoiceStateUpdate;","map":{"version":3,"names":["Action","require","VoiceState","Events","VoiceStateUpdate","handle","data","client","guild","guilds","cache","get","guild_id","oldState","voiceStates","user_id","_clone","newState","_add","member","members","_patch","user","joined_at","id","emit","JSON","stringify","voice","onVoiceStateUpdate","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/client/actions/VoiceStateUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst VoiceState = require('../../structures/VoiceState');\nconst Events = require('../../util/Events');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      // Update the state\n      const oldState =\n        guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates._add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member?.user && data.member.joined_at) {\n        member = guild.members._add(data.member);\n      }\n\n      // Emit event\n      if (member?.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VoiceStateUpdate, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AACzD,MAAME,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAE3C,MAAMG,gBAAgB,SAASJ,MAAM,CAAC;EACpCK,MAAM,CAACC,IAAI,EAAE;IACX,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAM,CAACC,KAAK,CAACC,GAAG,CAACL,IAAI,CAACM,QAAQ,CAAC;IACpD,IAAIJ,KAAK,EAAE;MACT;MACA,MAAMK,QAAQ,GACZL,KAAK,CAACM,WAAW,CAACJ,KAAK,CAACC,GAAG,CAACL,IAAI,CAACS,OAAO,CAAC,EAAEC,MAAM,EAAE,IAAI,IAAId,UAAU,CAACM,KAAK,EAAE;QAAEO,OAAO,EAAET,IAAI,CAACS;MAAQ,CAAC,CAAC;MAEzG,MAAME,QAAQ,GAAGT,KAAK,CAACM,WAAW,CAACI,IAAI,CAACZ,IAAI,CAAC;;MAE7C;MACA,IAAIa,MAAM,GAAGX,KAAK,CAACY,OAAO,CAACV,KAAK,CAACC,GAAG,CAACL,IAAI,CAACS,OAAO,CAAC;MAClD,IAAII,MAAM,IAAIb,IAAI,CAACa,MAAM,EAAE;QACzBA,MAAM,CAACE,MAAM,CAACf,IAAI,CAACa,MAAM,CAAC;MAC5B,CAAC,MAAM,IAAIb,IAAI,CAACa,MAAM,EAAEG,IAAI,IAAIhB,IAAI,CAACa,MAAM,CAACI,SAAS,EAAE;QACrDJ,MAAM,GAAGX,KAAK,CAACY,OAAO,CAACF,IAAI,CAACZ,IAAI,CAACa,MAAM,CAAC;MAC1C;;MAEA;MACA,IAAIA,MAAM,EAAEG,IAAI,CAACE,EAAE,KAAKjB,MAAM,CAACe,IAAI,CAACE,EAAE,EAAE;QACtCjB,MAAM,CAACkB,IAAI,CAAC,OAAO,EAAG,wCAAuCC,IAAI,CAACC,SAAS,CAACrB,IAAI,CAAE,EAAC,CAAC;QACpFC,MAAM,CAACqB,KAAK,CAACC,kBAAkB,CAACvB,IAAI,CAAC;MACvC;;MAEA;AACN;AACA;AACA;AACA;AACA;MACMC,MAAM,CAACkB,IAAI,CAACtB,MAAM,CAACC,gBAAgB,EAAES,QAAQ,EAAEI,QAAQ,CAAC;IAC1D;EACF;AACF;AAEAa,MAAM,CAACC,OAAO,GAAG3B,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}