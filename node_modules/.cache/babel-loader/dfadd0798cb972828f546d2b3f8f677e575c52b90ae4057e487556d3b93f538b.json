{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlagsBitField = require('../util/ThreadMemberFlagsBitField');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  constructor(thread, data) {\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The flags for this thread member. This will be `null` if partial.\n     * @type {?ThreadMemberFlagsBitField}\n     */\n    this.flags = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);\n    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();\n  }\n\n  /**\n   * Whether this thread member is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.flags === null;\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.thread.guild.members.resolve(this.id);\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\nmodule.exports = ThreadMember;","map":{"version":3,"names":["Base","require","ThreadMemberFlagsBitField","ThreadMember","constructor","thread","data","client","joinedTimestamp","flags","id","user_id","_patch","Date","parse","join_timestamp","freeze","partial","guildMember","guild","members","resolve","joinedAt","user","users","manageable","archived","editable","remove","reason","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/ThreadMember.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlagsBitField = require('../util/ThreadMemberFlagsBitField');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  constructor(thread, data) {\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The flags for this thread member. This will be `null` if partial.\n     * @type {?ThreadMemberFlagsBitField}\n     */\n    this.flags = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);\n    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();\n  }\n\n  /**\n   * Whether this thread member is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.flags === null;\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.thread.guild.members.resolve(this.id);\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = ThreadMember;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,mCAAmC,CAAC;;AAE9E;AACA;AACA;AACA;AACA,MAAME,YAAY,SAASH,IAAI,CAAC;EAC9BI,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAACE,MAAM,CAAC;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACF,MAAM,GAAGA,MAAM;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACG,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAG,IAAI;;IAEjB;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGJ,IAAI,CAACK,OAAO;IAEtB,IAAI,CAACC,MAAM,CAACN,IAAI,CAAC;EACnB;EAEAM,MAAM,CAACN,IAAI,EAAE;IACX,IAAI,gBAAgB,IAAIA,IAAI,EAAE,IAAI,CAACE,eAAe,GAAGK,IAAI,CAACC,KAAK,CAACR,IAAI,CAACS,cAAc,CAAC;IACpF,IAAI,OAAO,IAAIT,IAAI,EAAE,IAAI,CAACG,KAAK,GAAG,IAAIP,yBAAyB,CAACI,IAAI,CAACG,KAAK,CAAC,CAACO,MAAM,EAAE;EACtF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,OAAO,GAAG;IACZ,OAAO,IAAI,CAACR,KAAK,KAAK,IAAI;EAC5B;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIS,WAAW,GAAG;IAChB,OAAO,IAAI,CAACb,MAAM,CAACc,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACX,EAAE,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIY,QAAQ,GAAG;IACb,OAAO,IAAI,CAACd,eAAe,IAAI,IAAIK,IAAI,CAAC,IAAI,CAACL,eAAe,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIe,IAAI,GAAG;IACT,OAAO,IAAI,CAAChB,MAAM,CAACiB,KAAK,CAACH,OAAO,CAAC,IAAI,CAACX,EAAE,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIe,UAAU,GAAG;IACf,OAAO,CAAC,IAAI,CAACpB,MAAM,CAACqB,QAAQ,IAAI,IAAI,CAACrB,MAAM,CAACsB,QAAQ;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,MAAM,CAACC,MAAM,EAAE;IACnB,MAAM,IAAI,CAACxB,MAAM,CAACe,OAAO,CAACQ,MAAM,CAAC,IAAI,CAAClB,EAAE,EAAEmB,MAAM,CAAC;IACjD,OAAO,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG5B,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}