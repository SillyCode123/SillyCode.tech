{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\nconst Queue = require('denque');\nconst Net = require('net');\nconst PacketInputStream = require('./io/packet-input-stream');\nconst PacketOutputStream = require('./io/packet-output-stream');\nconst CompressionInputStream = require('./io/compression-input-stream');\nconst CompressionOutputStream = require('./io/compression-output-stream');\nconst ServerStatus = require('./const/server-status');\nconst ConnectionInformation = require('./misc/connection-information');\nconst tls = require('tls');\nconst Errors = require('./misc/errors');\nconst Utils = require('./misc/utils');\nconst Capabilities = require('./const/capabilities');\n\n/*commands*/\nconst Handshake = require('./cmd/handshake/handshake');\nconst Quit = require('./cmd/quit');\nconst Ping = require('./cmd/ping');\nconst Reset = require('./cmd/reset');\nconst Query = require('./cmd/query');\nconst Prepare = require('./cmd/prepare');\nconst OkPacket = require('./cmd/class/ok-packet');\nconst Execute = require('./cmd/execute');\nconst ClosePrepare = require('./cmd/close-prepare');\nconst BatchBulk = require('./cmd/batch-bulk');\nconst ChangeUser = require('./cmd/change-user');\nconst {\n  Status\n} = require('./const/connection_status');\nconst CommandParameter = require('./command-parameter');\nconst LruPrepareCache = require('./lru-prepare-cache');\nconst convertFixedTime = function (tz) {\n  if (tz === 'Etc/UTC' || tz === 'Z') {\n    return '+00:00';\n  } else if (tz.startsWith('Etc/GMT') || tz.startsWith('GMT')) {\n    let tzdiff;\n    let negate;\n\n    // strangely Etc/GMT+8 = GMT-08:00 = offset -8\n    if (tz.startsWith('Etc/GMT')) {\n      tzdiff = tz.substring(7);\n      negate = !tzdiff.startsWith('-');\n    } else {\n      tzdiff = tz.substring(3);\n      negate = tzdiff.startsWith('-');\n    }\n    let diff = parseInt(tzdiff.substring(1));\n    if (isNaN(diff)) {\n      throw Errors.createFatalError(`Automatic timezone setting fails. wrong Server timezone '${tz}' conversion to +/-HH:00 conversion.`, Errors.ER_WRONG_AUTO_TIMEZONE, this.info);\n    }\n    return (negate ? '-' : '+') + (diff >= 10 ? diff : '0' + diff) + ':00';\n  }\n  return tz;\n};\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass Connection extends EventEmitter {\n  opts;\n  sendQueue = new Queue();\n  receiveQueue = new Queue();\n  waitingAuthenticationQueue = new Queue();\n  status = Status.NOT_CONNECTED;\n  socket = null;\n  timeout = null;\n  addCommand;\n  streamOut;\n  streamIn;\n  info;\n  prepareCache;\n  constructor(options) {\n    super();\n    this.opts = Object.assign(new EventEmitter(), options);\n    this.info = new ConnectionInformation(this.opts);\n    this.prepareCache = this.opts.prepareCacheLength > 0 ? new LruPrepareCache(this.info, this.opts.prepareCacheLength) : null;\n    this.addCommand = this.addCommandQueue;\n    this.streamOut = new PacketOutputStream(this.opts, this.info);\n    this.streamIn = new PacketInputStream(this.unexpectedPacket.bind(this), this.receiveQueue, this.streamOut, this.opts, this.info);\n    this.on('close_prepare', this._closePrepare.bind(this));\n    this.escape = Utils.escape.bind(this, this.opts, this.info);\n    this.escapeId = Utils.escapeId.bind(this, this.opts, this.info);\n  }\n\n  //*****************************************************************\n  // public methods\n  //*****************************************************************\n\n  /**\n   * Connect event\n   *\n   * @returns {Promise} promise\n   */\n  connect() {\n    const conn = this;\n    this.status = Status.CONNECTING;\n    const handshakeParam = new CommandParameter(null, null, this.opts, null);\n    return new Promise(function (resolve, reject) {\n      conn.connectRejectFct = reject;\n      conn.connectResolveFct = resolve;\n      // add a handshake to msg queue\n      const handshake = new Handshake(handshakeParam, conn.authSucceedHandler.bind(conn), conn.authFailHandler.bind(conn), conn.createSecureContext.bind(conn), conn.addCommandEnable.bind(conn), conn.getSocket.bind(conn));\n      Error.captureStackTrace(handshake);\n      handshake.once('end', () => {\n        // conn.info.collation might not be initialized\n        // in case of handshake throwing error\n        if (!conn.opts.collation && conn.info.collation) {\n          conn.opts.emit('collation', conn.info.collation);\n        }\n        process.nextTick(conn.nextSendCmd.bind(conn));\n      });\n      conn.receiveQueue.push(handshake);\n      conn.streamInitSocket.call(conn);\n    });\n  }\n  executePromise(cmdParam, prepare, resolve, reject) {\n    const cmd = new Execute(resolve, this._logAndReject.bind(this, reject), this.opts, cmdParam, prepare);\n    this.addCommand(cmd);\n  }\n  batch(cmdParam) {\n    if (!cmdParam.sql) {\n      const err = Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000', null, false, cmdParam.stack);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    if (!cmdParam.values) {\n      const err = Errors.createError('Batch must have values set', Errors.ER_BATCH_WITH_NO_VALUES, this.info, 'HY000', cmdParam.sql, false, cmdParam.stack);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    return new Promise(this.prepare.bind(this, cmdParam)).then(prepare => {\n      const usePlaceHolder = cmdParam.opts && cmdParam.opts.namedPlaceholders || this.opts.namedPlaceholders;\n      let vals;\n      if (Array.isArray(cmdParam.values)) {\n        if (usePlaceHolder) {\n          vals = cmdParam.values;\n        } else if (Array.isArray(cmdParam.values[0])) {\n          vals = cmdParam.values;\n        } else if (prepare.parameterCount === 1) {\n          vals = [];\n          for (let i = 0; i < cmdParam.values.length; i++) {\n            vals.push([cmdParam.values[i]]);\n          }\n        } else {\n          vals = [cmdParam.values];\n        }\n      } else {\n        vals = [[cmdParam.values]];\n      }\n      cmdParam.values = vals;\n      let useBulk = this._canUseBulk(vals, cmdParam.opts);\n      if (useBulk) {\n        return new Promise(this.executeBulkPromise.bind(this, cmdParam, prepare, this.opts));\n      } else {\n        const executes = [];\n        const cmdOpt = Object.assign({}, this.opts, cmdParam.opts);\n        for (let i = 0; i < vals.length; i++) {\n          executes.push(prepare.execute(vals[i], cmdParam.opts, null, cmdParam.stack));\n        }\n        return Promise.all(executes).then(function (res) {\n          if (cmdParam.opts && cmdParam.opts.fullResult) {\n            return Promise.resolve(res);\n          } else {\n            // aggregate results\n            let firstResult = res[0];\n            if (cmdOpt.metaAsArray) firstResult = firstResult[0];\n            if (firstResult instanceof OkPacket) {\n              let affectedRows = 0;\n              const insertId = firstResult.insertId;\n              const warningStatus = firstResult.warningStatus;\n              if (cmdOpt.metaAsArray) {\n                for (let i = 0; i < res.length; i++) {\n                  affectedRows += res[i][0].affectedRows;\n                }\n                return Promise.resolve([new OkPacket(affectedRows, insertId, warningStatus), []]);\n              } else {\n                for (let i = 0; i < res.length; i++) {\n                  affectedRows += res[i].affectedRows;\n                }\n                return Promise.resolve(new OkPacket(affectedRows, insertId, warningStatus));\n              }\n            } else {\n              // results have result-set. example :'INSERT ... RETURNING'\n              // aggregate results\n              if (cmdOpt.metaAsArray) {\n                const rs = [];\n                res.forEach(row => {\n                  rs.push(...row[0]);\n                });\n                return Promise.resolve([rs, res[0][1]]);\n              } else {\n                const rs = [];\n                res.forEach(row => {\n                  rs.push(...row);\n                });\n                Object.defineProperty(rs, 'meta', {\n                  value: res[0].meta,\n                  writable: true,\n                  enumerable: this.opts.metaEnumerable\n                });\n                return Promise.resolve(rs);\n              }\n            }\n          }\n        }.bind(this)).finally(() => prepare.close());\n      }\n    });\n  }\n  executeBulkPromise(cmdParam, prepare, opts, resolve, reject) {\n    const cmd = new BatchBulk(res => {\n      prepare.close();\n      return resolve(res);\n    }, function (err) {\n      prepare.close();\n      if (opts.logger.error) opts.logger.error(err);\n      reject(err);\n    }, opts, prepare, cmdParam);\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param cmdParam command context\n   * @param resolve success function\n   * @param reject rejection function\n   */\n  ping(cmdParam, resolve, reject) {\n    if (cmdParam.opts && cmdParam.opts.timeout) {\n      if (cmdParam.opts.timeout < 0) {\n        const err = Errors.createError('Ping cannot have negative timeout value', Errors.ER_BAD_PARAMETER_VALUE, this.info, '0A000');\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n        return;\n      }\n      let tOut = setTimeout(function () {\n        tOut = undefined;\n        const err = Errors.createFatalError('Ping timeout', Errors.ER_PING_TIMEOUT, this.info, '0A000');\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        // close connection\n        this.addCommand = this.addCommandDisabled;\n        clearTimeout(this.timeout);\n        if (this.status !== Status.CLOSING && this.status !== Status.CLOSED) {\n          this.sendQueue.clear();\n          this.status = Status.CLOSED;\n          this.socket.destroy();\n        }\n        this.clear();\n        reject(err);\n      }.bind(this), cmdParam.opts.timeout);\n      this.addCommand(new Ping(cmdParam, () => {\n        if (tOut) {\n          clearTimeout(tOut);\n          resolve();\n        }\n      }, err => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        clearTimeout(tOut);\n        reject(err);\n      }));\n      return;\n    }\n    this.addCommand(new Ping(cmdParam, resolve, reject));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   */\n  reset(cmdParam, resolve, reject) {\n    if (this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4) || !this.info.isMariaDB() && this.info.hasMinVersion(5, 7, 3)) {\n      const conn = this;\n      const resetCmd = new Reset(cmdParam, () => {\n        conn.prepareCache.reset();\n        let prom = Promise.resolve();\n        // re-execute init query / session query timeout\n        prom.then(conn.handleTimezone.bind(conn)).then(conn.executeInitQuery.bind(conn)).then(conn.executeSessionTimeout.bind(conn)).then(resolve).catch(reject);\n      }, reject);\n      this.addCommand(resetCmd);\n      return;\n    }\n    const err = new Error(`Reset command not permitted for server ${this.info.serverVersion.raw} (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)`);\n    err.stack = cmdParam.stack;\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.status === Status.CONNECTED;\n  }\n\n  /**\n   * Terminate connection gracefully.\n   */\n  end(cmdParam, resolve, reject) {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING && this.status !== Status.NOT_CONNECTED) {\n      this.status = Status.CLOSING;\n      const ended = () => {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.socket.unref();\n        this.clear();\n        this.receiveQueue.clear();\n        resolve();\n      };\n      const quitCmd = new Quit(cmdParam, ended, ended);\n      this.sendQueue.push(quitCmd);\n      this.receiveQueue.push(quitCmd);\n      if (this.sendQueue.length === 1) {\n        process.nextTick(this.nextSendCmd.bind(this));\n      }\n    } else resolve();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING) {\n      this.status = Status.CLOSING;\n      this.sendQueue.clear();\n      if (this.receiveQueue.length > 0) {\n        //socket is closed, but server may still be processing a huge select\n        //only possibility is to kill process by another thread\n        //TODO reuse a pool connection to avoid connection creation\n        const self = this;\n        const killCon = new Connection(this.opts);\n        killCon.connect().then(() => {\n          //*************************************************\n          //kill connection\n          //*************************************************\n          new Promise(killCon.query.bind(killCon, {\n            sql: `KILL ${self.info.threadId}`\n          })).finally(err => {\n            const destroyError = Errors.createFatalError('Connection destroyed, command was killed', Errors.ER_CMD_NOT_EXECUTED_DESTROYED, self.info);\n            if (self.opts.logger.error) self.opts.logger.error(destroyError);\n            self.socketErrorDispatchToQueries(destroyError);\n            if (self.socket) {\n              const sok = self.socket;\n              process.nextTick(() => {\n                sok.destroy();\n              });\n            }\n            self.status = Status.CLOSED;\n            self.clear();\n            new Promise(killCon.end.bind(killCon)).catch(() => {});\n          });\n        }).catch(() => {\n          //*************************************************\n          //failing to create a kill connection, end normally\n          //*************************************************\n          const ended = () => {\n            let sock = self.socket;\n            self.clear();\n            self.status = Status.CLOSED;\n            sock.destroy();\n            self.receiveQueue.clear();\n          };\n          const quitCmd = new Quit(ended, ended);\n          self.sendQueue.push(quitCmd);\n          self.receiveQueue.push(quitCmd);\n          if (self.sendQueue.length === 1) {\n            process.nextTick(self.nextSendCmd.bind(self));\n          }\n        });\n      } else {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.clear();\n      }\n    }\n  }\n  pause() {\n    this.socket.pause();\n  }\n  resume() {\n    this.socket.resume();\n  }\n  format(sql, values) {\n    const err = Errors.createError('\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster', Errors.ER_NOT_IMPLEMENTED_FORMAT, this.info, '0A000');\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    throw err;\n  }\n\n  //*****************************************************************\n  // additional public methods\n  //*****************************************************************\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    if (!this.info.serverVersion) {\n      const err = new Error('cannot know if server information until connection is established');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      throw err;\n    }\n    return this.info.serverVersion.raw;\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    if (typeof val === 'boolean') {\n      if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n    } else if (typeof val === 'function') {\n      this.opts.logger.network = val;\n    }\n    this.opts.emit('debug', val);\n  }\n  debugCompress(val) {\n    if (val) {\n      if (typeof val === 'boolean') {\n        this.opts.debugCompress = val;\n        if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n      } else if (typeof val === 'function') {\n        this.opts.debugCompress = true;\n        this.opts.logger.network = val;\n      }\n    } else this.opts.debugCompress = false;\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return new TestMethods(this.info.collation, this.socket);\n  }\n\n  //*****************************************************************\n  // internal methods\n  //*****************************************************************\n\n  /**\n   * Use multiple COM_STMT_EXECUTE or COM_STMT_BULK_EXECUTE\n   *\n   * @param values current batch values\n   * @param _options batch option\n   * @return {boolean} indicating if can use bulk command\n   */\n  _canUseBulk(values, _options) {\n    if (_options && _options.fullResult) return false;\n    // not using info.isMariaDB() directly in case of callback use,\n    // without connection being completely finished.\n    if (this.info.serverVersion && this.info.serverVersion.mariaDb && this.info.hasMinVersion(10, 2, 7) && this.opts.bulk && (this.info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) > 0n) {\n      //ensure that there is no stream object\n      if (values !== undefined) {\n        if (!this.opts.namedPlaceholders) {\n          //ensure that all parameters have same length\n          //single array is considered as an array of single element.\n          const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n          if (paramLen === 0) return false;\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            if (!Array.isArray(row)) row = [row];\n            if (paramLen !== row.length) {\n              return false;\n            }\n            // streaming data not permitted\n            for (let j = 0; j < paramLen; j++) {\n              const val = row[j];\n              if (val !== null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        } else {\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            const keys = Object.keys(row);\n            for (let j = 0; j < keys.length; j++) {\n              const val = row[keys[j]];\n              if (val !== null && typeof val === 'object' && typeof val.pipe === 'function' && typeof val.read === 'function') {\n                return false;\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  executeSessionVariableQuery() {\n    if (this.opts.sessionVariables) {\n      const values = [];\n      let sessionQuery = 'set ';\n      let keys = Object.keys(this.opts.sessionVariables);\n      if (keys.length > 0) {\n        for (let k = 0; k < keys.length; ++k) {\n          sessionQuery += (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\n          values.push(this.opts.sessionVariables[keys[k]]);\n        }\n        return new Promise(this.query.bind(this, new CommandParameter(sessionQuery, values))).catch(initialErr => {\n          const err = Errors.createFatalError(`Error setting session variable (value ${JSON.stringify(this.opts.sessionVariables)}). Error: ${initialErr.message}`, Errors.ER_SETTING_SESSION_ERROR, this.info, '08S01', sessionQuery);\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        });\n      }\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Asking server timezone if not set in case of 'auto'\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleTimezone() {\n    if (this.opts.timezone === 'local') this.opts.timezone = undefined;\n    if (this.opts.timezone === 'auto') {\n      return new Promise(this.query.bind(this, new CommandParameter('SELECT @@system_time_zone stz, @@time_zone tz'))).then(res => {\n        const serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\n        const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (serverTimezone === localTz || convertFixedTime(serverTimezone) === convertFixedTime(localTz)) {\n          //server timezone is identical to client tz, skipping setting\n          this.opts.timezone = localTz;\n          return Promise.resolve();\n        }\n        return this._setSessionTimezone(convertFixedTime(localTz));\n      });\n    }\n    if (this.opts.timezone) {\n      return this._setSessionTimezone(convertFixedTime(this.opts.timezone));\n    }\n    return Promise.resolve();\n  }\n  _setSessionTimezone(tz) {\n    return new Promise(this.query.bind(this, new CommandParameter('SET time_zone=?', [tz]))).catch(err => {\n      const er = Errors.createFatalError(`setting timezone '${tz}' fails on server.\\n look at https://mariadb.com/kb/en/mysql_tzinfo_to_sql/ to load IANA timezone. `, Errors.ER_WRONG_IANA_TIMEZONE, this.info);\n      if (this.opts.logger.error) this.opts.logger.error(er);\n      return Promise.reject(er);\n    });\n  }\n  checkServerVersion() {\n    if (!this.opts.forceVersionCheck) {\n      return Promise.resolve();\n    }\n    return new Promise(this.query.bind(this, new CommandParameter('SELECT @@VERSION AS v'))).then(function (res) {\n      this.info.serverVersion.raw = res[0].v;\n      this.info.serverVersion.mariaDb = this.info.serverVersion.raw.includes('MariaDB');\n      ConnectionInformation.parseVersionString(this.info);\n      return Promise.resolve();\n    }.bind(this));\n  }\n  executeInitQuery() {\n    if (this.opts.initSql) {\n      const initialArr = Array.isArray(this.opts.initSql) ? this.opts.initSql : [this.opts.initSql];\n      const initialPromises = [];\n      initialArr.forEach(sql => {\n        initialPromises.push(new Promise(this.query.bind(this, new CommandParameter(sql))));\n      });\n      return Promise.all(initialPromises).catch(initialErr => {\n        const err = Errors.createFatalError(`Error executing initial sql command: ${initialErr.message}`, Errors.ER_INITIAL_SQL_ERROR, this.info);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      });\n    }\n    return Promise.resolve();\n  }\n  executeSessionTimeout() {\n    if (this.opts.queryTimeout) {\n      if (this.info.isMariaDB() && this.info.hasMinVersion(10, 1, 2)) {\n        const query = `SET max_statement_time=${this.opts.queryTimeout / 1000}`;\n        new Promise(this.query.bind(this, new CommandParameter(query))).catch(function (initialErr) {\n          const err = Errors.createFatalError(`Error setting session queryTimeout: ${initialErr.message}`, Errors.ER_INITIAL_TIMEOUT_ERROR, this.info, '08S01', query);\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        }.bind(this));\n      } else {\n        const err = Errors.createError(`Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ${this.opts.queryTimeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, this.info, 'HY000', this.opts.queryTimeout);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      }\n    }\n    return Promise.resolve();\n  }\n  getSocket() {\n    return this.socket;\n  }\n\n  /**\n   * Initialize socket and associate events.\n   * @private\n   */\n  streamInitSocket() {\n    if (this.opts.socketPath) {\n      this.socket = Net.connect(this.opts.socketPath);\n    } else if (this.opts.stream) {\n      if (typeof this.opts.stream === 'function') {\n        const tmpSocket = this.opts.stream(function (err, stream) {\n          if (err) {\n            this.authFailHandler(err);\n            return;\n          }\n          this.socket = stream ? stream : Net.connect(this.opts.port, this.opts.host);\n          this.socketInit();\n        }.bind(this));\n        if (tmpSocket) {\n          this.socket = tmpSocket;\n          this.socketInit();\n        }\n      } else {\n        this.authFailHandler(Errors.createError('stream option is not a function. stream must be a function with (error, callback) parameter', Errors.ER_BAD_PARAMETER_VALUE, this.info));\n      }\n      return;\n    } else {\n      this.socket = Net.connect(this.opts.port, this.opts.host);\n      this.socket.setNoDelay(true);\n    }\n    this.socketInit();\n  }\n  socketInit() {\n    if (this.opts.connectTimeout) {\n      this.timeout = setTimeout(this.connectTimeoutReached.bind(this), this.opts.connectTimeout, Date.now());\n    }\n    this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n    this.socket.on('error', this.socketErrorHandler.bind(this));\n    this.socket.on('end', this.socketErrorHandler.bind(this));\n    this.socket.on('connect', function () {\n      clearTimeout(this.timeout);\n      if (this.status === Status.CONNECTING) {\n        this.status = Status.AUTHENTICATING;\n        this.socket.setTimeout(this.opts.socketTimeout, this.socketTimeoutReached.bind(this));\n        this.socket.setNoDelay(true);\n\n        // keep alive for socket. This won't reset server wait_timeout use pool option idleTimeout for that\n        if (this.opts.keepAliveDelay) {\n          this.socket.setKeepAlive(true, this.opts.keepAliveDelay);\n        }\n      }\n    }.bind(this));\n    this.socket.writeBuf = buf => this.socket.write(buf);\n    this.socket.flush = () => {};\n    this.streamOut.setStream(this.socket);\n  }\n\n  /**\n   * Authentication success result handler.\n   *\n   * @private\n   */\n  authSucceedHandler() {\n    //enable packet compression according to option\n    if (this.opts.compress) {\n      if (this.info.serverCapabilities & Capabilities.COMPRESS) {\n        this.streamOut.setStream(new CompressionOutputStream(this.socket, this.opts, this.info));\n        this.streamIn = new CompressionInputStream(this.streamIn, this.receiveQueue, this.opts, this.info);\n        this.socket.removeAllListeners('data');\n        this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n      } else if (this.opts.logger.error) {\n        this.opts.logger.error(Errors.createError(\"connection is configured to use packet compression, but the server doesn't have this capability\", Errors.ER_COMPRESSION_NOT_SUPPORTED, this.info));\n      }\n    }\n    this.addCommand = this.opts.pipelining ? this.addCommandEnablePipeline : this.addCommandEnable;\n    const conn = this;\n    this.status = Status.INIT_CMD;\n    this.executeSessionVariableQuery().then(this.handleTimezone.bind(this)).then(this.checkServerVersion.bind(this)).then(this.executeInitQuery.bind(this)).then(this.executeSessionTimeout.bind(this)).then(() => {\n      conn.status = Status.CONNECTED;\n      process.nextTick(conn.connectResolveFct, conn);\n      const commands = conn.waitingAuthenticationQueue.toArray();\n      commands.forEach(cmd => {\n        conn.addCommand(cmd);\n      });\n      conn.waitingAuthenticationQueue = null;\n      conn.connectRejectFct = null;\n      conn.connectResolveFct = null;\n    }).catch(err => {\n      if (!err.fatal) {\n        const res = () => {\n          conn.authFailHandler.call(conn, err);\n        };\n        conn.end(res, res);\n      } else {\n        conn.authFailHandler.call(conn, err);\n      }\n    });\n  }\n\n  /**\n   * Authentication failed result handler.\n   *\n   * @private\n   */\n  authFailHandler(err) {\n    if (this.connectRejectFct) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      //remove handshake command\n      this.receiveQueue.shift();\n      this.fatalError(err, true);\n      process.nextTick(this.connectRejectFct, err);\n      this.connectRejectFct = null;\n    }\n  }\n\n  /**\n   * Create TLS socket and associate events.\n   *\n   * @param callback  callback function when done\n   * @private\n   */\n  createSecureContext(callback) {\n    const sslOption = Object.assign({}, this.opts.ssl, {\n      servername: this.opts.host,\n      socket: this.socket\n    });\n    try {\n      const secureSocket = tls.connect(sslOption, callback);\n      secureSocket.on('data', this.streamIn.onData.bind(this.streamIn));\n      secureSocket.on('error', this.socketErrorHandler.bind(this));\n      secureSocket.on('end', this.socketErrorHandler.bind(this));\n      secureSocket.writeBuf = buf => secureSocket.write(buf);\n      secureSocket.flush = () => {};\n      this.socket.removeAllListeners('data');\n      this.socket = secureSocket;\n      this.streamOut.setStream(secureSocket);\n    } catch (err) {\n      this.socketErrorHandler(err);\n    }\n  }\n\n  /**\n   * Handle packet when no packet is expected.\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\n   *\n   * @param packet  packet\n   * @private\n   */\n  unexpectedPacket(packet) {\n    if (packet && packet.peek() === 0xff) {\n      //can receive unexpected error packet from server/proxy\n      //to inform that connection is closed (usually by timeout)\n      let err = packet.readError(this.info);\n      if (err.fatal && this.status < Status.CLOSING) {\n        this.emit('error', err);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.end(() => {}, () => {});\n      }\n    } else if (this.status < Status.CLOSING) {\n      const err = Errors.createFatalError(`receiving packet from server without active commands\\nconn:${this.info.threadId ? this.info.threadId : -1}(${packet.pos},${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end)}`, Errors.ER_UNEXPECTED_PACKET, this.info);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      this.emit('error', err);\n      this.destroy();\n    }\n  }\n\n  /**\n   * Handle connection timeout.\n   *\n   * @private\n   */\n  connectTimeoutReached(initialConnectionTime) {\n    this.timeout = null;\n    const handshake = this.receiveQueue.peekFront();\n    const err = Errors.createFatalError(`Connection timeout: failed to create socket after ${Date.now() - initialConnectionTime}ms`, Errors.ER_CONNECTION_TIMEOUT, this.info, '08S01', null, handshake ? handshake.stack : null);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.authFailHandler(err);\n  }\n\n  /**\n   * Handle socket timeout.\n   *\n   * @private\n   */\n  socketTimeoutReached() {\n    const err = Errors.createFatalError('socket timeout', Errors.ER_SOCKET_TIMEOUT, this.info);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.fatalError(err, true);\n  }\n\n  /**\n   * Add command to waiting queue until authentication.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandQueue(cmd) {\n    this.waitingAuthenticationQueue.push(cmd);\n  }\n\n  /**\n   * Add command to command sending and receiving queue.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnable(cmd) {\n    cmd.once('end', this._sendNextCmdImmediate.bind(this));\n\n    //send immediately only if no current active receiver\n    if (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront()) {\n      this.receiveQueue.push(cmd);\n      cmd.start(this.streamOut, this.opts, this.info);\n    } else {\n      this.receiveQueue.push(cmd);\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Add command to command sending and receiving queue using pipelining\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnablePipeline(cmd) {\n    cmd.once('send_end', this._sendNextCmdImmediate.bind(this));\n    this.receiveQueue.push(cmd);\n    if (this.sendQueue.isEmpty()) {\n      cmd.start(this.streamOut, this.opts, this.info);\n      if (cmd.sending) {\n        this.sendQueue.push(cmd);\n        cmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n      }\n    } else {\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Replacing command when connection is closing or closed to send a proper error message.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandDisabled(cmd) {\n    const err = cmd.throwNewError('Cannot execute new commands: connection closed', true, this.info, '08S01', Errors.ER_CMD_CONNECTION_CLOSED);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n  }\n\n  /**\n   * Handle socket error.\n   *\n   * @param err               socket error\n   * @private\n   */\n  socketErrorHandler(err) {\n    if (this.status >= Status.CLOSING) return;\n    if (this.socket) {\n      this.socket.writeBuf = () => {};\n      this.socket.flush = () => {};\n    }\n\n    //socket has been ended without error\n    if (!err) {\n      err = Errors.createFatalError('socket has unexpectedly been closed', Errors.ER_SOCKET_UNEXPECTED_CLOSE, this.info);\n    } else {\n      err.fatal = true;\n      err.sqlState = 'HY000';\n    }\n    switch (this.status) {\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        const currentCmd = this.receiveQueue.peekFront();\n        if (currentCmd && currentCmd.stack && err) {\n          err.stack += '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\n        }\n        this.authFailHandler(err);\n        break;\n      default:\n        this.fatalError(err, false);\n    }\n  }\n\n  /**\n   * Fatal unexpected error : closing connection, and throw exception.\n   */\n  fatalError(err, avoidThrowError) {\n    if (this.status >= Status.CLOSING) {\n      this.socketErrorDispatchToQueries(err);\n      return;\n    }\n    const mustThrowError = this.status !== Status.CONNECTING;\n    this.status = Status.CLOSING;\n\n    //prevent executing new commands\n    this.addCommand = this.addCommandDisabled;\n    if (this.socket) {\n      this.socket.removeAllListeners('error');\n      this.socket.removeAllListeners('timeout');\n      this.socket.removeAllListeners('close');\n      this.socket.removeAllListeners('data');\n      if (!this.socket.destroyed) this.socket.destroy();\n      this.socket = undefined;\n    }\n    this.status = Status.CLOSED;\n    const errorThrownByCmd = this.socketErrorDispatchToQueries(err);\n    if (mustThrowError) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      if (this.listenerCount('error') > 0) {\n        this.emit('error', err);\n        this.emit('end');\n        this.clear();\n      } else {\n        this.emit('end');\n        this.clear();\n        //error will be thrown if no error listener and no command did throw the exception\n        if (!avoidThrowError && !errorThrownByCmd) throw err;\n      }\n    } else {\n      this.clear();\n    }\n  }\n\n  /**\n   * Dispatch fatal error to current running queries.\n   *\n   * @param err        the fatal error\n   * @return {boolean} return if error has been relayed to queries\n   */\n  socketErrorDispatchToQueries(err) {\n    let receiveCmd;\n    let errorThrownByCmd = false;\n    while (receiveCmd = this.receiveQueue.shift()) {\n      if (receiveCmd && receiveCmd.onPacketReceive) {\n        errorThrownByCmd = true;\n        setImmediate(receiveCmd.throwError.bind(receiveCmd, err, this.info));\n      }\n    }\n    return errorThrownByCmd;\n  }\n\n  /**\n   * Will send next command in queue if any.\n   *\n   * @private\n   */\n  nextSendCmd() {\n    let sendCmd;\n    if (sendCmd = this.sendQueue.shift()) {\n      if (sendCmd.sending) {\n        this.sendQueue.unshift(sendCmd);\n      } else {\n        sendCmd.start(this.streamOut, this.opts, this.info);\n        if (sendCmd.sending) {\n          this.sendQueue.unshift(sendCmd);\n          sendCmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n        }\n      }\n    }\n  }\n\n  /**\n   * Change transaction state.\n   *\n   * @param cmdParam command parameter\n   * @param resolve success function to call\n   * @param reject error function to call\n   * @private\n   */\n  changeTransaction(cmdParam, resolve, reject) {\n    //if command in progress, driver cannot rely on status and must execute query\n    if (this.status >= Status.CLOSING) {\n      const err = Errors.createFatalError('Cannot execute new commands: connection closed', Errors.ER_CMD_CONNECTION_CLOSED, this.info, '08S01', cmdParam.sql);\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n\n    //Command in progress => must execute query\n    //or if no command in progress, can rely on status to know if query is needed\n    if (this.receiveQueue.peekFront() || this.info.status & ServerStatus.STATUS_IN_TRANS) {\n      const cmd = new Query(resolve, err => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      }, this.opts, cmdParam);\n      this.addCommand(cmd);\n    } else resolve();\n  }\n  changeUser(cmdParam, resolve, reject) {\n    if (!this.info.isMariaDB()) {\n      const err = Errors.createError('method changeUser not available for MySQL server due to Bug #83472', Errors.ER_MYSQL_CHANGE_USER_BUG, this.info, '0A000');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n    this.addCommand(new ChangeUser(cmdParam, this.opts, res => {\n      if (cmdParam.opts && cmdParam.opts.collation) this.opts.collation = cmdParam.opts.collation;\n      resolve(res);\n    }, this.authFailHandler.bind(this, reject), this.addCommand.bind(this)));\n  }\n  query(cmdParam, resolve, reject) {\n    if (!cmdParam.sql) return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000', null, false, cmdParam.stack));\n    const cmd = new Query(resolve, err => {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n    }, this.opts, cmdParam);\n    this.addCommand(cmd);\n  }\n  prepare(cmdParam, resolve, reject) {\n    if (!cmdParam.sql) return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000'));\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, database is then considered ok, and cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return resolve(cachedPrepare);\n      }\n    }\n    const cmd = new Prepare(resolve, err => {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n    }, this.opts, cmdParam, this);\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Clearing connection variables when ending.\n   *\n   * @private\n   */\n  clear() {\n    this.sendQueue.clear();\n    this.opts.removeAllListeners();\n    this.streamOut = undefined;\n    this.socket = undefined;\n  }\n  get threadId() {\n    return this.info ? this.info.threadId : null;\n  }\n  _sendNextCmdImmediate() {\n    if (!this.sendQueue.isEmpty()) {\n      setImmediate(this.nextSendCmd.bind(this));\n    }\n  }\n  _closePrepare(prepareResultPacket) {\n    this.addCommand(new ClosePrepare(new CommandParameter(null, null, null, null), () => {}, () => {}, prepareResultPacket));\n  }\n  _logAndReject(reject, err) {\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n}\nclass TestMethods {\n  #collation;\n  #socket;\n  constructor(collation, socket) {\n    this.#collation = collation;\n    this.#socket = socket;\n  }\n  getCollation() {\n    return this.#collation;\n  }\n  getSocket() {\n    return this.#socket;\n  }\n}\nmodule.exports = Connection;","map":{"version":3,"names":["EventEmitter","require","Queue","Net","PacketInputStream","PacketOutputStream","CompressionInputStream","CompressionOutputStream","ServerStatus","ConnectionInformation","tls","Errors","Utils","Capabilities","Handshake","Quit","Ping","Reset","Query","Prepare","OkPacket","Execute","ClosePrepare","BatchBulk","ChangeUser","Status","CommandParameter","LruPrepareCache","convertFixedTime","tz","startsWith","tzdiff","negate","substring","diff","parseInt","isNaN","createFatalError","ER_WRONG_AUTO_TIMEZONE","info","Connection","opts","sendQueue","receiveQueue","waitingAuthenticationQueue","status","NOT_CONNECTED","socket","timeout","addCommand","streamOut","streamIn","prepareCache","constructor","options","Object","assign","prepareCacheLength","addCommandQueue","unexpectedPacket","bind","on","_closePrepare","escape","escapeId","connect","conn","CONNECTING","handshakeParam","Promise","resolve","reject","connectRejectFct","connectResolveFct","handshake","authSucceedHandler","authFailHandler","createSecureContext","addCommandEnable","getSocket","Error","captureStackTrace","once","collation","emit","process","nextTick","nextSendCmd","push","streamInitSocket","call","executePromise","cmdParam","prepare","cmd","_logAndReject","batch","sql","err","createError","ER_UNDEFINED_SQL","stack","logger","error","values","ER_BATCH_WITH_NO_VALUES","then","usePlaceHolder","namedPlaceholders","vals","Array","isArray","parameterCount","i","length","useBulk","_canUseBulk","executeBulkPromise","executes","cmdOpt","execute","all","res","fullResult","firstResult","metaAsArray","affectedRows","insertId","warningStatus","rs","forEach","row","defineProperty","value","meta","writable","enumerable","metaEnumerable","finally","close","ping","ER_BAD_PARAMETER_VALUE","tOut","setTimeout","undefined","ER_PING_TIMEOUT","addCommandDisabled","clearTimeout","CLOSING","CLOSED","clear","destroy","reset","isMariaDB","hasMinVersion","resetCmd","prom","handleTimezone","executeInitQuery","executeSessionTimeout","catch","serverVersion","raw","isValid","CONNECTED","end","ended","unref","quitCmd","self","killCon","query","threadId","destroyError","ER_CMD_NOT_EXECUTED_DESTROYED","socketErrorDispatchToQueries","sok","sock","pause","resume","format","ER_NOT_IMPLEMENTED_FORMAT","debug","val","network","console","log","debugCompress","__tests","TestMethods","_options","mariaDb","bulk","serverCapabilities","MARIADB_CLIENT_STMT_BULK_OPERATIONS","paramLen","r","j","pipe","read","keys","executeSessionVariableQuery","sessionVariables","sessionQuery","k","replace","initialErr","JSON","stringify","message","ER_SETTING_SESSION_ERROR","timezone","serverTimezone","stz","localTz","Intl","DateTimeFormat","resolvedOptions","timeZone","_setSessionTimezone","er","ER_WRONG_IANA_TIMEZONE","checkServerVersion","forceVersionCheck","v","includes","parseVersionString","initSql","initialArr","initialPromises","ER_INITIAL_SQL_ERROR","queryTimeout","ER_INITIAL_TIMEOUT_ERROR","ER_TIMEOUT_NOT_SUPPORTED","socketPath","stream","tmpSocket","port","host","socketInit","setNoDelay","connectTimeout","connectTimeoutReached","Date","now","onData","socketErrorHandler","AUTHENTICATING","socketTimeout","socketTimeoutReached","keepAliveDelay","setKeepAlive","writeBuf","buf","write","flush","setStream","compress","COMPRESS","removeAllListeners","ER_COMPRESSION_NOT_SUPPORTED","pipelining","addCommandEnablePipeline","INIT_CMD","commands","toArray","fatal","shift","fatalError","callback","sslOption","ssl","servername","secureSocket","packet","peek","readError","pos","ER_UNEXPECTED_PACKET","initialConnectionTime","peekFront","ER_CONNECTION_TIMEOUT","ER_SOCKET_TIMEOUT","_sendNextCmdImmediate","isEmpty","start","sending","prependOnceListener","throwNewError","ER_CMD_CONNECTION_CLOSED","ER_SOCKET_UNEXPECTED_CLOSE","sqlState","currentCmd","indexOf","avoidThrowError","mustThrowError","destroyed","errorThrownByCmd","listenerCount","receiveCmd","onPacketReceive","setImmediate","throwError","sendCmd","unshift","changeTransaction","STATUS_IN_TRANS","changeUser","ER_MYSQL_CHANGE_USER_BUG","cachedPrepare","get","prepareResultPacket","getCollation","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/mariadb/lib/connection.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst Queue = require('denque');\nconst Net = require('net');\nconst PacketInputStream = require('./io/packet-input-stream');\nconst PacketOutputStream = require('./io/packet-output-stream');\nconst CompressionInputStream = require('./io/compression-input-stream');\nconst CompressionOutputStream = require('./io/compression-output-stream');\nconst ServerStatus = require('./const/server-status');\nconst ConnectionInformation = require('./misc/connection-information');\nconst tls = require('tls');\nconst Errors = require('./misc/errors');\nconst Utils = require('./misc/utils');\nconst Capabilities = require('./const/capabilities');\n\n/*commands*/\nconst Handshake = require('./cmd/handshake/handshake');\nconst Quit = require('./cmd/quit');\nconst Ping = require('./cmd/ping');\nconst Reset = require('./cmd/reset');\nconst Query = require('./cmd/query');\nconst Prepare = require('./cmd/prepare');\nconst OkPacket = require('./cmd/class/ok-packet');\nconst Execute = require('./cmd/execute');\nconst ClosePrepare = require('./cmd/close-prepare');\nconst BatchBulk = require('./cmd/batch-bulk');\nconst ChangeUser = require('./cmd/change-user');\nconst { Status } = require('./const/connection_status');\nconst CommandParameter = require('./command-parameter');\nconst LruPrepareCache = require('./lru-prepare-cache');\n\nconst convertFixedTime = function (tz) {\n  if (tz === 'Etc/UTC' || tz === 'Z') {\n    return '+00:00';\n  } else if (tz.startsWith('Etc/GMT') || tz.startsWith('GMT')) {\n    let tzdiff;\n    let negate;\n\n    // strangely Etc/GMT+8 = GMT-08:00 = offset -8\n    if (tz.startsWith('Etc/GMT')) {\n      tzdiff = tz.substring(7);\n      negate = !tzdiff.startsWith('-');\n    } else {\n      tzdiff = tz.substring(3);\n      negate = tzdiff.startsWith('-');\n    }\n    let diff = parseInt(tzdiff.substring(1));\n    if (isNaN(diff)) {\n      throw Errors.createFatalError(\n        `Automatic timezone setting fails. wrong Server timezone '${tz}' conversion to +/-HH:00 conversion.`,\n        Errors.ER_WRONG_AUTO_TIMEZONE,\n        this.info\n      );\n    }\n    return (negate ? '-' : '+') + (diff >= 10 ? diff : '0' + diff) + ':00';\n  }\n  return tz;\n};\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass Connection extends EventEmitter {\n  opts;\n  sendQueue = new Queue();\n  receiveQueue = new Queue();\n  waitingAuthenticationQueue = new Queue();\n  status = Status.NOT_CONNECTED;\n  socket = null;\n  timeout = null;\n  addCommand;\n  streamOut;\n  streamIn;\n  info;\n  prepareCache;\n\n  constructor(options) {\n    super();\n\n    this.opts = Object.assign(new EventEmitter(), options);\n    this.info = new ConnectionInformation(this.opts);\n    this.prepareCache =\n      this.opts.prepareCacheLength > 0 ? new LruPrepareCache(this.info, this.opts.prepareCacheLength) : null;\n    this.addCommand = this.addCommandQueue;\n    this.streamOut = new PacketOutputStream(this.opts, this.info);\n    this.streamIn = new PacketInputStream(\n      this.unexpectedPacket.bind(this),\n      this.receiveQueue,\n      this.streamOut,\n      this.opts,\n      this.info\n    );\n\n    this.on('close_prepare', this._closePrepare.bind(this));\n    this.escape = Utils.escape.bind(this, this.opts, this.info);\n    this.escapeId = Utils.escapeId.bind(this, this.opts, this.info);\n  }\n\n  //*****************************************************************\n  // public methods\n  //*****************************************************************\n\n  /**\n   * Connect event\n   *\n   * @returns {Promise} promise\n   */\n  connect() {\n    const conn = this;\n    this.status = Status.CONNECTING;\n    const handshakeParam = new CommandParameter(null, null, this.opts, null);\n    return new Promise(function (resolve, reject) {\n      conn.connectRejectFct = reject;\n      conn.connectResolveFct = resolve;\n      // add a handshake to msg queue\n      const handshake = new Handshake(\n        handshakeParam,\n        conn.authSucceedHandler.bind(conn),\n        conn.authFailHandler.bind(conn),\n        conn.createSecureContext.bind(conn),\n        conn.addCommandEnable.bind(conn),\n        conn.getSocket.bind(conn)\n      );\n      Error.captureStackTrace(handshake);\n\n      handshake.once('end', () => {\n        // conn.info.collation might not be initialized\n        // in case of handshake throwing error\n        if (!conn.opts.collation && conn.info.collation) {\n          conn.opts.emit('collation', conn.info.collation);\n        }\n\n        process.nextTick(conn.nextSendCmd.bind(conn));\n      });\n\n      conn.receiveQueue.push(handshake);\n      conn.streamInitSocket.call(conn);\n    });\n  }\n\n  executePromise(cmdParam, prepare, resolve, reject) {\n    const cmd = new Execute(resolve, this._logAndReject.bind(this, reject), this.opts, cmdParam, prepare);\n    this.addCommand(cmd);\n  }\n\n  batch(cmdParam) {\n    if (!cmdParam.sql) {\n      const err = Errors.createError(\n        'sql parameter is mandatory',\n        Errors.ER_UNDEFINED_SQL,\n        this.info,\n        'HY000',\n        null,\n        false,\n        cmdParam.stack\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n    if (!cmdParam.values) {\n      const err = Errors.createError(\n        'Batch must have values set',\n        Errors.ER_BATCH_WITH_NO_VALUES,\n        this.info,\n        'HY000',\n        cmdParam.sql,\n        false,\n        cmdParam.stack\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      return Promise.reject(err);\n    }\n\n    return new Promise(this.prepare.bind(this, cmdParam)).then((prepare) => {\n      const usePlaceHolder = (cmdParam.opts && cmdParam.opts.namedPlaceholders) || this.opts.namedPlaceholders;\n      let vals;\n      if (Array.isArray(cmdParam.values)) {\n        if (usePlaceHolder) {\n          vals = cmdParam.values;\n        } else if (Array.isArray(cmdParam.values[0])) {\n          vals = cmdParam.values;\n        } else if (prepare.parameterCount === 1) {\n          vals = [];\n          for (let i = 0; i < cmdParam.values.length; i++) {\n            vals.push([cmdParam.values[i]]);\n          }\n        } else {\n          vals = [cmdParam.values];\n        }\n      } else {\n        vals = [[cmdParam.values]];\n      }\n      cmdParam.values = vals;\n      let useBulk = this._canUseBulk(vals, cmdParam.opts);\n      if (useBulk) {\n        return new Promise(this.executeBulkPromise.bind(this, cmdParam, prepare, this.opts));\n      } else {\n        const executes = [];\n        const cmdOpt = Object.assign({}, this.opts, cmdParam.opts);\n        for (let i = 0; i < vals.length; i++) {\n          executes.push(prepare.execute(vals[i], cmdParam.opts, null, cmdParam.stack));\n        }\n        return Promise.all(executes)\n          .then(\n            function (res) {\n              if (cmdParam.opts && cmdParam.opts.fullResult) {\n                return Promise.resolve(res);\n              } else {\n                // aggregate results\n                let firstResult = res[0];\n                if (cmdOpt.metaAsArray) firstResult = firstResult[0];\n                if (firstResult instanceof OkPacket) {\n                  let affectedRows = 0;\n                  const insertId = firstResult.insertId;\n                  const warningStatus = firstResult.warningStatus;\n                  if (cmdOpt.metaAsArray) {\n                    for (let i = 0; i < res.length; i++) {\n                      affectedRows += res[i][0].affectedRows;\n                    }\n                    return Promise.resolve([new OkPacket(affectedRows, insertId, warningStatus), []]);\n                  } else {\n                    for (let i = 0; i < res.length; i++) {\n                      affectedRows += res[i].affectedRows;\n                    }\n                    return Promise.resolve(new OkPacket(affectedRows, insertId, warningStatus));\n                  }\n                } else {\n                  // results have result-set. example :'INSERT ... RETURNING'\n                  // aggregate results\n                  if (cmdOpt.metaAsArray) {\n                    const rs = [];\n                    res.forEach((row) => {\n                      rs.push(...row[0]);\n                    });\n                    return Promise.resolve([rs, res[0][1]]);\n                  } else {\n                    const rs = [];\n                    res.forEach((row) => {\n                      rs.push(...row);\n                    });\n                    Object.defineProperty(rs, 'meta', {\n                      value: res[0].meta,\n                      writable: true,\n                      enumerable: this.opts.metaEnumerable\n                    });\n                    return Promise.resolve(rs);\n                  }\n                }\n              }\n            }.bind(this)\n          )\n          .finally(() => prepare.close());\n      }\n    });\n  }\n\n  executeBulkPromise(cmdParam, prepare, opts, resolve, reject) {\n    const cmd = new BatchBulk(\n      (res) => {\n        prepare.close();\n        return resolve(res);\n      },\n      function (err) {\n        prepare.close();\n        if (opts.logger.error) opts.logger.error(err);\n        reject(err);\n      },\n      opts,\n      prepare,\n      cmdParam\n    );\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param cmdParam command context\n   * @param resolve success function\n   * @param reject rejection function\n   */\n  ping(cmdParam, resolve, reject) {\n    if (cmdParam.opts && cmdParam.opts.timeout) {\n      if (cmdParam.opts.timeout < 0) {\n        const err = Errors.createError(\n          'Ping cannot have negative timeout value',\n          Errors.ER_BAD_PARAMETER_VALUE,\n          this.info,\n          '0A000'\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n        return;\n      }\n      let tOut = setTimeout(\n        function () {\n          tOut = undefined;\n          const err = Errors.createFatalError('Ping timeout', Errors.ER_PING_TIMEOUT, this.info, '0A000');\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          // close connection\n          this.addCommand = this.addCommandDisabled;\n          clearTimeout(this.timeout);\n          if (this.status !== Status.CLOSING && this.status !== Status.CLOSED) {\n            this.sendQueue.clear();\n            this.status = Status.CLOSED;\n            this.socket.destroy();\n          }\n          this.clear();\n          reject(err);\n        }.bind(this),\n        cmdParam.opts.timeout\n      );\n      this.addCommand(\n        new Ping(\n          cmdParam,\n          () => {\n            if (tOut) {\n              clearTimeout(tOut);\n              resolve();\n            }\n          },\n          (err) => {\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            clearTimeout(tOut);\n            reject(err);\n          }\n        )\n      );\n      return;\n    }\n    this.addCommand(new Ping(cmdParam, resolve, reject));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   */\n  reset(cmdParam, resolve, reject) {\n    if (\n      (this.info.isMariaDB() && this.info.hasMinVersion(10, 2, 4)) ||\n      (!this.info.isMariaDB() && this.info.hasMinVersion(5, 7, 3))\n    ) {\n      const conn = this;\n      const resetCmd = new Reset(\n        cmdParam,\n        () => {\n          conn.prepareCache.reset();\n          let prom = Promise.resolve();\n          // re-execute init query / session query timeout\n          prom\n            .then(conn.handleTimezone.bind(conn))\n            .then(conn.executeInitQuery.bind(conn))\n            .then(conn.executeSessionTimeout.bind(conn))\n            .then(resolve)\n            .catch(reject);\n        },\n        reject\n      );\n      this.addCommand(resetCmd);\n      return;\n    }\n\n    const err = new Error(\n      `Reset command not permitted for server ${this.info.serverVersion.raw} (requires server MariaDB version 10.2.4+ or MySQL 5.7.3+)`\n    );\n    err.stack = cmdParam.stack;\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.status === Status.CONNECTED;\n  }\n\n  /**\n   * Terminate connection gracefully.\n   */\n  end(cmdParam, resolve, reject) {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n\n    if (this.status < Status.CLOSING && this.status !== Status.NOT_CONNECTED) {\n      this.status = Status.CLOSING;\n      const ended = () => {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.socket.unref();\n        this.clear();\n        this.receiveQueue.clear();\n        resolve();\n      };\n      const quitCmd = new Quit(cmdParam, ended, ended);\n      this.sendQueue.push(quitCmd);\n      this.receiveQueue.push(quitCmd);\n      if (this.sendQueue.length === 1) {\n        process.nextTick(this.nextSendCmd.bind(this));\n      }\n    } else resolve();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.addCommand = this.addCommandDisabled;\n    clearTimeout(this.timeout);\n    if (this.status < Status.CLOSING) {\n      this.status = Status.CLOSING;\n      this.sendQueue.clear();\n      if (this.receiveQueue.length > 0) {\n        //socket is closed, but server may still be processing a huge select\n        //only possibility is to kill process by another thread\n        //TODO reuse a pool connection to avoid connection creation\n        const self = this;\n        const killCon = new Connection(this.opts);\n        killCon\n          .connect()\n          .then(() => {\n            //*************************************************\n            //kill connection\n            //*************************************************\n            new Promise(killCon.query.bind(killCon, { sql: `KILL ${self.info.threadId}` })).finally((err) => {\n              const destroyError = Errors.createFatalError(\n                'Connection destroyed, command was killed',\n                Errors.ER_CMD_NOT_EXECUTED_DESTROYED,\n                self.info\n              );\n              if (self.opts.logger.error) self.opts.logger.error(destroyError);\n              self.socketErrorDispatchToQueries(destroyError);\n              if (self.socket) {\n                const sok = self.socket;\n                process.nextTick(() => {\n                  sok.destroy();\n                });\n              }\n              self.status = Status.CLOSED;\n              self.clear();\n              new Promise(killCon.end.bind(killCon)).catch(() => {});\n            });\n          })\n          .catch(() => {\n            //*************************************************\n            //failing to create a kill connection, end normally\n            //*************************************************\n            const ended = () => {\n              let sock = self.socket;\n              self.clear();\n              self.status = Status.CLOSED;\n              sock.destroy();\n              self.receiveQueue.clear();\n            };\n            const quitCmd = new Quit(ended, ended);\n            self.sendQueue.push(quitCmd);\n            self.receiveQueue.push(quitCmd);\n            if (self.sendQueue.length === 1) {\n              process.nextTick(self.nextSendCmd.bind(self));\n            }\n          });\n      } else {\n        this.status = Status.CLOSED;\n        this.socket.destroy();\n        this.clear();\n      }\n    }\n  }\n\n  pause() {\n    this.socket.pause();\n  }\n\n  resume() {\n    this.socket.resume();\n  }\n\n  format(sql, values) {\n    const err = Errors.createError(\n      '\"Connection.format intentionally not implemented. please use Connection.query(sql, values), it will be more secure and faster',\n      Errors.ER_NOT_IMPLEMENTED_FORMAT,\n      this.info,\n      '0A000'\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    throw err;\n  }\n\n  //*****************************************************************\n  // additional public methods\n  //*****************************************************************\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    if (!this.info.serverVersion) {\n      const err = new Error('cannot know if server information until connection is established');\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      throw err;\n    }\n\n    return this.info.serverVersion.raw;\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    if (typeof val === 'boolean') {\n      if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n    } else if (typeof val === 'function') {\n      this.opts.logger.network = val;\n    }\n    this.opts.emit('debug', val);\n  }\n\n  debugCompress(val) {\n    if (val) {\n      if (typeof val === 'boolean') {\n        this.opts.debugCompress = val;\n        if (val && !this.opts.logger.network) this.opts.logger.network = console.log;\n      } else if (typeof val === 'function') {\n        this.opts.debugCompress = true;\n        this.opts.logger.network = val;\n      }\n    } else this.opts.debugCompress = false;\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return new TestMethods(this.info.collation, this.socket);\n  }\n\n  //*****************************************************************\n  // internal methods\n  //*****************************************************************\n\n  /**\n   * Use multiple COM_STMT_EXECUTE or COM_STMT_BULK_EXECUTE\n   *\n   * @param values current batch values\n   * @param _options batch option\n   * @return {boolean} indicating if can use bulk command\n   */\n  _canUseBulk(values, _options) {\n    if (_options && _options.fullResult) return false;\n    // not using info.isMariaDB() directly in case of callback use,\n    // without connection being completely finished.\n    if (\n      this.info.serverVersion &&\n      this.info.serverVersion.mariaDb &&\n      this.info.hasMinVersion(10, 2, 7) &&\n      this.opts.bulk &&\n      (this.info.serverCapabilities & Capabilities.MARIADB_CLIENT_STMT_BULK_OPERATIONS) > 0n\n    ) {\n      //ensure that there is no stream object\n      if (values !== undefined) {\n        if (!this.opts.namedPlaceholders) {\n          //ensure that all parameters have same length\n          //single array is considered as an array of single element.\n          const paramLen = Array.isArray(values[0]) ? values[0].length : values[0] ? 1 : 0;\n          if (paramLen === 0) return false;\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            if (!Array.isArray(row)) row = [row];\n            if (paramLen !== row.length) {\n              return false;\n            }\n            // streaming data not permitted\n            for (let j = 0; j < paramLen; j++) {\n              const val = row[j];\n              if (\n                val !== null &&\n                typeof val === 'object' &&\n                typeof val.pipe === 'function' &&\n                typeof val.read === 'function'\n              ) {\n                return false;\n              }\n            }\n          }\n        } else {\n          for (let r = 0; r < values.length; r++) {\n            let row = values[r];\n            const keys = Object.keys(row);\n            for (let j = 0; j < keys.length; j++) {\n              const val = row[keys[j]];\n              if (\n                val !== null &&\n                typeof val === 'object' &&\n                typeof val.pipe === 'function' &&\n                typeof val.read === 'function'\n              ) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  executeSessionVariableQuery() {\n    if (this.opts.sessionVariables) {\n      const values = [];\n      let sessionQuery = 'set ';\n      let keys = Object.keys(this.opts.sessionVariables);\n      if (keys.length > 0) {\n        for (let k = 0; k < keys.length; ++k) {\n          sessionQuery += (k !== 0 ? ',' : '') + '@@' + keys[k].replace(/[^a-z0-9_]/gi, '') + '=?';\n          values.push(this.opts.sessionVariables[keys[k]]);\n        }\n\n        return new Promise(this.query.bind(this, new CommandParameter(sessionQuery, values))).catch((initialErr) => {\n          const err = Errors.createFatalError(\n            `Error setting session variable (value ${JSON.stringify(this.opts.sessionVariables)}). Error: ${\n              initialErr.message\n            }`,\n            Errors.ER_SETTING_SESSION_ERROR,\n            this.info,\n            '08S01',\n            sessionQuery\n          );\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          return Promise.reject(err);\n        });\n      }\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Asking server timezone if not set in case of 'auto'\n   * @returns {Promise<void>}\n   * @private\n   */\n  handleTimezone() {\n    if (this.opts.timezone === 'local') this.opts.timezone = undefined;\n    if (this.opts.timezone === 'auto') {\n      return new Promise(\n        this.query.bind(this, new CommandParameter('SELECT @@system_time_zone stz, @@time_zone tz'))\n      ).then((res) => {\n        const serverTimezone = res[0].tz === 'SYSTEM' ? res[0].stz : res[0].tz;\n        const localTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (serverTimezone === localTz || convertFixedTime(serverTimezone) === convertFixedTime(localTz)) {\n          //server timezone is identical to client tz, skipping setting\n          this.opts.timezone = localTz;\n          return Promise.resolve();\n        }\n        return this._setSessionTimezone(convertFixedTime(localTz));\n      });\n    }\n\n    if (this.opts.timezone) {\n      return this._setSessionTimezone(convertFixedTime(this.opts.timezone));\n    }\n    return Promise.resolve();\n  }\n\n  _setSessionTimezone(tz) {\n    return new Promise(this.query.bind(this, new CommandParameter('SET time_zone=?', [tz]))).catch((err) => {\n      const er = Errors.createFatalError(\n        `setting timezone '${tz}' fails on server.\\n look at https://mariadb.com/kb/en/mysql_tzinfo_to_sql/ to load IANA timezone. `,\n        Errors.ER_WRONG_IANA_TIMEZONE,\n        this.info\n      );\n      if (this.opts.logger.error) this.opts.logger.error(er);\n      return Promise.reject(er);\n    });\n  }\n\n  checkServerVersion() {\n    if (!this.opts.forceVersionCheck) {\n      return Promise.resolve();\n    }\n    return new Promise(this.query.bind(this, new CommandParameter('SELECT @@VERSION AS v'))).then(\n      function (res) {\n        this.info.serverVersion.raw = res[0].v;\n        this.info.serverVersion.mariaDb = this.info.serverVersion.raw.includes('MariaDB');\n        ConnectionInformation.parseVersionString(this.info);\n        return Promise.resolve();\n      }.bind(this)\n    );\n  }\n\n  executeInitQuery() {\n    if (this.opts.initSql) {\n      const initialArr = Array.isArray(this.opts.initSql) ? this.opts.initSql : [this.opts.initSql];\n      const initialPromises = [];\n      initialArr.forEach((sql) => {\n        initialPromises.push(new Promise(this.query.bind(this, new CommandParameter(sql))));\n      });\n\n      return Promise.all(initialPromises).catch((initialErr) => {\n        const err = Errors.createFatalError(\n          `Error executing initial sql command: ${initialErr.message}`,\n          Errors.ER_INITIAL_SQL_ERROR,\n          this.info\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      });\n    }\n    return Promise.resolve();\n  }\n\n  executeSessionTimeout() {\n    if (this.opts.queryTimeout) {\n      if (this.info.isMariaDB() && this.info.hasMinVersion(10, 1, 2)) {\n        const query = `SET max_statement_time=${this.opts.queryTimeout / 1000}`;\n        new Promise(this.query.bind(this, new CommandParameter(query))).catch(\n          function (initialErr) {\n            const err = Errors.createFatalError(\n              `Error setting session queryTimeout: ${initialErr.message}`,\n              Errors.ER_INITIAL_TIMEOUT_ERROR,\n              this.info,\n              '08S01',\n              query\n            );\n            if (this.opts.logger.error) this.opts.logger.error(err);\n            return Promise.reject(err);\n          }.bind(this)\n        );\n      } else {\n        const err = Errors.createError(\n          `Can only use queryTimeout for MariaDB server after 10.1.1. queryTimeout value: ${this.opts.queryTimeout}`,\n          Errors.ER_TIMEOUT_NOT_SUPPORTED,\n          this.info,\n          'HY000',\n          this.opts.queryTimeout\n        );\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        return Promise.reject(err);\n      }\n    }\n    return Promise.resolve();\n  }\n\n  getSocket() {\n    return this.socket;\n  }\n\n  /**\n   * Initialize socket and associate events.\n   * @private\n   */\n  streamInitSocket() {\n    if (this.opts.socketPath) {\n      this.socket = Net.connect(this.opts.socketPath);\n    } else if (this.opts.stream) {\n      if (typeof this.opts.stream === 'function') {\n        const tmpSocket = this.opts.stream(\n          function (err, stream) {\n            if (err) {\n              this.authFailHandler(err);\n              return;\n            }\n            this.socket = stream ? stream : Net.connect(this.opts.port, this.opts.host);\n            this.socketInit();\n          }.bind(this)\n        );\n        if (tmpSocket) {\n          this.socket = tmpSocket;\n          this.socketInit();\n        }\n      } else {\n        this.authFailHandler(\n          Errors.createError(\n            'stream option is not a function. stream must be a function with (error, callback) parameter',\n            Errors.ER_BAD_PARAMETER_VALUE,\n            this.info\n          )\n        );\n      }\n      return;\n    } else {\n      this.socket = Net.connect(this.opts.port, this.opts.host);\n      this.socket.setNoDelay(true);\n    }\n    this.socketInit();\n  }\n\n  socketInit() {\n    if (this.opts.connectTimeout) {\n      this.timeout = setTimeout(this.connectTimeoutReached.bind(this), this.opts.connectTimeout, Date.now());\n    }\n\n    this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n    this.socket.on('error', this.socketErrorHandler.bind(this));\n    this.socket.on('end', this.socketErrorHandler.bind(this));\n    this.socket.on(\n      'connect',\n      function () {\n        clearTimeout(this.timeout);\n        if (this.status === Status.CONNECTING) {\n          this.status = Status.AUTHENTICATING;\n          this.socket.setTimeout(this.opts.socketTimeout, this.socketTimeoutReached.bind(this));\n          this.socket.setNoDelay(true);\n\n          // keep alive for socket. This won't reset server wait_timeout use pool option idleTimeout for that\n          if (this.opts.keepAliveDelay) {\n            this.socket.setKeepAlive(true, this.opts.keepAliveDelay);\n          }\n        }\n      }.bind(this)\n    );\n\n    this.socket.writeBuf = (buf) => this.socket.write(buf);\n    this.socket.flush = () => {};\n    this.streamOut.setStream(this.socket);\n  }\n\n  /**\n   * Authentication success result handler.\n   *\n   * @private\n   */\n  authSucceedHandler() {\n    //enable packet compression according to option\n    if (this.opts.compress) {\n      if (this.info.serverCapabilities & Capabilities.COMPRESS) {\n        this.streamOut.setStream(new CompressionOutputStream(this.socket, this.opts, this.info));\n        this.streamIn = new CompressionInputStream(this.streamIn, this.receiveQueue, this.opts, this.info);\n        this.socket.removeAllListeners('data');\n        this.socket.on('data', this.streamIn.onData.bind(this.streamIn));\n      } else if (this.opts.logger.error) {\n        this.opts.logger.error(\n          Errors.createError(\n            \"connection is configured to use packet compression, but the server doesn't have this capability\",\n            Errors.ER_COMPRESSION_NOT_SUPPORTED,\n            this.info\n          )\n        );\n      }\n    }\n\n    this.addCommand = this.opts.pipelining ? this.addCommandEnablePipeline : this.addCommandEnable;\n    const conn = this;\n    this.status = Status.INIT_CMD;\n    this.executeSessionVariableQuery()\n      .then(this.handleTimezone.bind(this))\n      .then(this.checkServerVersion.bind(this))\n      .then(this.executeInitQuery.bind(this))\n      .then(this.executeSessionTimeout.bind(this))\n      .then(() => {\n        conn.status = Status.CONNECTED;\n        process.nextTick(conn.connectResolveFct, conn);\n\n        const commands = conn.waitingAuthenticationQueue.toArray();\n        commands.forEach((cmd) => {\n          conn.addCommand(cmd);\n        });\n        conn.waitingAuthenticationQueue = null;\n\n        conn.connectRejectFct = null;\n        conn.connectResolveFct = null;\n      })\n      .catch((err) => {\n        if (!err.fatal) {\n          const res = () => {\n            conn.authFailHandler.call(conn, err);\n          };\n          conn.end(res, res);\n        } else {\n          conn.authFailHandler.call(conn, err);\n        }\n      });\n  }\n\n  /**\n   * Authentication failed result handler.\n   *\n   * @private\n   */\n  authFailHandler(err) {\n    if (this.connectRejectFct) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      //remove handshake command\n      this.receiveQueue.shift();\n      this.fatalError(err, true);\n\n      process.nextTick(this.connectRejectFct, err);\n      this.connectRejectFct = null;\n    }\n  }\n\n  /**\n   * Create TLS socket and associate events.\n   *\n   * @param callback  callback function when done\n   * @private\n   */\n  createSecureContext(callback) {\n    const sslOption = Object.assign({}, this.opts.ssl, {\n      servername: this.opts.host,\n      socket: this.socket\n    });\n\n    try {\n      const secureSocket = tls.connect(sslOption, callback);\n\n      secureSocket.on('data', this.streamIn.onData.bind(this.streamIn));\n      secureSocket.on('error', this.socketErrorHandler.bind(this));\n      secureSocket.on('end', this.socketErrorHandler.bind(this));\n      secureSocket.writeBuf = (buf) => secureSocket.write(buf);\n      secureSocket.flush = () => {};\n\n      this.socket.removeAllListeners('data');\n      this.socket = secureSocket;\n\n      this.streamOut.setStream(secureSocket);\n    } catch (err) {\n      this.socketErrorHandler(err);\n    }\n  }\n\n  /**\n   * Handle packet when no packet is expected.\n   * (there can be an ERROR packet send by server/proxy to inform that connection is ending).\n   *\n   * @param packet  packet\n   * @private\n   */\n  unexpectedPacket(packet) {\n    if (packet && packet.peek() === 0xff) {\n      //can receive unexpected error packet from server/proxy\n      //to inform that connection is closed (usually by timeout)\n      let err = packet.readError(this.info);\n      if (err.fatal && this.status < Status.CLOSING) {\n        this.emit('error', err);\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        this.end(\n          () => {},\n          () => {}\n        );\n      }\n    } else if (this.status < Status.CLOSING) {\n      const err = Errors.createFatalError(\n        `receiving packet from server without active commands\\nconn:${this.info.threadId ? this.info.threadId : -1}(${\n          packet.pos\n        },${packet.end})\\n${Utils.log(this.opts, packet.buf, packet.pos, packet.end)}`,\n        Errors.ER_UNEXPECTED_PACKET,\n        this.info\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      this.emit('error', err);\n      this.destroy();\n    }\n  }\n\n  /**\n   * Handle connection timeout.\n   *\n   * @private\n   */\n  connectTimeoutReached(initialConnectionTime) {\n    this.timeout = null;\n    const handshake = this.receiveQueue.peekFront();\n    const err = Errors.createFatalError(\n      `Connection timeout: failed to create socket after ${Date.now() - initialConnectionTime}ms`,\n      Errors.ER_CONNECTION_TIMEOUT,\n      this.info,\n      '08S01',\n      null,\n      handshake ? handshake.stack : null\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.authFailHandler(err);\n  }\n\n  /**\n   * Handle socket timeout.\n   *\n   * @private\n   */\n  socketTimeoutReached() {\n    const err = Errors.createFatalError('socket timeout', Errors.ER_SOCKET_TIMEOUT, this.info);\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    this.fatalError(err, true);\n  }\n\n  /**\n   * Add command to waiting queue until authentication.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandQueue(cmd) {\n    this.waitingAuthenticationQueue.push(cmd);\n  }\n\n  /**\n   * Add command to command sending and receiving queue.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnable(cmd) {\n    cmd.once('end', this._sendNextCmdImmediate.bind(this));\n\n    //send immediately only if no current active receiver\n    if (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront()) {\n      this.receiveQueue.push(cmd);\n      cmd.start(this.streamOut, this.opts, this.info);\n    } else {\n      this.receiveQueue.push(cmd);\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Add command to command sending and receiving queue using pipelining\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandEnablePipeline(cmd) {\n    cmd.once('send_end', this._sendNextCmdImmediate.bind(this));\n\n    this.receiveQueue.push(cmd);\n    if (this.sendQueue.isEmpty()) {\n      cmd.start(this.streamOut, this.opts, this.info);\n      if (cmd.sending) {\n        this.sendQueue.push(cmd);\n        cmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n      }\n    } else {\n      this.sendQueue.push(cmd);\n    }\n  }\n\n  /**\n   * Replacing command when connection is closing or closed to send a proper error message.\n   *\n   * @param cmd         command\n   * @private\n   */\n  addCommandDisabled(cmd) {\n    const err = cmd.throwNewError(\n      'Cannot execute new commands: connection closed',\n      true,\n      this.info,\n      '08S01',\n      Errors.ER_CMD_CONNECTION_CLOSED\n    );\n    if (this.opts.logger.error) this.opts.logger.error(err);\n  }\n\n  /**\n   * Handle socket error.\n   *\n   * @param err               socket error\n   * @private\n   */\n  socketErrorHandler(err) {\n    if (this.status >= Status.CLOSING) return;\n    if (this.socket) {\n      this.socket.writeBuf = () => {};\n      this.socket.flush = () => {};\n    }\n\n    //socket has been ended without error\n    if (!err) {\n      err = Errors.createFatalError(\n        'socket has unexpectedly been closed',\n        Errors.ER_SOCKET_UNEXPECTED_CLOSE,\n        this.info\n      );\n    } else {\n      err.fatal = true;\n      err.sqlState = 'HY000';\n    }\n\n    switch (this.status) {\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n        const currentCmd = this.receiveQueue.peekFront();\n        if (currentCmd && currentCmd.stack && err) {\n          err.stack += '\\n From event:\\n' + currentCmd.stack.substring(currentCmd.stack.indexOf('\\n') + 1);\n        }\n        this.authFailHandler(err);\n        break;\n\n      default:\n        this.fatalError(err, false);\n    }\n  }\n\n  /**\n   * Fatal unexpected error : closing connection, and throw exception.\n   */\n  fatalError(err, avoidThrowError) {\n    if (this.status >= Status.CLOSING) {\n      this.socketErrorDispatchToQueries(err);\n      return;\n    }\n    const mustThrowError = this.status !== Status.CONNECTING;\n    this.status = Status.CLOSING;\n\n    //prevent executing new commands\n    this.addCommand = this.addCommandDisabled;\n\n    if (this.socket) {\n      this.socket.removeAllListeners('error');\n      this.socket.removeAllListeners('timeout');\n      this.socket.removeAllListeners('close');\n      this.socket.removeAllListeners('data');\n      if (!this.socket.destroyed) this.socket.destroy();\n      this.socket = undefined;\n    }\n    this.status = Status.CLOSED;\n\n    const errorThrownByCmd = this.socketErrorDispatchToQueries(err);\n    if (mustThrowError) {\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      if (this.listenerCount('error') > 0) {\n        this.emit('error', err);\n        this.emit('end');\n        this.clear();\n      } else {\n        this.emit('end');\n        this.clear();\n        //error will be thrown if no error listener and no command did throw the exception\n        if (!avoidThrowError && !errorThrownByCmd) throw err;\n      }\n    } else {\n      this.clear();\n    }\n  }\n\n  /**\n   * Dispatch fatal error to current running queries.\n   *\n   * @param err        the fatal error\n   * @return {boolean} return if error has been relayed to queries\n   */\n  socketErrorDispatchToQueries(err) {\n    let receiveCmd;\n    let errorThrownByCmd = false;\n    while ((receiveCmd = this.receiveQueue.shift())) {\n      if (receiveCmd && receiveCmd.onPacketReceive) {\n        errorThrownByCmd = true;\n        setImmediate(receiveCmd.throwError.bind(receiveCmd, err, this.info));\n      }\n    }\n    return errorThrownByCmd;\n  }\n\n  /**\n   * Will send next command in queue if any.\n   *\n   * @private\n   */\n  nextSendCmd() {\n    let sendCmd;\n    if ((sendCmd = this.sendQueue.shift())) {\n      if (sendCmd.sending) {\n        this.sendQueue.unshift(sendCmd);\n      } else {\n        sendCmd.start(this.streamOut, this.opts, this.info);\n        if (sendCmd.sending) {\n          this.sendQueue.unshift(sendCmd);\n          sendCmd.prependOnceListener('send_end', this.sendQueue.shift.bind(this.sendQueue));\n        }\n      }\n    }\n  }\n\n  /**\n   * Change transaction state.\n   *\n   * @param cmdParam command parameter\n   * @param resolve success function to call\n   * @param reject error function to call\n   * @private\n   */\n  changeTransaction(cmdParam, resolve, reject) {\n    //if command in progress, driver cannot rely on status and must execute query\n    if (this.status >= Status.CLOSING) {\n      const err = Errors.createFatalError(\n        'Cannot execute new commands: connection closed',\n        Errors.ER_CMD_CONNECTION_CLOSED,\n        this.info,\n        '08S01',\n        cmdParam.sql\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n\n    //Command in progress => must execute query\n    //or if no command in progress, can rely on status to know if query is needed\n    if (this.receiveQueue.peekFront() || this.info.status & ServerStatus.STATUS_IN_TRANS) {\n      const cmd = new Query(\n        resolve,\n        (err) => {\n          if (this.opts.logger.error) this.opts.logger.error(err);\n          reject(err);\n        },\n        this.opts,\n        cmdParam\n      );\n      this.addCommand(cmd);\n    } else resolve();\n  }\n\n  changeUser(cmdParam, resolve, reject) {\n    if (!this.info.isMariaDB()) {\n      const err = Errors.createError(\n        'method changeUser not available for MySQL server due to Bug #83472',\n        Errors.ER_MYSQL_CHANGE_USER_BUG,\n        this.info,\n        '0A000'\n      );\n      if (this.opts.logger.error) this.opts.logger.error(err);\n      reject(err);\n      return;\n    }\n\n    this.addCommand(\n      new ChangeUser(\n        cmdParam,\n        this.opts,\n        (res) => {\n          if (cmdParam.opts && cmdParam.opts.collation) this.opts.collation = cmdParam.opts.collation;\n          resolve(res);\n        },\n        this.authFailHandler.bind(this, reject),\n        this.addCommand.bind(this)\n      )\n    );\n  }\n\n  query(cmdParam, resolve, reject) {\n    if (!cmdParam.sql)\n      return reject(\n        Errors.createError(\n          'sql parameter is mandatory',\n          Errors.ER_UNDEFINED_SQL,\n          this.info,\n          'HY000',\n          null,\n          false,\n          cmdParam.stack\n        )\n      );\n    const cmd = new Query(\n      resolve,\n      (err) => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      },\n      this.opts,\n      cmdParam\n    );\n    this.addCommand(cmd);\n  }\n\n  prepare(cmdParam, resolve, reject) {\n    if (!cmdParam.sql)\n      return reject(Errors.createError('sql parameter is mandatory', Errors.ER_UNDEFINED_SQL, this.info, 'HY000'));\n    if (this.prepareCache && (this.sendQueue.isEmpty() || !this.receiveQueue.peekFront())) {\n      // no command in queue, database is then considered ok, and cache can be search right now\n      const cachedPrepare = this.prepareCache.get(cmdParam.sql);\n      if (cachedPrepare) {\n        return resolve(cachedPrepare);\n      }\n    }\n\n    const cmd = new Prepare(\n      resolve,\n      (err) => {\n        if (this.opts.logger.error) this.opts.logger.error(err);\n        reject(err);\n      },\n      this.opts,\n      cmdParam,\n      this\n    );\n    this.addCommand(cmd);\n  }\n\n  /**\n   * Clearing connection variables when ending.\n   *\n   * @private\n   */\n  clear() {\n    this.sendQueue.clear();\n    this.opts.removeAllListeners();\n    this.streamOut = undefined;\n    this.socket = undefined;\n  }\n\n  get threadId() {\n    return this.info ? this.info.threadId : null;\n  }\n\n  _sendNextCmdImmediate() {\n    if (!this.sendQueue.isEmpty()) {\n      setImmediate(this.nextSendCmd.bind(this));\n    }\n  }\n\n  _closePrepare(prepareResultPacket) {\n    this.addCommand(\n      new ClosePrepare(\n        new CommandParameter(null, null, null, null),\n        () => {},\n        () => {},\n        prepareResultPacket\n      )\n    );\n  }\n  _logAndReject(reject, err) {\n    if (this.opts.logger.error) this.opts.logger.error(err);\n    reject(err);\n  }\n}\n\nclass TestMethods {\n  #collation;\n  #socket;\n\n  constructor(collation, socket) {\n    this.#collation = collation;\n    this.#socket = socket;\n  }\n  getCollation() {\n    return this.#collation;\n  }\n\n  getSocket() {\n    return this.#socket;\n  }\n}\n\nmodule.exports = Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}