{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  AuditLogOptionsType,\n  AuditLogEvent\n} = require('discord-api-types/v10');\nconst AutoModerationRule = require('./AutoModerationRule');\nconst {\n  GuildScheduledEvent\n} = require('./GuildScheduledEvent');\nconst Integration = require('./Integration');\nconst Invite = require('./Invite');\nconst {\n  StageInstance\n} = require('./StageInstance');\nconst {\n  Sticker\n} = require('./Sticker');\nconst Webhook = require('./Webhook');\nconst Partials = require('../util/Partials');\nconst {\n  flatten\n} = require('../util/Util');\nconst Targets = {\n  All: 'All',\n  Guild: 'Guild',\n  GuildScheduledEvent: 'GuildScheduledEvent',\n  Channel: 'Channel',\n  User: 'User',\n  Role: 'Role',\n  Invite: 'Invite',\n  Webhook: 'Webhook',\n  Emoji: 'Emoji',\n  Message: 'Message',\n  Integration: 'Integration',\n  StageInstance: 'StageInstance',\n  Sticker: 'Sticker',\n  Thread: 'Thread',\n  ApplicationCommand: 'ApplicationCommand',\n  AutoModeration: 'AutoModeration',\n  Unknown: 'Unknown'\n};\n\n/**\n * The target of a guild audit log entry. It can be one of:\n * * A guild\n * * A channel\n * * A user\n * * A role\n * * An invite\n * * A webhook\n * * An emoji\n * * A message\n * * An integration\n * * A stage instance\n * * A sticker\n * * A guild scheduled event\n * * A thread\n * * An application command\n * * An auto moderation rule\n * * An object with an id key if target was deleted or fake entity\n * * An object where the keys represent either the new value or the old value\n * @typedef {?(Object|Guild|BaseChannel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker|\n * GuildScheduledEvent|ApplicationCommand|AutoModerationRule)} AuditLogEntryTarget\n */\n\n/**\n * The action type of an entry, e.g. `Create`. Here are the available types:\n * * Create\n * * Delete\n * * Update\n * * All\n * @typedef {string} AuditLogActionType\n */\n\n/**\n * The target type of an entry. Here are the available types:\n * * Guild\n * * Channel\n * * User\n * * Role\n * * Invite\n * * Webhook\n * * Emoji\n * * Message\n * * Integration\n * * StageInstance\n * * Sticker\n * * Thread\n * * GuildScheduledEvent\n * * ApplicationCommandPermission\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  /**\n   * Key mirror of all available audit log targets.\n   * @type {Object<string, string>}\n   * @memberof GuildAuditLogsEntry\n   */\n  static Targets = Targets;\n  constructor(logs, guild, data) {\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = GuildAuditLogsEntry.targetType(data.action_type);\n    const targetType = this.targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogsEntry.actionType(data.action_type);\n\n    /**\n     * The type of action that occured.\n     * @type {AuditLogEvent}\n     */\n    this.action = data.action_type;\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason ?? null;\n\n    /**\n     * The user that executed this entry\n     * @type {?User}\n     */\n    this.executor = data.user_id ? guild.client.options.partials.includes(Partials.User) ? guild.client.users._add({\n      id: data.user_id\n    }) : guild.client.users.cache.get(data.user_id) : null;\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {Object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * <warn>For application command permissions updates the key is the id of the user, channel,\n     * role, or a permission constant that was updated instead of an actual property name</warn>\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes?.map(c => ({\n      key: c.key,\n      old: c.old_value,\n      new: c.new_value\n    })) ?? [];\n\n    /**\n     * The entry's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?(Object|Role|GuildMember)}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case AuditLogEvent.MemberPrune:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days)\n        };\n        break;\n      case AuditLogEvent.MemberMove:\n      case AuditLogEvent.MessageDelete:\n      case AuditLogEvent.MessageBulkDelete:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) ?? {\n            id: data.options.channel_id\n          },\n          count: Number(data.options.count)\n        };\n        break;\n      case AuditLogEvent.MessagePin:\n      case AuditLogEvent.MessageUnpin:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) ?? {\n            id: data.options.channel_id\n          },\n          messageId: data.options.message_id\n        };\n        break;\n      case AuditLogEvent.MemberDisconnect:\n        this.extra = {\n          count: Number(data.options.count)\n        };\n        break;\n      case AuditLogEvent.ChannelOverwriteCreate:\n      case AuditLogEvent.ChannelOverwriteUpdate:\n      case AuditLogEvent.ChannelOverwriteDelete:\n        switch (data.options.type) {\n          case AuditLogOptionsType.Role:\n            this.extra = guild.roles.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: AuditLogOptionsType.Role\n            };\n            break;\n          case AuditLogOptionsType.Member:\n            this.extra = guild.members.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              type: AuditLogOptionsType.Member\n            };\n            break;\n          default:\n            break;\n        }\n        break;\n      case AuditLogEvent.StageInstanceCreate:\n      case AuditLogEvent.StageInstanceDelete:\n      case AuditLogEvent.StageInstanceUpdate:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? {\n            id: data.options?.channel_id\n          }\n        };\n        break;\n      case AuditLogEvent.ApplicationCommandPermissionUpdate:\n        this.extra = {\n          applicationId: data.options.application_id\n        };\n        break;\n      case AuditLogEvent.AutoModerationBlockMessage:\n      case AuditLogEvent.AutoModerationFlagToChannel:\n      case AuditLogEvent.AutoModerationUserCommunicationDisabled:\n        this.extra = {\n          autoModerationRuleName: data.options.auto_moderation_rule_name,\n          autoModerationRuleTriggerType: data.options.auto_moderation_rule_trigger_type\n        };\n        break;\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.Unknown) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MemberDisconnect and similar types do not provide a target_id.\n    } else if (targetType === Targets.User && data.target_id) {\n      this.target = guild.client.options.partials.includes(Partials.User) ? guild.client.users._add({\n        id: data.target_id\n      }) : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.Guild) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.Webhook) {\n      this.target = logs.webhooks.get(data.target_id) ?? new Webhook(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.Invite) {\n      let change = this.changes.find(c => c.key === 'code');\n      change = change.new ?? change.old;\n      this.target = guild.invites.cache.get(change) ?? new Invite(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        guild\n      }));\n    } else if (targetType === Targets.Message) {\n      // Discord sends a channel id for the MessageBulkDelete action type.\n      this.target = data.action_type === AuditLogEvent.MessageBulkDelete ? guild.channels.cache.get(data.target_id) ?? {\n        id: data.target_id\n      } : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.Integration) {\n      this.target = logs.integrations.get(data.target_id) ?? new Integration(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }), guild);\n    } else if (targetType === Targets.Channel || targetType === Targets.Thread) {\n      this.target = guild.channels.cache.get(data.target_id) ?? this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      });\n    } else if (targetType === Targets.StageInstance) {\n      this.target = guild.stageInstances.cache.get(data.target_id) ?? new StageInstance(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        channel_id: data.options?.channel_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.Sticker) {\n      this.target = guild.stickers.cache.get(data.target_id) ?? new Sticker(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }));\n    } else if (targetType === Targets.GuildScheduledEvent) {\n      this.target = guild.scheduledEvents.cache.get(data.target_id) ?? new GuildScheduledEvent(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.ApplicationCommand) {\n      this.target = logs.applicationCommands.get(data.target_id) ?? {\n        id: data.target_id\n      };\n    } else if (targetType === Targets.AutoModeration) {\n      this.target = guild.autoModerationRules.cache.get(data.target_id) ?? new AutoModerationRule(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }), guild);\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? {\n        id: data.target_id\n      };\n    }\n  }\n\n  /**\n   * Finds the target type of a guild audit log entry.\n   * @param {AuditLogEvent} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.Guild;\n    if (target < 20) return Targets.Channel;\n    if (target < 30) return Targets.User;\n    if (target < 40) return Targets.Role;\n    if (target < 50) return Targets.Invite;\n    if (target < 60) return Targets.Webhook;\n    if (target < 70) return Targets.Emoji;\n    if (target < 80) return Targets.Message;\n    if (target < 83) return Targets.Integration;\n    if (target < 86) return Targets.StageInstance;\n    if (target < 100) return Targets.Sticker;\n    if (target < 110) return Targets.GuildScheduledEvent;\n    if (target < 120) return Targets.Thread;\n    if (target < 130) return Targets.ApplicationCommand;\n    if (target >= 140 && target < 150) return Targets.AutoModeration;\n    return Targets.Unknown;\n  }\n\n  /**\n   * Finds the action type from the guild audit log entry action.\n   * @param {AuditLogEvent} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if ([AuditLogEvent.ChannelCreate, AuditLogEvent.ChannelOverwriteCreate, AuditLogEvent.MemberBanRemove, AuditLogEvent.BotAdd, AuditLogEvent.RoleCreate, AuditLogEvent.InviteCreate, AuditLogEvent.WebhookCreate, AuditLogEvent.EmojiCreate, AuditLogEvent.MessagePin, AuditLogEvent.IntegrationCreate, AuditLogEvent.StageInstanceCreate, AuditLogEvent.StickerCreate, AuditLogEvent.GuildScheduledEventCreate, AuditLogEvent.ThreadCreate, AuditLogEvent.AutoModerationRuleCreate, AuditLogEvent.AutoModerationBlockMessage].includes(action)) {\n      return 'Create';\n    }\n    if ([AuditLogEvent.ChannelDelete, AuditLogEvent.ChannelOverwriteDelete, AuditLogEvent.MemberKick, AuditLogEvent.MemberPrune, AuditLogEvent.MemberBanAdd, AuditLogEvent.MemberDisconnect, AuditLogEvent.RoleDelete, AuditLogEvent.InviteDelete, AuditLogEvent.WebhookDelete, AuditLogEvent.EmojiDelete, AuditLogEvent.MessageDelete, AuditLogEvent.MessageBulkDelete, AuditLogEvent.MessageUnpin, AuditLogEvent.IntegrationDelete, AuditLogEvent.StageInstanceDelete, AuditLogEvent.StickerDelete, AuditLogEvent.GuildScheduledEventDelete, AuditLogEvent.ThreadDelete, AuditLogEvent.AutoModerationRuleDelete].includes(action)) {\n      return 'Delete';\n    }\n    if ([AuditLogEvent.GuildUpdate, AuditLogEvent.ChannelUpdate, AuditLogEvent.ChannelOverwriteUpdate, AuditLogEvent.MemberUpdate, AuditLogEvent.MemberRoleUpdate, AuditLogEvent.MemberMove, AuditLogEvent.RoleUpdate, AuditLogEvent.InviteUpdate, AuditLogEvent.WebhookUpdate, AuditLogEvent.EmojiUpdate, AuditLogEvent.IntegrationUpdate, AuditLogEvent.StageInstanceUpdate, AuditLogEvent.StickerUpdate, AuditLogEvent.GuildScheduledEventUpdate, AuditLogEvent.ThreadUpdate, AuditLogEvent.ApplicationCommandPermissionUpdate, AuditLogEvent.AutoModerationRuleUpdate].includes(action)) {\n      return 'Update';\n    }\n    return 'All';\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  toJSON() {\n    return flatten(this, {\n      createdTimestamp: true\n    });\n  }\n}\nmodule.exports = GuildAuditLogsEntry;","map":{"version":3,"names":["DiscordSnowflake","require","AuditLogOptionsType","AuditLogEvent","AutoModerationRule","GuildScheduledEvent","Integration","Invite","StageInstance","Sticker","Webhook","Partials","flatten","Targets","All","Guild","Channel","User","Role","Emoji","Message","Thread","ApplicationCommand","AutoModeration","Unknown","GuildAuditLogsEntry","constructor","logs","guild","data","targetType","action_type","actionType","action","reason","executor","user_id","client","options","partials","includes","users","_add","id","cache","get","changes","map","c","key","old","old_value","new","new_value","extra","MemberPrune","removed","Number","members_removed","days","delete_member_days","MemberMove","MessageDelete","MessageBulkDelete","channel","channels","channel_id","count","MessagePin","MessageUnpin","messageId","message_id","MemberDisconnect","ChannelOverwriteCreate","ChannelOverwriteUpdate","ChannelOverwriteDelete","type","roles","name","role_name","Member","members","StageInstanceCreate","StageInstanceDelete","StageInstanceUpdate","ApplicationCommandPermissionUpdate","applicationId","application_id","AutoModerationBlockMessage","AutoModerationFlagToChannel","AutoModerationUserCommunicationDisabled","autoModerationRuleName","auto_moderation_rule_name","autoModerationRuleTriggerType","auto_moderation_rule_trigger_type","target","reduce","o","target_id","guilds","webhooks","guild_id","change","find","invites","integrations","stageInstances","stickers","scheduledEvents","applicationCommands","autoModerationRules","toLowerCase","ChannelCreate","MemberBanRemove","BotAdd","RoleCreate","InviteCreate","WebhookCreate","EmojiCreate","IntegrationCreate","StickerCreate","GuildScheduledEventCreate","ThreadCreate","AutoModerationRuleCreate","ChannelDelete","MemberKick","MemberBanAdd","RoleDelete","InviteDelete","WebhookDelete","EmojiDelete","IntegrationDelete","StickerDelete","GuildScheduledEventDelete","ThreadDelete","AutoModerationRuleDelete","GuildUpdate","ChannelUpdate","MemberUpdate","MemberRoleUpdate","RoleUpdate","InviteUpdate","WebhookUpdate","EmojiUpdate","IntegrationUpdate","StickerUpdate","GuildScheduledEventUpdate","ThreadUpdate","AutoModerationRuleUpdate","createdTimestamp","timestampFrom","createdAt","Date","toJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildAuditLogsEntry.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { AuditLogOptionsType, AuditLogEvent } = require('discord-api-types/v10');\nconst AutoModerationRule = require('./AutoModerationRule');\nconst { GuildScheduledEvent } = require('./GuildScheduledEvent');\nconst Integration = require('./Integration');\nconst Invite = require('./Invite');\nconst { StageInstance } = require('./StageInstance');\nconst { Sticker } = require('./Sticker');\nconst Webhook = require('./Webhook');\nconst Partials = require('../util/Partials');\nconst { flatten } = require('../util/Util');\n\nconst Targets = {\n  All: 'All',\n  Guild: 'Guild',\n  GuildScheduledEvent: 'GuildScheduledEvent',\n  Channel: 'Channel',\n  User: 'User',\n  Role: 'Role',\n  Invite: 'Invite',\n  Webhook: 'Webhook',\n  Emoji: 'Emoji',\n  Message: 'Message',\n  Integration: 'Integration',\n  StageInstance: 'StageInstance',\n  Sticker: 'Sticker',\n  Thread: 'Thread',\n  ApplicationCommand: 'ApplicationCommand',\n  AutoModeration: 'AutoModeration',\n  Unknown: 'Unknown',\n};\n\n/**\n * The target of a guild audit log entry. It can be one of:\n * * A guild\n * * A channel\n * * A user\n * * A role\n * * An invite\n * * A webhook\n * * An emoji\n * * A message\n * * An integration\n * * A stage instance\n * * A sticker\n * * A guild scheduled event\n * * A thread\n * * An application command\n * * An auto moderation rule\n * * An object with an id key if target was deleted or fake entity\n * * An object where the keys represent either the new value or the old value\n * @typedef {?(Object|Guild|BaseChannel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker|\n * GuildScheduledEvent|ApplicationCommand|AutoModerationRule)} AuditLogEntryTarget\n */\n\n/**\n * The action type of an entry, e.g. `Create`. Here are the available types:\n * * Create\n * * Delete\n * * Update\n * * All\n * @typedef {string} AuditLogActionType\n */\n\n/**\n * The target type of an entry. Here are the available types:\n * * Guild\n * * Channel\n * * User\n * * Role\n * * Invite\n * * Webhook\n * * Emoji\n * * Message\n * * Integration\n * * StageInstance\n * * Sticker\n * * Thread\n * * GuildScheduledEvent\n * * ApplicationCommandPermission\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  /**\n   * Key mirror of all available audit log targets.\n   * @type {Object<string, string>}\n   * @memberof GuildAuditLogsEntry\n   */\n  static Targets = Targets;\n\n  constructor(logs, guild, data) {\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = GuildAuditLogsEntry.targetType(data.action_type);\n    const targetType = this.targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogsEntry.actionType(data.action_type);\n\n    /**\n     * The type of action that occured.\n     * @type {AuditLogEvent}\n     */\n    this.action = data.action_type;\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason ?? null;\n\n    /**\n     * The user that executed this entry\n     * @type {?User}\n     */\n    this.executor = data.user_id\n      ? guild.client.options.partials.includes(Partials.User)\n        ? guild.client.users._add({ id: data.user_id })\n        : guild.client.users.cache.get(data.user_id)\n      : null;\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {Object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * <warn>For application command permissions updates the key is the id of the user, channel,\n     * role, or a permission constant that was updated instead of an actual property name</warn>\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes?.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) ?? [];\n\n    /**\n     * The entry's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?(Object|Role|GuildMember)}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case AuditLogEvent.MemberPrune:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case AuditLogEvent.MemberMove:\n      case AuditLogEvent.MessageDelete:\n      case AuditLogEvent.MessageBulkDelete:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case AuditLogEvent.MessagePin:\n      case AuditLogEvent.MessageUnpin:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          messageId: data.options.message_id,\n        };\n        break;\n\n      case AuditLogEvent.MemberDisconnect:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case AuditLogEvent.ChannelOverwriteCreate:\n      case AuditLogEvent.ChannelOverwriteUpdate:\n      case AuditLogEvent.ChannelOverwriteDelete:\n        switch (data.options.type) {\n          case AuditLogOptionsType.Role:\n            this.extra = guild.roles.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: AuditLogOptionsType.Role,\n            };\n            break;\n\n          case AuditLogOptionsType.Member:\n            this.extra = guild.members.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              type: AuditLogOptionsType.Member,\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      case AuditLogEvent.StageInstanceCreate:\n      case AuditLogEvent.StageInstanceDelete:\n      case AuditLogEvent.StageInstanceUpdate:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },\n        };\n        break;\n\n      case AuditLogEvent.ApplicationCommandPermissionUpdate:\n        this.extra = {\n          applicationId: data.options.application_id,\n        };\n        break;\n\n      case AuditLogEvent.AutoModerationBlockMessage:\n      case AuditLogEvent.AutoModerationFlagToChannel:\n      case AuditLogEvent.AutoModerationUserCommunicationDisabled:\n        this.extra = {\n          autoModerationRuleName: data.options.auto_moderation_rule_name,\n          autoModerationRuleTriggerType: data.options.auto_moderation_rule_trigger_type,\n        };\n        break;\n\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.Unknown) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MemberDisconnect and similar types do not provide a target_id.\n    } else if (targetType === Targets.User && data.target_id) {\n      this.target = guild.client.options.partials.includes(Partials.User)\n        ? guild.client.users._add({ id: data.target_id })\n        : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.Guild) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.Webhook) {\n      this.target =\n        logs.webhooks.get(data.target_id) ??\n        new Webhook(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.Invite) {\n      let change = this.changes.find(c => c.key === 'code');\n      change = change.new ?? change.old;\n\n      this.target =\n        guild.invites.cache.get(change) ??\n        new Invite(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { guild },\n          ),\n        );\n    } else if (targetType === Targets.Message) {\n      // Discord sends a channel id for the MessageBulkDelete action type.\n      this.target =\n        data.action_type === AuditLogEvent.MessageBulkDelete\n          ? guild.channels.cache.get(data.target_id) ?? { id: data.target_id }\n          : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.Integration) {\n      this.target =\n        logs.integrations.get(data.target_id) ??\n        new Integration(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n          guild,\n        );\n    } else if (targetType === Targets.Channel || targetType === Targets.Thread) {\n      this.target =\n        guild.channels.cache.get(data.target_id) ??\n        this.changes.reduce(\n          (o, c) => {\n            o[c.key] = c.new ?? c.old;\n            return o;\n          },\n          { id: data.target_id },\n        );\n    } else if (targetType === Targets.StageInstance) {\n      this.target =\n        guild.stageInstances.cache.get(data.target_id) ??\n        new StageInstance(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              channel_id: data.options?.channel_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.Sticker) {\n      this.target =\n        guild.stickers.cache.get(data.target_id) ??\n        new Sticker(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n        );\n    } else if (targetType === Targets.GuildScheduledEvent) {\n      this.target =\n        guild.scheduledEvents.cache.get(data.target_id) ??\n        new GuildScheduledEvent(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id, guild_id: guild.id },\n          ),\n        );\n    } else if (targetType === Targets.ApplicationCommand) {\n      this.target = logs.applicationCommands.get(data.target_id) ?? { id: data.target_id };\n    } else if (targetType === Targets.AutoModeration) {\n      this.target =\n        guild.autoModerationRules.cache.get(data.target_id) ??\n        new AutoModerationRule(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id, guild_id: guild.id },\n          ),\n          guild,\n        );\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? { id: data.target_id };\n    }\n  }\n\n  /**\n   * Finds the target type of a guild audit log entry.\n   * @param {AuditLogEvent} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.Guild;\n    if (target < 20) return Targets.Channel;\n    if (target < 30) return Targets.User;\n    if (target < 40) return Targets.Role;\n    if (target < 50) return Targets.Invite;\n    if (target < 60) return Targets.Webhook;\n    if (target < 70) return Targets.Emoji;\n    if (target < 80) return Targets.Message;\n    if (target < 83) return Targets.Integration;\n    if (target < 86) return Targets.StageInstance;\n    if (target < 100) return Targets.Sticker;\n    if (target < 110) return Targets.GuildScheduledEvent;\n    if (target < 120) return Targets.Thread;\n    if (target < 130) return Targets.ApplicationCommand;\n    if (target >= 140 && target < 150) return Targets.AutoModeration;\n    return Targets.Unknown;\n  }\n\n  /**\n   * Finds the action type from the guild audit log entry action.\n   * @param {AuditLogEvent} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        AuditLogEvent.ChannelCreate,\n        AuditLogEvent.ChannelOverwriteCreate,\n        AuditLogEvent.MemberBanRemove,\n        AuditLogEvent.BotAdd,\n        AuditLogEvent.RoleCreate,\n        AuditLogEvent.InviteCreate,\n        AuditLogEvent.WebhookCreate,\n        AuditLogEvent.EmojiCreate,\n        AuditLogEvent.MessagePin,\n        AuditLogEvent.IntegrationCreate,\n        AuditLogEvent.StageInstanceCreate,\n        AuditLogEvent.StickerCreate,\n        AuditLogEvent.GuildScheduledEventCreate,\n        AuditLogEvent.ThreadCreate,\n        AuditLogEvent.AutoModerationRuleCreate,\n        AuditLogEvent.AutoModerationBlockMessage,\n      ].includes(action)\n    ) {\n      return 'Create';\n    }\n\n    if (\n      [\n        AuditLogEvent.ChannelDelete,\n        AuditLogEvent.ChannelOverwriteDelete,\n        AuditLogEvent.MemberKick,\n        AuditLogEvent.MemberPrune,\n        AuditLogEvent.MemberBanAdd,\n        AuditLogEvent.MemberDisconnect,\n        AuditLogEvent.RoleDelete,\n        AuditLogEvent.InviteDelete,\n        AuditLogEvent.WebhookDelete,\n        AuditLogEvent.EmojiDelete,\n        AuditLogEvent.MessageDelete,\n        AuditLogEvent.MessageBulkDelete,\n        AuditLogEvent.MessageUnpin,\n        AuditLogEvent.IntegrationDelete,\n        AuditLogEvent.StageInstanceDelete,\n        AuditLogEvent.StickerDelete,\n        AuditLogEvent.GuildScheduledEventDelete,\n        AuditLogEvent.ThreadDelete,\n        AuditLogEvent.AutoModerationRuleDelete,\n      ].includes(action)\n    ) {\n      return 'Delete';\n    }\n\n    if (\n      [\n        AuditLogEvent.GuildUpdate,\n        AuditLogEvent.ChannelUpdate,\n        AuditLogEvent.ChannelOverwriteUpdate,\n        AuditLogEvent.MemberUpdate,\n        AuditLogEvent.MemberRoleUpdate,\n        AuditLogEvent.MemberMove,\n        AuditLogEvent.RoleUpdate,\n        AuditLogEvent.InviteUpdate,\n        AuditLogEvent.WebhookUpdate,\n        AuditLogEvent.EmojiUpdate,\n        AuditLogEvent.IntegrationUpdate,\n        AuditLogEvent.StageInstanceUpdate,\n        AuditLogEvent.StickerUpdate,\n        AuditLogEvent.GuildScheduledEventUpdate,\n        AuditLogEvent.ThreadUpdate,\n        AuditLogEvent.ApplicationCommandPermissionUpdate,\n        AuditLogEvent.AutoModerationRuleUpdate,\n      ].includes(action)\n    ) {\n      return 'Update';\n    }\n\n    return 'All';\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return flatten(this, { createdTimestamp: true });\n  }\n}\n\nmodule.exports = GuildAuditLogsEntry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}