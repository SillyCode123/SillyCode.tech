{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Collection: () => Collection,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/collection.ts\nvar Collection = class extends Map {\n  ensure(key, defaultValueGenerator) {\n    if (this.has(key)) return this.get(key);\n    if (typeof defaultValueGenerator !== \"function\") throw new TypeError(`${defaultValueGenerator} is not a function`);\n    const defaultValue = defaultValueGenerator(key, this);\n    this.set(key, defaultValue);\n    return defaultValue;\n  }\n  hasAll() {\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n    return keys.every(k => super.has(k));\n  }\n  hasAny() {\n    for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      keys[_key2] = arguments[_key2];\n    }\n    return keys.some(k => super.has(k));\n  }\n  first(amount) {\n    if (typeof amount === \"undefined\") return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n  firstKey(amount) {\n    if (typeof amount === \"undefined\") return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n  last(amount) {\n    const arr = [...this.values()];\n    if (typeof amount === \"undefined\") return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  lastKey(amount) {\n    const arr = [...this.keys()];\n    if (typeof amount === \"undefined\") return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  at(index) {\n    index = Math.floor(index);\n    const arr = [...this.values()];\n    return arr.at(index);\n  }\n  keyAt(index) {\n    index = Math.floor(index);\n    const arr = [...this.keys()];\n    return arr.at(index);\n  }\n  random(amount) {\n    const arr = [...this.values()];\n    if (typeof amount === \"undefined\") return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from({\n      length: Math.min(amount, arr.length)\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n  randomKey(amount) {\n    const arr = [...this.keys()];\n    if (typeof amount === \"undefined\") return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from({\n      length: Math.min(amount, arr.length)\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n  reverse() {\n    const entries = [...this.entries()].reverse();\n    this.clear();\n    for (const [key, value] of entries) this.set(key, value);\n    return this;\n  }\n  find(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n    return void 0;\n  }\n  findKey(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n    return void 0;\n  }\n  sweep(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    const previousSize = this.size;\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n    return previousSize - this.size;\n  }\n  filter(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n  partition(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    const results = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n    return results;\n  }\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n  map(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({\n      length: this.size\n    }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n  mapValues(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n    return coll;\n  }\n  some(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n  every(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n  reduce(fn, initialValue) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    let accumulator;\n    if (typeof initialValue !== \"undefined\") {\n      accumulator = initialValue;\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n      return accumulator;\n    }\n    let first = true;\n    for (const [key, val] of this) {\n      if (first) {\n        accumulator = val;\n        first = false;\n        continue;\n      }\n      accumulator = fn(accumulator, val, key, this);\n    }\n    if (first) {\n      throw new TypeError(\"Reduce of empty collection with no initial value\");\n    }\n    return accumulator;\n  }\n  each(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    this.forEach(fn, thisArg);\n    return this;\n  }\n  tap(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (typeof thisArg !== \"undefined\") fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  concat() {\n    const newColl = this.clone();\n    for (var _len3 = arguments.length, collections = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      collections[_key3] = arguments[_key3];\n    }\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  sort() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Collection.defaultSort;\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n    super.clear();\n    for (const [k, v] of entries) {\n      super.set(k, v);\n    }\n    return this;\n  }\n  intersect(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [k, v] of other) {\n      if (this.has(k) && Object.is(v, this.get(k))) {\n        coll.set(k, v);\n      }\n    }\n    return coll;\n  }\n  subtract(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [k, v] of this) {\n      if (!other.has(k) || !Object.is(v, other.get(k))) {\n        coll.set(k, v);\n      }\n    }\n    return coll;\n  }\n  difference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [k, v] of other) {\n      if (!this.has(k)) coll.set(k, v);\n    }\n    for (const [k, v] of this) {\n      if (!other.has(k)) coll.set(k, v);\n    }\n    return coll;\n  }\n  merge(other, whenInSelf, whenInOther, whenInBoth) {\n    const coll = new this.constructor[Symbol.species]();\n    const keys = /* @__PURE__ */new Set([...this.keys(), ...other.keys()]);\n    for (const k of keys) {\n      const hasInSelf = this.has(k);\n      const hasInOther = other.has(k);\n      if (hasInSelf && hasInOther) {\n        const r = whenInBoth(this.get(k), other.get(k), k);\n        if (r.keep) coll.set(k, r.value);\n      } else if (hasInSelf) {\n        const r = whenInSelf(this.get(k), k);\n        if (r.keep) coll.set(k, r.value);\n      } else if (hasInOther) {\n        const r = whenInOther(other.get(k), k);\n        if (r.keep) coll.set(k, r.value);\n      }\n    }\n    return coll;\n  }\n  sorted() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Collection.defaultSort;\n    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n  toJSON() {\n    return [...this.values()];\n  }\n  static defaultSort(firstValue, secondValue) {\n    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n  }\n  static combineEntries(entries, combine) {\n    const coll = new Collection();\n    for (const [k, v] of entries) {\n      if (coll.has(k)) {\n        coll.set(k, combine(coll.get(k), v, k));\n      } else {\n        coll.set(k, v);\n      }\n    }\n    return coll;\n  }\n};\n__name(Collection, \"Collection\");\n\n// src/index.ts\nvar version = \"1.3.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Collection,\n  version\n});","map":{"version":3,"mappings":"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","names":["__export","Collection","version","module","Map","ensure","key","defaultValueGenerator","has","get","TypeError","defaultValue","set","hasAll","keys","every","k","hasAny","some","first","amount","values","next","value","last","Math","min","size","iter","Array","from","length","firstKey","lastKey","arr","slice","at","index","floor","keyAt","random","splice","randomKey","reverse","entries","clear","find","fn","thisArg","bind","val","findKey","sweep","previousSize","delete","filter","results","constructor","Symbol","species","partition","flatMap","collections","map","concat","mapValues","coll","reduce","initialValue","accumulator","each","forEach","tap","clone","newColl","equals","collection","sort","compareFunction","defaultSort","a","b","v","intersect","other","Object","is","subtract","difference","merge","whenInSelf","whenInOther","whenInBoth","Set","hasInSelf","hasInOther","r","keep","sorted","av","bv","ak","bk","toJSON","firstValue","secondValue","Number","combineEntries","combine","__name"],"sources":["J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\collection\\src\\index.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\collection\\src\\collection.ts"],"sourcesContent":["export * from './collection.js';\n\n/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/collection/#readme | @discordjs/collection} version\n * that you are currently using.\n */\n// This needs to explicitly be `string` so it is not typed as a \"const string\" that gets injected by esbuild\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '1.3.0';\n","/* eslint-disable id-length */\n/* eslint-disable no-param-reassign */\n/**\n * @internal\n */\nexport interface CollectionConstructor {\n\tnew (): Collection<unknown, unknown>;\n\tnew <K, V>(entries?: readonly (readonly [K, V])[] | null): Collection<K, V>;\n\tnew <K, V>(iterable: Iterable<readonly [K, V]>): Collection<K, V>;\n\treadonly prototype: Collection<unknown, unknown>;\n\treadonly [Symbol.species]: CollectionConstructor;\n}\n\n/**\n * Represents an immutable version of a collection\n */\nexport type ReadonlyCollection<K, V> = Omit<\n\tCollection<K, V>,\n\t'delete' | 'ensure' | 'forEach' | 'get' | 'reverse' | 'set' | 'sort' | 'sweep'\n> &\n\tReadonlyMap<K, V>;\n\n/**\n * Separate interface for the constructor so that emitted js does not have a constructor that overwrites itself\n *\n * @internal\n */\nexport interface Collection<K, V> extends Map<K, V> {\n\tconstructor: CollectionConstructor;\n}\n\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n *\n * @typeParam K - The key type this collection holds\n * @typeParam V - The value type this collection holds\n */\nexport class Collection<K, V> extends Map<K, V> {\n\t/**\n\t * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.\n\t *\n\t * @param key - The key to get if it exists, or set otherwise\n\t * @param defaultValueGenerator - A function that generates the default value\n\t * @example\n\t * ```ts\n\t * collection.ensure(guildId, () => defaultGuildConfig);\n\t * ```\n\t */\n\tpublic ensure(key: K, defaultValueGenerator: (key: K, collection: this) => V): V {\n\t\tif (this.has(key)) return this.get(key)!;\n\t\tif (typeof defaultValueGenerator !== 'function') throw new TypeError(`${defaultValueGenerator} is not a function`);\n\t\tconst defaultValue = defaultValueGenerator(key, this);\n\t\tthis.set(key, defaultValue);\n\t\treturn defaultValue;\n\t}\n\n\t/**\n\t * Checks if all of the elements exist in the collection.\n\t *\n\t * @param keys - The keys of the elements to check for\n\t * @returns `true` if all of the elements exist, `false` if at least one does not exist.\n\t */\n\tpublic hasAll(...keys: K[]) {\n\t\treturn keys.every((k) => super.has(k));\n\t}\n\n\t/**\n\t * Checks if any of the elements exist in the collection.\n\t *\n\t * @param keys - The keys of the elements to check for\n\t * @returns `true` if any of the elements exist, `false` if none exist.\n\t */\n\tpublic hasAny(...keys: K[]) {\n\t\treturn keys.some((k) => super.has(k));\n\t}\n\n\t/**\n\t * Obtains the first value(s) in this collection.\n\t *\n\t * @param amount - Amount of values to obtain from the beginning\n\t * @returns A single value if no amount is provided or an array of values, starting from the end if amount is negative\n\t */\n\tpublic first(): V | undefined;\n\tpublic first(amount: number): V[];\n\tpublic first(amount?: number): V | V[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.values().next().value;\n\t\tif (amount < 0) return this.last(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.values();\n\t\treturn Array.from({ length: amount }, (): V => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the first key(s) in this collection.\n\t *\n\t * @param amount - Amount of keys to obtain from the beginning\n\t * @returns A single key if no amount is provided or an array of keys, starting from the end if\n\t * amount is negative\n\t */\n\tpublic firstKey(): K | undefined;\n\tpublic firstKey(amount: number): K[];\n\tpublic firstKey(amount?: number): K | K[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.keys().next().value;\n\t\tif (amount < 0) return this.lastKey(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.keys();\n\t\treturn Array.from({ length: amount }, (): K => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the last value(s) in this collection.\n\t *\n\t * @param amount - Amount of values to obtain from the end\n\t * @returns A single value if no amount is provided or an array of values, starting from the start if\n\t * amount is negative\n\t */\n\tpublic last(): V | undefined;\n\tpublic last(amount: number): V[];\n\tpublic last(amount?: number): V | V[] | undefined {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.first(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains the last key(s) in this collection.\n\t *\n\t * @param amount - Amount of keys to obtain from the end\n\t * @returns A single key if no amount is provided or an array of keys, starting from the start if\n\t * amount is negative\n\t */\n\tpublic lastKey(): K | undefined;\n\tpublic lastKey(amount: number): K[];\n\tpublic lastKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.firstKey(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n\t * Returns the item at a given index, allowing for positive and negative integers.\n\t * Negative integers count back from the last item in the collection.\n\t *\n\t * @param index - The index of the element to obtain\n\t */\n\tpublic at(index: number) {\n\t\tindex = Math.floor(index);\n\t\tconst arr = [...this.values()];\n\t\treturn arr.at(index);\n\t}\n\n\t/**\n\t * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n\t * Returns the key at a given index, allowing for positive and negative integers.\n\t * Negative integers count back from the last item in the collection.\n\t *\n\t * @param index - The index of the key to obtain\n\t */\n\tpublic keyAt(index: number) {\n\t\tindex = Math.floor(index);\n\t\tconst arr = [...this.keys()];\n\t\treturn arr.at(index);\n\t}\n\n\t/**\n\t * Obtains unique random value(s) from this collection.\n\t *\n\t * @param amount - Amount of values to obtain randomly\n\t * @returns A single value if no amount is provided or an array of values\n\t */\n\tpublic random(): V | undefined;\n\tpublic random(amount: number): V[];\n\tpublic random(amount?: number): V | V[] | undefined {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): V => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]!,\n\t\t);\n\t}\n\n\t/**\n\t * Obtains unique random key(s) from this collection.\n\t *\n\t * @param amount - Amount of keys to obtain randomly\n\t * @returns A single key if no amount is provided or an array\n\t */\n\tpublic randomKey(): K | undefined;\n\tpublic randomKey(amount: number): K[];\n\tpublic randomKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): K => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]!,\n\t\t);\n\t}\n\n\t/**\n\t * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}\n\t * but returns a Collection instead of an Array.\n\t */\n\tpublic reverse() {\n\t\tconst entries = [...this.entries()].reverse();\n\t\tthis.clear();\n\t\tfor (const [key, value] of entries) this.set(key, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Searches for a single item where the given function returns a truthy value. This behaves like\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find | Array.find()}.\n\t * All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n\t * should use the `get` method. See\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get | MDN} for details.\n\t *\n\t * @param fn - The function to test with (should return boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.find(user => user.username === 'Bob');\n\t * ```\n\t */\n\tpublic find<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): V2 | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => unknown): V | undefined;\n\tpublic find<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): V2 | undefined;\n\tpublic find<This>(fn: (this: This, value: V, key: K, collection: this) => unknown, thisArg: This): V | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): V | undefined {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return val;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Searches for the key of a single item where the given function returns a truthy value. This behaves like\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex | Array.findIndex()},\n\t * but returns the key rather than the positional index.\n\t *\n\t * @param fn - The function to test with (should return boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.findKey(user => user.username === 'Bob');\n\t * ```\n\t */\n\tpublic findKey<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): K2 | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => unknown): K | undefined;\n\tpublic findKey<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): K2 | undefined;\n\tpublic findKey<This>(fn: (this: This, value: V, key: K, collection: this) => unknown, thisArg: This): K | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): K | undefined {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return key;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Removes items that satisfy the provided filter function.\n\t *\n\t * @param fn - Function used to test (should return a boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @returns The number of removed entries\n\t */\n\tpublic sweep(fn: (value: V, key: K, collection: this) => unknown): number;\n\tpublic sweep<T>(fn: (this: T, value: V, key: K, collection: this) => unknown, thisArg: T): number;\n\tpublic sweep(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): number {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst previousSize = this.size;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) this.delete(key);\n\t\t}\n\n\t\treturn previousSize - this.size;\n\t}\n\n\t/**\n\t * Identical to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter | Array.filter()},\n\t * but returns a Collection instead of an Array.\n\t *\n\t * @param fn - The function to test with (should return boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.filter(user => user.username === 'Bob');\n\t * ```\n\t */\n\tpublic filter<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): Collection<K2, V>;\n\tpublic filter<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): Collection<K, V2>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => unknown): Collection<K, V>;\n\tpublic filter<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): Collection<K2, V>;\n\tpublic filter<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): Collection<K, V2>;\n\tpublic filter<This>(fn: (this: This, value: V, key: K, collection: this) => unknown, thisArg: This): Collection<K, V>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): Collection<K, V> {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) results.set(key, val);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Partitions the collection into two collections where the first collection\n\t * contains the items that passed and the second contains the items that failed.\n\t *\n\t * @param fn - Function used to test (should return a boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * const [big, small] = collection.partition(guild => guild.memberCount > 250);\n\t * ```\n\t */\n\tpublic partition<K2 extends K>(\n\t\tfn: (value: V, key: K, collection: this) => key is K2,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<V2 extends V>(\n\t\tfn: (value: V, key: K, collection: this) => value is V2,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition(fn: (value: V, key: K, collection: this) => unknown): [Collection<K, V>, Collection<K, V>];\n\tpublic partition<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition<This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => unknown,\n\t\tthisArg: This,\n\t): [Collection<K, V>, Collection<K, V>];\n\tpublic partition(\n\t\tfn: (value: V, key: K, collection: this) => unknown,\n\t\tthisArg?: unknown,\n\t): [Collection<K, V>, Collection<K, V>] {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results: [Collection<K, V>, Collection<K, V>] = [\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t];\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) {\n\t\t\t\tresults[0].set(key, val);\n\t\t\t} else {\n\t\t\t\tresults[1].set(key, val);\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap | Array.flatMap()}.\n\t *\n\t * @param fn - Function that produces a new Collection\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.flatMap(guild => guild.members.cache);\n\t * ```\n\t */\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>): Collection<K, T>;\n\tpublic flatMap<T, This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => Collection<K, T>,\n\t\tthisArg: This,\n\t): Collection<K, T>;\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>, thisArg?: unknown): Collection<K, T> {\n\t\t// eslint-disable-next-line unicorn/no-array-method-this-argument\n\t\tconst collections = this.map(fn, thisArg);\n\t\treturn new this.constructor[Symbol.species]<K, T>().concat(...collections);\n\t}\n\n\t/**\n\t * Maps each item to another value into an array. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | Array.map()}.\n\t *\n\t * @param fn - Function that produces an element of the new array, taking three arguments\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.map(user => user.tag);\n\t * ```\n\t */\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T): T[];\n\tpublic map<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): T[];\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): T[] {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst iter = this.entries();\n\t\treturn Array.from({ length: this.size }, (): T => {\n\t\t\tconst [key, value] = iter.next().value;\n\t\t\treturn fn(value, key, this);\n\t\t});\n\t}\n\n\t/**\n\t * Maps each item to another value into a collection. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | Array.map()}.\n\t *\n\t * @param fn - Function that produces an element of the new collection, taking three arguments\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.mapValues(user => user.tag);\n\t * ```\n\t */\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T): Collection<K, T>;\n\tpublic mapValues<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): Collection<K, T>;\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): Collection<K, T> {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>();\n\t\tfor (const [key, val] of this) coll.set(key, fn(val, key, this));\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Checks if there exists an item that passes a test. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some | Array.some()}.\n\t *\n\t * @param fn - Function used to test (should return a boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.some(user => user.discriminator === '0000');\n\t * ```\n\t */\n\tpublic some(fn: (value: V, key: K, collection: this) => unknown): boolean;\n\tpublic some<T>(fn: (this: T, value: V, key: K, collection: this) => unknown, thisArg: T): boolean;\n\tpublic some(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): boolean {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all items passes a test. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every | Array.every()}.\n\t *\n\t * @param fn - Function used to test (should return a boolean)\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection.every(user => !user.bot);\n\t * ```\n\t */\n\tpublic every<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): this is Collection<K2, V>;\n\tpublic every<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): this is Collection<K, V2>;\n\tpublic every(fn: (value: V, key: K, collection: this) => unknown): boolean;\n\tpublic every<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): this is Collection<K2, V>;\n\tpublic every<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): this is Collection<K, V2>;\n\tpublic every<This>(fn: (this: This, value: V, key: K, collection: this) => unknown, thisArg: This): boolean;\n\tpublic every(fn: (value: V, key: K, collection: this) => unknown, thisArg?: unknown): boolean {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (!fn(val, key, this)) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Applies a function to produce a single value. Identical in behavior to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | Array.reduce()}.\n\t *\n\t * @param fn - Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n\t * and `collection`\n\t * @param initialValue - Starting value for the accumulator\n\t * @example\n\t * ```ts\n\t * collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n\t * ```\n\t */\n\tpublic reduce<T>(fn: (accumulator: T, value: V, key: K, collection: this) => T, initialValue?: T): T {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tlet accumulator!: T;\n\n\t\tif (typeof initialValue !== 'undefined') {\n\t\t\taccumulator = initialValue;\n\t\t\tfor (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\t\t\treturn accumulator;\n\t\t}\n\n\t\tlet first = true;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (first) {\n\t\t\t\taccumulator = val as unknown as T;\n\t\t\t\tfirst = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\taccumulator = fn(accumulator, val, key, this);\n\t\t}\n\n\t\t// No items iterated.\n\t\tif (first) {\n\t\t\tthrow new TypeError('Reduce of empty collection with no initial value');\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Identical to\n\t * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach | Map.forEach()},\n\t * but returns the collection instead of undefined.\n\t *\n\t * @param fn - Function to execute for each element\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection\n\t *  .each(user => console.log(user.username))\n\t *  .filter(user => user.bot)\n\t *  .each(user => console.log(user.username));\n\t * ```\n\t */\n\tpublic each(fn: (value: V, key: K, collection: this) => void): this;\n\tpublic each<T>(fn: (this: T, value: V, key: K, collection: this) => void, thisArg: T): this;\n\tpublic each(fn: (value: V, key: K, collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\t// eslint-disable-next-line unicorn/no-array-method-this-argument\n\t\tthis.forEach(fn as (value: V, key: K, map: Map<K, V>) => void, thisArg);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Runs a function on the collection and returns the collection.\n\t *\n\t * @param fn - Function to execute\n\t * @param thisArg - Value to use as `this` when executing function\n\t * @example\n\t * ```ts\n\t * collection\n\t *  .tap(coll => console.log(coll.size))\n\t *  .filter(user => user.bot)\n\t *  .tap(coll => console.log(coll.size))\n\t * ```\n\t */\n\tpublic tap(fn: (collection: this) => void): this;\n\tpublic tap<T>(fn: (this: T, collection: this) => void, thisArg: T): this;\n\tpublic tap(fn: (collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof fn !== 'function') throw new TypeError(`${fn} is not a function`);\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfn(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an identical shallow copy of this collection.\n\t *\n\t * @example\n\t * ```ts\n\t * const newColl = someColl.clone();\n\t * ```\n\t */\n\tpublic clone(): Collection<K, V> {\n\t\treturn new this.constructor[Symbol.species](this);\n\t}\n\n\t/**\n\t * Combines this collection with others into a new collection. None of the source collections are modified.\n\t *\n\t * @param collections - Collections to merge\n\t * @example\n\t * ```ts\n\t * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n\t * ```\n\t */\n\tpublic concat(...collections: ReadonlyCollection<K, V>[]) {\n\t\tconst newColl = this.clone();\n\t\tfor (const coll of collections) {\n\t\t\tfor (const [key, val] of coll) newColl.set(key, val);\n\t\t}\n\n\t\treturn newColl;\n\t}\n\n\t/**\n\t * Checks if this collection shares identical items with another.\n\t * This is different to checking for equality using equal-signs, because\n\t * the collections may be different objects, but contain the same data.\n\t *\n\t * @param collection - Collection to compare with\n\t * @returns Whether the collections have identical contents\n\t */\n\tpublic equals(collection: ReadonlyCollection<K, V>) {\n\t\tif (!collection) return false; // runtime check\n\t\tif (this === collection) return true;\n\t\tif (this.size !== collection.size) return false;\n\t\tfor (const [key, value] of this) {\n\t\t\tif (!collection.has(key) || value !== collection.get(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * The sort method sorts the items of a collection in place and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t *\n\t * @param compareFunction - Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n\t * @example\n\t * ```ts\n\t * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t * ```\n\t */\n\tpublic sort(compareFunction: Comparator<K, V> = Collection.defaultSort) {\n\t\tconst entries = [...this.entries()];\n\t\tentries.sort((a, b): number => compareFunction(a[1], b[1], a[0], b[0]));\n\n\t\t// Perform clean-up\n\t\tsuper.clear();\n\n\t\t// Set the new entries\n\t\tfor (const [k, v] of entries) {\n\t\t\tsuper.set(k, v);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * The intersect method returns a new structure containing items where the keys and values are present in both original structures.\n\t *\n\t * @param other - The other Collection to filter against\n\t */\n\tpublic intersect<T>(other: ReadonlyCollection<K, T>): Collection<K, T> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (this.has(k) && Object.is(v, this.get(k))) {\n\t\t\t\tcoll.set(k, v);\n\t\t\t}\n\t\t}\n\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The subtract method returns a new structure containing items where the keys and values of the original structure are not present in the other.\n\t *\n\t * @param other - The other Collection to filter against\n\t */\n\tpublic subtract<T>(other: ReadonlyCollection<K, T>): Collection<K, V> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [k, v] of this) {\n\t\t\tif (!other.has(k) || !Object.is(v, other.get(k))) {\n\t\t\t\tcoll.set(k, v);\n\t\t\t}\n\t\t}\n\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n\t *\n\t * @param other - The other Collection to filter against\n\t */\n\tpublic difference<T>(other: ReadonlyCollection<K, T>): Collection<K, T | V> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, T | V>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (!this.has(k)) coll.set(k, v);\n\t\t}\n\n\t\tfor (const [k, v] of this) {\n\t\t\tif (!other.has(k)) coll.set(k, v);\n\t\t}\n\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Merges two Collections together into a new Collection.\n\t *\n\t * @param other - The other Collection to merge with\n\t * @param whenInSelf - Function getting the result if the entry only exists in this Collection\n\t * @param whenInOther - Function getting the result if the entry only exists in the other Collection\n\t * @param whenInBoth - Function getting the result if the entry exists in both Collections\n\t * @example\n\t * ```ts\n\t * // Sums up the entries in two collections.\n\t * coll.merge(\n\t *  other,\n\t *  x => ({ keep: true, value: x }),\n\t *  y => ({ keep: true, value: y }),\n\t *  (x, y) => ({ keep: true, value: x + y }),\n\t * );\n\t * ```\n\t * @example\n\t * ```ts\n\t * // Intersects two collections in a left-biased manner.\n\t * coll.merge(\n\t *  other,\n\t *  x => ({ keep: false }),\n\t *  y => ({ keep: false }),\n\t *  (x, _) => ({ keep: true, value: x }),\n\t * );\n\t * ```\n\t */\n\tpublic merge<T, R>(\n\t\tother: ReadonlyCollection<K, T>,\n\t\twhenInSelf: (value: V, key: K) => Keep<R>,\n\t\twhenInOther: (valueOther: T, key: K) => Keep<R>,\n\t\twhenInBoth: (value: V, valueOther: T, key: K) => Keep<R>,\n\t): Collection<K, R> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, R>();\n\t\tconst keys = new Set([...this.keys(), ...other.keys()]);\n\t\tfor (const k of keys) {\n\t\t\tconst hasInSelf = this.has(k);\n\t\t\tconst hasInOther = other.has(k);\n\n\t\t\tif (hasInSelf && hasInOther) {\n\t\t\t\tconst r = whenInBoth(this.get(k)!, other.get(k)!, k);\n\t\t\t\tif (r.keep) coll.set(k, r.value);\n\t\t\t} else if (hasInSelf) {\n\t\t\t\tconst r = whenInSelf(this.get(k)!, k);\n\t\t\t\tif (r.keep) coll.set(k, r.value);\n\t\t\t} else if (hasInOther) {\n\t\t\t\tconst r = whenInOther(other.get(k)!, k);\n\t\t\t\tif (r.keep) coll.set(k, r.value);\n\t\t\t}\n\t\t}\n\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The sorted method sorts the items of a collection and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t *\n\t * @param compareFunction - Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @example\n\t * ```ts\n\t * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t * ```\n\t */\n\tpublic sorted(compareFunction: Comparator<K, V> = Collection.defaultSort) {\n\t\treturn new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n\t}\n\n\tpublic toJSON() {\n\t\t// toJSON is called recursively by JSON.stringify.\n\t\treturn [...this.values()];\n\t}\n\n\tprivate static defaultSort<V>(firstValue: V, secondValue: V): number {\n\t\treturn Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n\t}\n\n\t/**\n\t * Creates a Collection from a list of entries.\n\t *\n\t * @param entries - The list of entries\n\t * @param combine - Function to combine an existing entry with a new one\n\t * @example\n\t * ```ts\n\t * Collection.combineEntries([[\"a\", 1], [\"b\", 2], [\"a\", 2]], (x, y) => x + y);\n\t * // returns Collection { \"a\" => 3, \"b\" => 2 }\n\t * ```\n\t */\n\tpublic static combineEntries<K, V>(\n\t\tentries: Iterable<[K, V]>,\n\t\tcombine: (firstValue: V, secondValue: V, key: K) => V,\n\t): Collection<K, V> {\n\t\tconst coll = new Collection<K, V>();\n\t\tfor (const [k, v] of entries) {\n\t\t\tif (coll.has(k)) {\n\t\t\t\tcoll.set(k, combine(coll.get(k)!, v, k));\n\t\t\t} else {\n\t\t\t\tcoll.set(k, v);\n\t\t\t}\n\t\t}\n\n\t\treturn coll;\n\t}\n}\n\n/**\n * @internal\n */\nexport type Keep<V> = { keep: false } | { keep: true; value: V };\n\n/**\n * @internal\n */\nexport type Comparator<K, V> = (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}