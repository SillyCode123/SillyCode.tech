{"ast":null,"code":"'use strict';\n\nconst {\n  Routes\n} = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {CachedManager}\n */\nclass ReactionManager extends CachedManager {\n  constructor(message, iterable) {\n    super(message.client, MessageReaction, iterable);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.emoji.id ?? data.emoji.name,\n      extras: [this.message]\n    });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.\n   * @method resolveId\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  async removeAll() {\n    await this.client.rest.delete(Routes.channelMessageAllReactions(this.message.channelId, this.message.id));\n    return this.message;\n  }\n}\nmodule.exports = ReactionManager;","map":{"version":3,"names":["Routes","require","CachedManager","MessageReaction","ReactionManager","constructor","message","iterable","client","_add","data","cache","id","emoji","name","extras","removeAll","rest","delete","channelMessageAllReactions","channelId","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/ReactionManager.js"],"sourcesContent":["'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {CachedManager}\n */\nclass ReactionManager extends CachedManager {\n  constructor(message, iterable) {\n    super(message.client, MessageReaction, iterable);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.emoji.id ?? data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.\n   * @method resolveId\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  async removeAll() {\n    await this.client.rest.delete(Routes.channelMessageAllReactions(this.message.channelId, this.message.id));\n    return this.message;\n  }\n}\n\nmodule.exports = ReactionManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAME,eAAe,GAAGF,OAAO,CAAC,+BAA+B,CAAC;;AAEhE;AACA;AACA;AACA;AACA,MAAMG,eAAe,SAASF,aAAa,CAAC;EAC1CG,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAE;IAC7B,KAAK,CAACD,OAAO,CAACE,MAAM,EAAEL,eAAe,EAAEI,QAAQ,CAAC;;IAEhD;AACJ;AACA;AACA;IACI,IAAI,CAACD,OAAO,GAAGA,OAAO;EACxB;EAEAG,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEC,EAAE,EAAEF,IAAI,CAACG,KAAK,CAACD,EAAE,IAAIF,IAAI,CAACG,KAAK,CAACC,IAAI;MAAEC,MAAM,EAAE,CAAC,IAAI,CAACT,OAAO;IAAE,CAAC,CAAC;EAClG;;EAEA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACE,MAAMU,SAAS,GAAG;IAChB,MAAM,IAAI,CAACR,MAAM,CAACS,IAAI,CAACC,MAAM,CAAClB,MAAM,CAACmB,0BAA0B,CAAC,IAAI,CAACb,OAAO,CAACc,SAAS,EAAE,IAAI,CAACd,OAAO,CAACM,EAAE,CAAC,CAAC;IACzG,OAAO,IAAI,CAACN,OAAO;EACrB;AACF;AAEAe,MAAM,CAACC,OAAO,GAAGlB,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}