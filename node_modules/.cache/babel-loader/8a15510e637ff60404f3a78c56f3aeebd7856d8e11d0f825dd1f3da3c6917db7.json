{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\nconst Pool = require('./pool');\nconst ConnectionPromise = require('./connection-promise');\nconst CommandParameter = require('./command-parameter');\nclass PoolPromise extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.#pool = new Pool(options);\n    this.#pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.#pool.on('connection', this.emit.bind(this, 'connection'));\n    this.#pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.#pool.on('release', this.emit.bind(this, 'release'));\n    this.#pool.on('error', this.emit.bind(this, 'error'));\n  }\n  get closed() {\n    return this.#pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.#pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.#pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.#pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.#pool.taskQueueSize();\n  }\n  escape(value) {\n    return this.#pool.escape(value);\n  }\n  escapeId(value) {\n    return this.#pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @return Promise\n   **/\n  end() {\n    return this.#pool.end();\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */\n  async getConnection() {\n    const cmdParam = new CommandParameter();\n    if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    const baseConn = await this.#pool.getConnection(cmdParam);\n    const conn = new ConnectionPromise(baseConn);\n    conn.release = () => new Promise(baseConn.release);\n    conn.end = conn.release;\n    conn.close = conn.release;\n    return conn;\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then(baseConn => {\n      return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then(baseConn => {\n      return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n}\nmodule.exports = PoolPromise;","map":{"version":3,"names":["EventEmitter","require","Pool","ConnectionPromise","CommandParameter","PoolPromise","pool","constructor","options","on","emit","bind","closed","totalConnections","activeConnections","idleConnections","taskQueueSize","escape","value","escapeId","end","getConnection","cmdParam","opts","connOptions","trace","Error","captureStackTrace","baseConn","conn","release","Promise","close","query","sql","values","_PARAM","then","finally","execute","_EXECUTE_CMD","batch","_BATCH_CMD","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/mariadb/lib/pool-promise.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\n\nconst Pool = require('./pool');\nconst ConnectionPromise = require('./connection-promise');\nconst CommandParameter = require('./command-parameter');\n\nclass PoolPromise extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.#pool = new Pool(options);\n    this.#pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.#pool.on('connection', this.emit.bind(this, 'connection'));\n    this.#pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.#pool.on('release', this.emit.bind(this, 'release'));\n    this.#pool.on('error', this.emit.bind(this, 'error'));\n  }\n\n  get closed() {\n    return this.#pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.#pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.#pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.#pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.#pool.taskQueueSize();\n  }\n\n  escape(value) {\n    return this.#pool.escape(value);\n  }\n\n  escapeId(value) {\n    return this.#pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @return Promise\n   **/\n  end() {\n    return this.#pool.end();\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   */\n  async getConnection() {\n    const cmdParam = new CommandParameter();\n    if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    const baseConn = await this.#pool.getConnection(cmdParam);\n    const conn = new ConnectionPromise(baseConn);\n    conn.release = () => new Promise(baseConn.release);\n    conn.end = conn.release;\n    conn.close = conn.release;\n    return conn;\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then((baseConn) => {\n      return new Promise(baseConn.query.bind(baseConn, cmdParam)).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   */\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then((baseConn) => {\n      return ConnectionPromise._EXECUTE_CMD(baseConn, cmdParam).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#pool.opts.connOptions, sql, values);\n    return this.#pool.getConnection(cmdParam).then((baseConn) => {\n      return ConnectionPromise._BATCH_CMD(baseConn, cmdParam).finally(() => {\n        this.#pool.release(baseConn);\n      });\n    });\n  }\n}\n\nmodule.exports = PoolPromise;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}