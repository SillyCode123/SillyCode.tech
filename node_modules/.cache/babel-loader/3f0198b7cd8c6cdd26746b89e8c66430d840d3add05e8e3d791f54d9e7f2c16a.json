{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst ApplicationCommand = require('./ApplicationCommand');\nconst GuildAuditLogsEntry = require('./GuildAuditLogsEntry');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst {\n  flatten\n} = require('../util/Util');\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users._add(user);\n    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake|string, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * Cached {@link GuildScheduledEvent}s.\n     * @type {Collection<Snowflake, GuildScheduledEvent>}\n     * @private\n     */\n    this.guildScheduledEvents = data.guild_scheduled_events.reduce((guildScheduledEvents, guildScheduledEvent) => guildScheduledEvents.set(guildScheduledEvent.id, guild.scheduledEvents._add(guildScheduledEvent)), new Collection());\n\n    /**\n     * Cached application commands, includes application commands from other applications\n     * @type {Collection<Snowflake, ApplicationCommand>}\n     * @private\n     */\n    this.applicationCommands = new Collection();\n    if (data.application_commands) {\n      for (const command of data.application_commands) {\n        this.applicationCommands.set(command.id, new ApplicationCommand(guild.client, command, guild));\n      }\n    }\n\n    /**\n     * Cached auto moderation rules.\n     * @type {Collection<Snowflake, AutoModerationRule>}\n     * @private\n     */\n    this.autoModerationRules = data.auto_moderation_rules.reduce((autoModerationRules, autoModerationRule) => autoModerationRules.set(autoModerationRule.id, guild.autoModerationRules._add(autoModerationRule)), new Collection());\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n  toJSON() {\n    return flatten(this);\n  }\n}\nmodule.exports = GuildAuditLogs;","map":{"version":3,"names":["Collection","require","ApplicationCommand","GuildAuditLogsEntry","Integration","Webhook","flatten","GuildAuditLogs","constructor","guild","data","users","user","client","_add","threads","thread","channels","webhooks","hook","set","id","integrations","integration","guildScheduledEvents","guild_scheduled_events","reduce","guildScheduledEvent","scheduledEvents","applicationCommands","application_commands","command","autoModerationRules","auto_moderation_rules","autoModerationRule","entries","item","audit_log_entries","entry","toJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildAuditLogs.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst ApplicationCommand = require('./ApplicationCommand');\nconst GuildAuditLogsEntry = require('./GuildAuditLogsEntry');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst { flatten } = require('../util/Util');\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users._add(user);\n    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake|string, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * Cached {@link GuildScheduledEvent}s.\n     * @type {Collection<Snowflake, GuildScheduledEvent>}\n     * @private\n     */\n    this.guildScheduledEvents = data.guild_scheduled_events.reduce(\n      (guildScheduledEvents, guildScheduledEvent) =>\n        guildScheduledEvents.set(guildScheduledEvent.id, guild.scheduledEvents._add(guildScheduledEvent)),\n      new Collection(),\n    );\n\n    /**\n     * Cached application commands, includes application commands from other applications\n     * @type {Collection<Snowflake, ApplicationCommand>}\n     * @private\n     */\n    this.applicationCommands = new Collection();\n    if (data.application_commands) {\n      for (const command of data.application_commands) {\n        this.applicationCommands.set(command.id, new ApplicationCommand(guild.client, command, guild));\n      }\n    }\n\n    /**\n     * Cached auto moderation rules.\n     * @type {Collection<Snowflake, AutoModerationRule>}\n     * @private\n     */\n    this.autoModerationRules = data.auto_moderation_rules.reduce(\n      (autoModerationRules, autoModerationRule) =>\n        autoModerationRules.set(autoModerationRule.id, guild.autoModerationRules._add(autoModerationRule)),\n      new Collection(),\n    );\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\nmodule.exports = GuildAuditLogs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}