{"ast":null,"code":"'use strict';\n\nconst {\n  ChannelType,\n  MessageType,\n  ComponentType\n} = require('discord-api-types/v10');\n\n/**\n * Max bulk deletable message age\n * @typedef {number} MaxBulkDeletableMessageAge\n */\nexports.MaxBulkDeletableMessageAge = 1_209_600_000;\n\n/**\n * The name of an item to be swept in Sweepers\n * * `autoModerationRules`\n * * `applicationCommands` - both global and guild commands\n * * `bans`\n * * `emojis`\n * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n * * `guildMembers`\n * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n * * `presences`\n * * `reactions`\n * * `stageInstances`\n * * `stickers`\n * * `threadMembers`\n * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n * * `users`\n * * `voiceStates`\n * @typedef {string} SweeperKey\n */\nexports.SweeperKeys = ['autoModerationRules', 'applicationCommands', 'bans', 'emojis', 'invites', 'guildMembers', 'messages', 'presences', 'reactions', 'stageInstances', 'stickers', 'threadMembers', 'threads', 'users', 'voiceStates'];\n\n/**\n * The types of messages that are not `System`. The available types are:\n * * {@link MessageType.Default}\n * * {@link MessageType.Reply}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * @typedef {MessageType[]} NonSystemMessageTypes\n */\nexports.NonSystemMessageTypes = [MessageType.Default, MessageType.Reply, MessageType.ChatInputCommand, MessageType.ContextMenuCommand];\n\n/**\n * The guild channels that are text-based.\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * * VoiceChannel\n * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel} GuildTextBasedChannel\n */\n\n/**\n * The channels that are text-based.\n * * DMChannel\n * * GuildTextBasedChannel\n * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels\n */\n\n/**\n * Data that resolves to give a text-based channel. This can be:\n * * A text-based channel\n * * A snowflake\n * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * @typedef {ChannelType[]} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [ChannelType.DM, ChannelType.GuildText, ChannelType.GuildAnnouncement, ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread, ChannelType.GuildVoice];\n\n/**\n * The types of channels that are threads. The available types are:\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * @typedef {ChannelType[]} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The types of select menus. The available types are:\n * * {@link ComponentType.StringSelect}\n * * {@link ComponentType.UserSelect}\n * * {@link ComponentType.RoleSelect}\n * * {@link ComponentType.MentionableSelect}\n * * {@link ComponentType.ChannelSelect}\n * @typedef {ComponentType[]} SelectMenuTypes\n */\nexports.SelectMenuTypes = [ComponentType.StringSelect, ComponentType.UserSelect, ComponentType.RoleSelect, ComponentType.MentionableSelect, ComponentType.ChannelSelect];\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age\n * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers\n * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type\n * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based\n * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads\n * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based\n * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.\n */","map":{"version":3,"names":["ChannelType","MessageType","ComponentType","require","exports","MaxBulkDeletableMessageAge","SweeperKeys","NonSystemMessageTypes","Default","Reply","ChatInputCommand","ContextMenuCommand","TextBasedChannelTypes","DM","GuildText","GuildAnnouncement","AnnouncementThread","PublicThread","PrivateThread","GuildVoice","ThreadChannelTypes","VoiceBasedChannelTypes","GuildStageVoice","SelectMenuTypes","StringSelect","UserSelect","RoleSelect","MentionableSelect","ChannelSelect"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/util/Constants.js"],"sourcesContent":["'use strict';\n\nconst { ChannelType, MessageType, ComponentType } = require('discord-api-types/v10');\n\n/**\n * Max bulk deletable message age\n * @typedef {number} MaxBulkDeletableMessageAge\n */\nexports.MaxBulkDeletableMessageAge = 1_209_600_000;\n\n/**\n * The name of an item to be swept in Sweepers\n * * `autoModerationRules`\n * * `applicationCommands` - both global and guild commands\n * * `bans`\n * * `emojis`\n * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n * * `guildMembers`\n * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n * * `presences`\n * * `reactions`\n * * `stageInstances`\n * * `stickers`\n * * `threadMembers`\n * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n * * `users`\n * * `voiceStates`\n * @typedef {string} SweeperKey\n */\nexports.SweeperKeys = [\n  'autoModerationRules',\n  'applicationCommands',\n  'bans',\n  'emojis',\n  'invites',\n  'guildMembers',\n  'messages',\n  'presences',\n  'reactions',\n  'stageInstances',\n  'stickers',\n  'threadMembers',\n  'threads',\n  'users',\n  'voiceStates',\n];\n\n/**\n * The types of messages that are not `System`. The available types are:\n * * {@link MessageType.Default}\n * * {@link MessageType.Reply}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * @typedef {MessageType[]} NonSystemMessageTypes\n */\nexports.NonSystemMessageTypes = [\n  MessageType.Default,\n  MessageType.Reply,\n  MessageType.ChatInputCommand,\n  MessageType.ContextMenuCommand,\n];\n\n/**\n * The guild channels that are text-based.\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * * VoiceChannel\n * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel} GuildTextBasedChannel\n */\n\n/**\n * The channels that are text-based.\n * * DMChannel\n * * GuildTextBasedChannel\n * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels\n */\n\n/**\n * Data that resolves to give a text-based channel. This can be:\n * * A text-based channel\n * * A snowflake\n * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * @typedef {ChannelType[]} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [\n  ChannelType.DM,\n  ChannelType.GuildText,\n  ChannelType.GuildAnnouncement,\n  ChannelType.AnnouncementThread,\n  ChannelType.PublicThread,\n  ChannelType.PrivateThread,\n  ChannelType.GuildVoice,\n];\n\n/**\n * The types of channels that are threads. The available types are:\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * @typedef {ChannelType[]} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The types of select menus. The available types are:\n * * {@link ComponentType.StringSelect}\n * * {@link ComponentType.UserSelect}\n * * {@link ComponentType.RoleSelect}\n * * {@link ComponentType.MentionableSelect}\n * * {@link ComponentType.ChannelSelect}\n * @typedef {ComponentType[]} SelectMenuTypes\n */\nexports.SelectMenuTypes = [\n  ComponentType.StringSelect,\n  ComponentType.UserSelect,\n  ComponentType.RoleSelect,\n  ComponentType.MentionableSelect,\n  ComponentType.ChannelSelect,\n];\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age\n * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers\n * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type\n * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based\n * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads\n * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based\n * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,WAAW;EAAEC,WAAW;EAAEC;AAAc,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAEpF;AACA;AACA;AACA;AACAC,OAAO,CAACC,0BAA0B,GAAG,aAAa;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,OAAO,CAACE,WAAW,GAAG,CACpB,qBAAqB,EACrB,qBAAqB,EACrB,MAAM,EACN,QAAQ,EACR,SAAS,EACT,cAAc,EACd,UAAU,EACV,WAAW,EACX,WAAW,EACX,gBAAgB,EAChB,UAAU,EACV,eAAe,EACf,SAAS,EACT,OAAO,EACP,aAAa,CACd;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,qBAAqB,GAAG,CAC9BN,WAAW,CAACO,OAAO,EACnBP,WAAW,CAACQ,KAAK,EACjBR,WAAW,CAACS,gBAAgB,EAC5BT,WAAW,CAACU,kBAAkB,CAC/B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACQ,qBAAqB,GAAG,CAC9BZ,WAAW,CAACa,EAAE,EACdb,WAAW,CAACc,SAAS,EACrBd,WAAW,CAACe,iBAAiB,EAC7Bf,WAAW,CAACgB,kBAAkB,EAC9BhB,WAAW,CAACiB,YAAY,EACxBjB,WAAW,CAACkB,aAAa,EACzBlB,WAAW,CAACmB,UAAU,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAf,OAAO,CAACgB,kBAAkB,GAAG,CAACpB,WAAW,CAACgB,kBAAkB,EAAEhB,WAAW,CAACiB,YAAY,EAAEjB,WAAW,CAACkB,aAAa,CAAC;;AAElH;AACA;AACA;AACA;AACA;AACA;AACAd,OAAO,CAACiB,sBAAsB,GAAG,CAACrB,WAAW,CAACmB,UAAU,EAAEnB,WAAW,CAACsB,eAAe,CAAC;;AAEtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,OAAO,CAACmB,eAAe,GAAG,CACxBrB,aAAa,CAACsB,YAAY,EAC1BtB,aAAa,CAACuB,UAAU,EACxBvB,aAAa,CAACwB,UAAU,EACxBxB,aAAa,CAACyB,iBAAiB,EAC/BzB,aAAa,CAAC0B,aAAa,CAC5B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}