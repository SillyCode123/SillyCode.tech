{"ast":null,"code":"'use strict';\n\nconst {\n  ChannelType,\n  Routes\n} = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst {\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Manages API methods for {@link ThreadChannel} objects and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildTextThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildTextThreadManager#channel\n   * @type {TextChannel|NewsChannel}\n   */\n\n  /**\n   * Options for creating a thread. <warn>Only one of `startMessage` or `type` can be defined.</warn>\n   * @typedef {StartThreadOptions} ThreadCreateOptions\n   * @property {MessageResolvable} [startMessage] The message to start a thread from.\n   * <warn>If this is defined, then the `type` of thread gets inferred automatically and cannot be changed.</warn>\n   * @property {ThreadChannelTypes} [type] The type of thread to create.\n   * Defaults to {@link ChannelType.PublicThread} if created in a {@link TextChannel}\n   * <warn>When creating threads in a {@link NewsChannel}, this is ignored and is always\n   * {@link ChannelType.AnnouncementThread}</warn>\n   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to the thread\n   * <info>Can only be set when type will be {@link ChannelType.PrivateThread}</info>\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {ThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new public thread\n   * channel.threads\n   *   .create({\n   *     name: 'food-talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   * @example\n   * // Create a new private thread\n   * channel.threads\n   *   .create({\n   *      name: 'mod-talk',\n   *      autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *      type: ChannelType.PrivateThread,\n   *      reason: 'Needed a separate thread for moderation',\n   *    })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create() {\n    let {\n      name,\n      autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n      startMessage,\n      type,\n      invitable,\n      reason,\n      rateLimitPerUser\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let resolvedType = this.channel.type === ChannelType.GuildAnnouncement ? ChannelType.AnnouncementThread : ChannelType.PublicThread;\n    let startMessageId;\n    if (startMessage) {\n      startMessageId = this.channel.messages.resolveId(startMessage);\n      if (!startMessageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'startMessage', 'MessageResolvable');\n    } else if (this.channel.type !== ChannelType.GuildAnnouncement) {\n      resolvedType = type ?? resolvedType;\n    }\n    const data = await this.client.rest.post(Routes.threads(this.channel.id, startMessageId), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        type: resolvedType,\n        invitable: resolvedType === ChannelType.PrivateThread ? invitable : undefined,\n        rate_limit_per_user: rateLimitPerUser\n      },\n      reason\n    });\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\nmodule.exports = GuildTextThreadManager;","map":{"version":3,"names":["ChannelType","Routes","require","ThreadManager","DiscordjsTypeError","ErrorCodes","GuildTextThreadManager","create","name","autoArchiveDuration","channel","defaultAutoArchiveDuration","startMessage","type","invitable","reason","rateLimitPerUser","resolvedType","GuildAnnouncement","AnnouncementThread","PublicThread","startMessageId","messages","resolveId","InvalidType","data","client","rest","post","threads","id","body","auto_archive_duration","PrivateThread","undefined","rate_limit_per_user","actions","ThreadCreate","handle","thread","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/GuildTextThreadManager.js"],"sourcesContent":["'use strict';\n\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Manages API methods for {@link ThreadChannel} objects and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildTextThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildTextThreadManager#channel\n   * @type {TextChannel|NewsChannel}\n   */\n\n  /**\n   * Options for creating a thread. <warn>Only one of `startMessage` or `type` can be defined.</warn>\n   * @typedef {StartThreadOptions} ThreadCreateOptions\n   * @property {MessageResolvable} [startMessage] The message to start a thread from.\n   * <warn>If this is defined, then the `type` of thread gets inferred automatically and cannot be changed.</warn>\n   * @property {ThreadChannelTypes} [type] The type of thread to create.\n   * Defaults to {@link ChannelType.PublicThread} if created in a {@link TextChannel}\n   * <warn>When creating threads in a {@link NewsChannel}, this is ignored and is always\n   * {@link ChannelType.AnnouncementThread}</warn>\n   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to the thread\n   * <info>Can only be set when type will be {@link ChannelType.PrivateThread}</info>\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {ThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new public thread\n   * channel.threads\n   *   .create({\n   *     name: 'food-talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   * @example\n   * // Create a new private thread\n   * channel.threads\n   *   .create({\n   *      name: 'mod-talk',\n   *      autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *      type: ChannelType.PrivateThread,\n   *      reason: 'Needed a separate thread for moderation',\n   *    })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create({\n    name,\n    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n    startMessage,\n    type,\n    invitable,\n    reason,\n    rateLimitPerUser,\n  } = {}) {\n    let resolvedType =\n      this.channel.type === ChannelType.GuildAnnouncement ? ChannelType.AnnouncementThread : ChannelType.PublicThread;\n    let startMessageId;\n    if (startMessage) {\n      startMessageId = this.channel.messages.resolveId(startMessage);\n      if (!startMessageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'startMessage', 'MessageResolvable');\n    } else if (this.channel.type !== ChannelType.GuildAnnouncement) {\n      resolvedType = type ?? resolvedType;\n    }\n\n    const data = await this.client.rest.post(Routes.threads(this.channel.id, startMessageId), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        type: resolvedType,\n        invitable: resolvedType === ChannelType.PrivateThread ? invitable : undefined,\n        rate_limit_per_user: rateLimitPerUser,\n      },\n      reason,\n    });\n\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\n\nmodule.exports = GuildTextThreadManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,WAAW;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAChE,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAM;EAAEE,kBAAkB;EAAEC;AAAW,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAE/D;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,SAASH,aAAa,CAAC;EACjD;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMI,MAAM,GAQJ;IAAA,IARK;MACXC,IAAI;MACJC,mBAAmB,GAAG,IAAI,CAACC,OAAO,CAACC,0BAA0B;MAC7DC,YAAY;MACZC,IAAI;MACJC,SAAS;MACTC,MAAM;MACNC;IACF,CAAC,uEAAG,CAAC,CAAC;IACJ,IAAIC,YAAY,GACd,IAAI,CAACP,OAAO,CAACG,IAAI,KAAKb,WAAW,CAACkB,iBAAiB,GAAGlB,WAAW,CAACmB,kBAAkB,GAAGnB,WAAW,CAACoB,YAAY;IACjH,IAAIC,cAAc;IAClB,IAAIT,YAAY,EAAE;MAChBS,cAAc,GAAG,IAAI,CAACX,OAAO,CAACY,QAAQ,CAACC,SAAS,CAACX,YAAY,CAAC;MAC9D,IAAI,CAACS,cAAc,EAAE,MAAM,IAAIjB,kBAAkB,CAACC,UAAU,CAACmB,WAAW,EAAE,cAAc,EAAE,mBAAmB,CAAC;IAChH,CAAC,MAAM,IAAI,IAAI,CAACd,OAAO,CAACG,IAAI,KAAKb,WAAW,CAACkB,iBAAiB,EAAE;MAC9DD,YAAY,GAAGJ,IAAI,IAAII,YAAY;IACrC;IAEA,MAAMQ,IAAI,GAAG,MAAM,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC3B,MAAM,CAAC4B,OAAO,CAAC,IAAI,CAACnB,OAAO,CAACoB,EAAE,EAAET,cAAc,CAAC,EAAE;MACxFU,IAAI,EAAE;QACJvB,IAAI;QACJwB,qBAAqB,EAAEvB,mBAAmB;QAC1CI,IAAI,EAAEI,YAAY;QAClBH,SAAS,EAAEG,YAAY,KAAKjB,WAAW,CAACiC,aAAa,GAAGnB,SAAS,GAAGoB,SAAS;QAC7EC,mBAAmB,EAAEnB;MACvB,CAAC;MACDD;IACF,CAAC,CAAC;IAEF,OAAO,IAAI,CAACW,MAAM,CAACU,OAAO,CAACC,YAAY,CAACC,MAAM,CAACb,IAAI,CAAC,CAACc,MAAM;EAC7D;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGnC,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}