{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\nconst {\n  Routes,\n  PermissionFlagsBits\n} = require('discord-api-types/v10');\nconst BaseGuildEmojiManager = require('./BaseGuildEmojiManager');\nconst {\n  DiscordjsError,\n  DiscordjsTypeError,\n  ErrorCodes\n} = require('../errors');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseGuildEmojiManager}\n */\nclass GuildEmojiManager extends BaseGuildEmojiManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n  _add(data, cache) {\n    return super._add(data, cache, {\n      extras: [this.guild]\n    });\n  }\n\n  /**\n   * Options used for creating an emoji in a guild.\n   * @typedef {Object} GuildEmojiCreateOptions\n   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @property {string} name The name for the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to limit the emoji to\n   * @property {string} [reason] The reason for creating the emoji\n   */\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {GuildEmojiCreateOptions} options Options for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a URL\n   * guild.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create(_ref) {\n    let {\n      attachment,\n      name,\n      roles,\n      reason\n    } = _ref;\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n    const body = {\n      image: attachment,\n      name\n    };\n    if (roles) {\n      if (!Array.isArray(roles) && !(roles instanceof Collection)) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.roles', 'Array or Collection of Roles or Snowflakes', true);\n      }\n      body.roles = [];\n      for (const role of roles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);\n        }\n        body.roles.push(resolvedRole);\n      }\n    }\n    const emoji = await this.client.rest.post(Routes.guildEmojis(this.guild.id), {\n      body,\n      reason\n    });\n    return this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji;\n  }\n\n  /**\n   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.\n   * @param {Snowflake} [id] The emoji's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<GuildEmoji|Collection<Snowflake, GuildEmoji>>}\n   * @example\n   * // Fetch all emojis from the guild\n   * message.guild.emojis.fetch()\n   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single emoji\n   * message.guild.emojis.fetch('222078108977594368')\n   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id) {\n    let {\n      cache = true,\n      force = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const emoji = await this.client.rest.get(Routes.guildEmoji(this.guild.id, id));\n      return this._add(emoji, cache);\n    }\n    const data = await this.client.rest.get(Routes.guildEmojis(this.guild.id));\n    const emojis = new Collection();\n    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));\n    return emojis;\n  }\n\n  /**\n   * Deletes an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to delete\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<void>}\n   */\n  async delete(emoji, reason) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    await this.client.rest.delete(Routes.guildEmoji(this.guild.id, id), {\n      reason\n    });\n  }\n\n  /**\n   * Edits an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to edit\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async edit(emoji, data) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    const roles = data.roles?.map(r => this.guild.roles.resolveId(r));\n    const newData = await this.client.rest.patch(Routes.guildEmoji(this.guild.id, id), {\n      body: {\n        name: data.name,\n        roles\n      },\n      reason: data.reason\n    });\n    const existing = this.cache.get(id);\n    if (existing) {\n      const clone = existing._clone();\n      clone._patch(newData);\n      return clone;\n    }\n    return this._add(newData);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @param {EmojiResolvable} emoji The emoji to fetch the author of\n   * @returns {Promise<User>}\n   */\n  async fetchAuthor(emoji) {\n    emoji = this.resolve(emoji);\n    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    if (emoji.managed) {\n      throw new DiscordjsError(ErrorCodes.EmojiManaged);\n    }\n    const {\n      me\n    } = this.guild.members;\n    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    if (!me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers)) {\n      throw new DiscordjsError(ErrorCodes.MissingManageEmojisAndStickersPermission, this.guild);\n    }\n    const data = await this.client.rest.get(Routes.guildEmoji(this.guild.id, emoji.id));\n    emoji._patch(data);\n    return emoji.author;\n  }\n}\nmodule.exports = GuildEmojiManager;","map":{"version":3,"names":["Collection","require","Routes","PermissionFlagsBits","BaseGuildEmojiManager","DiscordjsError","DiscordjsTypeError","ErrorCodes","DataResolver","GuildEmojiManager","constructor","guild","iterable","client","_add","data","cache","extras","create","attachment","name","roles","reason","resolveImage","ReqResourceType","body","image","Array","isArray","InvalidType","role","values","resolvedRole","resolveId","InvalidElement","push","emoji","rest","post","guildEmojis","id","actions","GuildEmojiCreate","handle","fetch","force","existing","get","guildEmoji","emojis","set","delete","edit","map","r","newData","patch","clone","_clone","_patch","fetchAuthor","resolve","managed","EmojiManaged","me","members","GuildUncachedMe","permissions","has","ManageEmojisAndStickers","MissingManageEmojisAndStickersPermission","author","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/GuildEmojiManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes, PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildEmojiManager = require('./BaseGuildEmojiManager');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseGuildEmojiManager}\n */\nclass GuildEmojiManager extends BaseGuildEmojiManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Options used for creating an emoji in a guild.\n   * @typedef {Object} GuildEmojiCreateOptions\n   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @property {string} name The name for the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to limit the emoji to\n   * @property {string} [reason] The reason for creating the emoji\n   */\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {GuildEmojiCreateOptions} options Options for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a URL\n   * guild.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create({ attachment, name, roles, reason }) {\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n\n    const body = { image: attachment, name };\n    if (roles) {\n      if (!Array.isArray(roles) && !(roles instanceof Collection)) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'options.roles',\n          'Array or Collection of Roles or Snowflakes',\n          true,\n        );\n      }\n      body.roles = [];\n      for (const role of roles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);\n        }\n        body.roles.push(resolvedRole);\n      }\n    }\n\n    const emoji = await this.client.rest.post(Routes.guildEmojis(this.guild.id), { body, reason });\n    return this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji;\n  }\n\n  /**\n   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.\n   * @param {Snowflake} [id] The emoji's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<GuildEmoji|Collection<Snowflake, GuildEmoji>>}\n   * @example\n   * // Fetch all emojis from the guild\n   * message.guild.emojis.fetch()\n   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single emoji\n   * message.guild.emojis.fetch('222078108977594368')\n   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const emoji = await this.client.rest.get(Routes.guildEmoji(this.guild.id, id));\n      return this._add(emoji, cache);\n    }\n\n    const data = await this.client.rest.get(Routes.guildEmojis(this.guild.id));\n    const emojis = new Collection();\n    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));\n    return emojis;\n  }\n\n  /**\n   * Deletes an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to delete\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<void>}\n   */\n  async delete(emoji, reason) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    await this.client.rest.delete(Routes.guildEmoji(this.guild.id, id), { reason });\n  }\n\n  /**\n   * Edits an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to edit\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async edit(emoji, data) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    const roles = data.roles?.map(r => this.guild.roles.resolveId(r));\n    const newData = await this.client.rest.patch(Routes.guildEmoji(this.guild.id, id), {\n      body: {\n        name: data.name,\n        roles,\n      },\n      reason: data.reason,\n    });\n    const existing = this.cache.get(id);\n    if (existing) {\n      const clone = existing._clone();\n      clone._patch(newData);\n      return clone;\n    }\n    return this._add(newData);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @param {EmojiResolvable} emoji The emoji to fetch the author of\n   * @returns {Promise<User>}\n   */\n  async fetchAuthor(emoji) {\n    emoji = this.resolve(emoji);\n    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    if (emoji.managed) {\n      throw new DiscordjsError(ErrorCodes.EmojiManaged);\n    }\n\n    const { me } = this.guild.members;\n    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    if (!me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers)) {\n      throw new DiscordjsError(ErrorCodes.MissingManageEmojisAndStickersPermission, this.guild);\n    }\n\n    const data = await this.client.rest.get(Routes.guildEmoji(this.guild.id, emoji.id));\n    emoji._patch(data);\n    return emoji.author;\n  }\n}\n\nmodule.exports = GuildEmojiManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAM;EAAEC,MAAM;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACxE,MAAMG,qBAAqB,GAAGH,OAAO,CAAC,yBAAyB,CAAC;AAChE,MAAM;EAAEI,cAAc;EAAEC,kBAAkB;EAAEC;AAAW,CAAC,GAAGN,OAAO,CAAC,WAAW,CAAC;AAC/E,MAAMO,YAAY,GAAGP,OAAO,CAAC,sBAAsB,CAAC;;AAEpD;AACA;AACA;AACA;AACA,MAAMQ,iBAAiB,SAASL,qBAAqB,CAAC;EACpDM,WAAW,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,KAAK,CAACD,KAAK,CAACE,MAAM,EAAED,QAAQ,CAAC;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACD,KAAK,GAAGA,KAAK;EACpB;EAEAG,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,IAAI,CAACC,IAAI,EAAEC,KAAK,EAAE;MAAEC,MAAM,EAAE,CAAC,IAAI,CAACN,KAAK;IAAE,CAAC,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMO,MAAM,OAAsC;IAAA,IAArC;MAAEC,UAAU;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAC;IAC9CH,UAAU,GAAG,MAAMX,YAAY,CAACe,YAAY,CAACJ,UAAU,CAAC;IACxD,IAAI,CAACA,UAAU,EAAE,MAAM,IAAIb,kBAAkB,CAACC,UAAU,CAACiB,eAAe,CAAC;IAEzE,MAAMC,IAAI,GAAG;MAAEC,KAAK,EAAEP,UAAU;MAAEC;IAAK,CAAC;IACxC,IAAIC,KAAK,EAAE;MACT,IAAI,CAACM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYrB,UAAU,CAAC,EAAE;QAC3D,MAAM,IAAIM,kBAAkB,CAC1BC,UAAU,CAACsB,WAAW,EACtB,eAAe,EACf,4CAA4C,EAC5C,IAAI,CACL;MACH;MACAJ,IAAI,CAACJ,KAAK,GAAG,EAAE;MACf,KAAK,MAAMS,IAAI,IAAIT,KAAK,CAACU,MAAM,EAAE,EAAE;QACjC,MAAMC,YAAY,GAAG,IAAI,CAACrB,KAAK,CAACU,KAAK,CAACY,SAAS,CAACH,IAAI,CAAC;QACrD,IAAI,CAACE,YAAY,EAAE;UACjB,MAAM,IAAI1B,kBAAkB,CAACC,UAAU,CAAC2B,cAAc,EAAE,qBAAqB,EAAE,eAAe,EAAEJ,IAAI,CAAC;QACvG;QACAL,IAAI,CAACJ,KAAK,CAACc,IAAI,CAACH,YAAY,CAAC;MAC/B;IACF;IAEA,MAAMI,KAAK,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACwB,IAAI,CAACC,IAAI,CAACpC,MAAM,CAACqC,WAAW,CAAC,IAAI,CAAC5B,KAAK,CAAC6B,EAAE,CAAC,EAAE;MAAEf,IAAI;MAAEH;IAAO,CAAC,CAAC;IAC9F,OAAO,IAAI,CAACT,MAAM,CAAC4B,OAAO,CAACC,gBAAgB,CAACC,MAAM,CAAC,IAAI,CAAChC,KAAK,EAAEyB,KAAK,CAAC,CAACA,KAAK;EAC7E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMQ,KAAK,CAACJ,EAAE,EAAwC;IAAA,IAAtC;MAAExB,KAAK,GAAG,IAAI;MAAE6B,KAAK,GAAG;IAAM,CAAC,uEAAG,CAAC,CAAC;IAClD,IAAIL,EAAE,EAAE;MACN,IAAI,CAACK,KAAK,EAAE;QACV,MAAMC,QAAQ,GAAG,IAAI,CAAC9B,KAAK,CAAC+B,GAAG,CAACP,EAAE,CAAC;QACnC,IAAIM,QAAQ,EAAE,OAAOA,QAAQ;MAC/B;MACA,MAAMV,KAAK,GAAG,MAAM,IAAI,CAACvB,MAAM,CAACwB,IAAI,CAACU,GAAG,CAAC7C,MAAM,CAAC8C,UAAU,CAAC,IAAI,CAACrC,KAAK,CAAC6B,EAAE,EAAEA,EAAE,CAAC,CAAC;MAC9E,OAAO,IAAI,CAAC1B,IAAI,CAACsB,KAAK,EAAEpB,KAAK,CAAC;IAChC;IAEA,MAAMD,IAAI,GAAG,MAAM,IAAI,CAACF,MAAM,CAACwB,IAAI,CAACU,GAAG,CAAC7C,MAAM,CAACqC,WAAW,CAAC,IAAI,CAAC5B,KAAK,CAAC6B,EAAE,CAAC,CAAC;IAC1E,MAAMS,MAAM,GAAG,IAAIjD,UAAU,EAAE;IAC/B,KAAK,MAAMoC,KAAK,IAAIrB,IAAI,EAAEkC,MAAM,CAACC,GAAG,CAACd,KAAK,CAACI,EAAE,EAAE,IAAI,CAAC1B,IAAI,CAACsB,KAAK,EAAEpB,KAAK,CAAC,CAAC;IACvE,OAAOiC,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAME,MAAM,CAACf,KAAK,EAAEd,MAAM,EAAE;IAC1B,MAAMkB,EAAE,GAAG,IAAI,CAACP,SAAS,CAACG,KAAK,CAAC;IAChC,IAAI,CAACI,EAAE,EAAE,MAAM,IAAIlC,kBAAkB,CAACC,UAAU,CAACsB,WAAW,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;IAC/F,MAAM,IAAI,CAAChB,MAAM,CAACwB,IAAI,CAACc,MAAM,CAACjD,MAAM,CAAC8C,UAAU,CAAC,IAAI,CAACrC,KAAK,CAAC6B,EAAE,EAAEA,EAAE,CAAC,EAAE;MAAElB;IAAO,CAAC,CAAC;EACjF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM8B,IAAI,CAAChB,KAAK,EAAErB,IAAI,EAAE;IACtB,MAAMyB,EAAE,GAAG,IAAI,CAACP,SAAS,CAACG,KAAK,CAAC;IAChC,IAAI,CAACI,EAAE,EAAE,MAAM,IAAIlC,kBAAkB,CAACC,UAAU,CAACsB,WAAW,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;IAC/F,MAAMR,KAAK,GAAGN,IAAI,CAACM,KAAK,EAAEgC,GAAG,CAACC,CAAC,IAAI,IAAI,CAAC3C,KAAK,CAACU,KAAK,CAACY,SAAS,CAACqB,CAAC,CAAC,CAAC;IACjE,MAAMC,OAAO,GAAG,MAAM,IAAI,CAAC1C,MAAM,CAACwB,IAAI,CAACmB,KAAK,CAACtD,MAAM,CAAC8C,UAAU,CAAC,IAAI,CAACrC,KAAK,CAAC6B,EAAE,EAAEA,EAAE,CAAC,EAAE;MACjFf,IAAI,EAAE;QACJL,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC;MACF,CAAC;MACDC,MAAM,EAAEP,IAAI,CAACO;IACf,CAAC,CAAC;IACF,MAAMwB,QAAQ,GAAG,IAAI,CAAC9B,KAAK,CAAC+B,GAAG,CAACP,EAAE,CAAC;IACnC,IAAIM,QAAQ,EAAE;MACZ,MAAMW,KAAK,GAAGX,QAAQ,CAACY,MAAM,EAAE;MAC/BD,KAAK,CAACE,MAAM,CAACJ,OAAO,CAAC;MACrB,OAAOE,KAAK;IACd;IACA,OAAO,IAAI,CAAC3C,IAAI,CAACyC,OAAO,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMK,WAAW,CAACxB,KAAK,EAAE;IACvBA,KAAK,GAAG,IAAI,CAACyB,OAAO,CAACzB,KAAK,CAAC;IAC3B,IAAI,CAACA,KAAK,EAAE,MAAM,IAAI9B,kBAAkB,CAACC,UAAU,CAACsB,WAAW,EAAE,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;IAClG,IAAIO,KAAK,CAAC0B,OAAO,EAAE;MACjB,MAAM,IAAIzD,cAAc,CAACE,UAAU,CAACwD,YAAY,CAAC;IACnD;IAEA,MAAM;MAAEC;IAAG,CAAC,GAAG,IAAI,CAACrD,KAAK,CAACsD,OAAO;IACjC,IAAI,CAACD,EAAE,EAAE,MAAM,IAAI3D,cAAc,CAACE,UAAU,CAAC2D,eAAe,CAAC;IAC7D,IAAI,CAACF,EAAE,CAACG,WAAW,CAACC,GAAG,CAACjE,mBAAmB,CAACkE,uBAAuB,CAAC,EAAE;MACpE,MAAM,IAAIhE,cAAc,CAACE,UAAU,CAAC+D,wCAAwC,EAAE,IAAI,CAAC3D,KAAK,CAAC;IAC3F;IAEA,MAAMI,IAAI,GAAG,MAAM,IAAI,CAACF,MAAM,CAACwB,IAAI,CAACU,GAAG,CAAC7C,MAAM,CAAC8C,UAAU,CAAC,IAAI,CAACrC,KAAK,CAAC6B,EAAE,EAAEJ,KAAK,CAACI,EAAE,CAAC,CAAC;IACnFJ,KAAK,CAACuB,MAAM,CAAC5C,IAAI,CAAC;IAClB,OAAOqB,KAAK,CAACmC,MAAM;EACrB;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGhE,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}