{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a ban in a guild on Discord.\n * @extends {Base}\n */\nclass GuildBan extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild in which the ban is\n     * @type {Guild}\n     */\n    this.guild = guild;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user this ban applies to\n       * @type {User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n    if ('reason' in data) {\n      /**\n       * The reason for the ban\n       * @type {?string}\n       */\n      this.reason = data.reason;\n    }\n  }\n\n  /**\n   * Whether this GuildBan is partial. If the reason is not provided the value is null\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !('reason' in this);\n  }\n\n  /**\n   * Fetches this GuildBan.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildBan>}\n   */\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.bans.fetch({\n      user: this.user,\n      cache: true,\n      force\n    });\n  }\n}\nmodule.exports = GuildBan;","map":{"version":3,"names":["Base","require","GuildBan","constructor","client","data","guild","_patch","user","users","_add","reason","partial","fetch","force","bans","cache","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildBan.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a ban in a guild on Discord.\n * @extends {Base}\n */\nclass GuildBan extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild in which the ban is\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user this ban applies to\n       * @type {User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('reason' in data) {\n      /**\n       * The reason for the ban\n       * @type {?string}\n       */\n      this.reason = data.reason;\n    }\n  }\n\n  /**\n   * Whether this GuildBan is partial. If the reason is not provided the value is null\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !('reason' in this);\n  }\n\n  /**\n   * Fetches this GuildBan.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildBan>}\n   */\n  fetch(force = true) {\n    return this.guild.bans.fetch({ user: this.user, cache: true, force });\n  }\n}\n\nmodule.exports = GuildBan;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASF,IAAI,CAAC;EAC1BG,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC/B,KAAK,CAACF,MAAM,CAAC;;IAEb;AACJ;AACA;AACA;IACI,IAAI,CAACE,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC;EACnB;EAEAE,MAAM,CAACF,IAAI,EAAE;IACX,IAAI,MAAM,IAAIA,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACG,IAAI,GAAG,IAAI,CAACJ,MAAM,CAACK,KAAK,CAACC,IAAI,CAACL,IAAI,CAACG,IAAI,EAAE,IAAI,CAAC;IACrD;IAEA,IAAI,QAAQ,IAAIH,IAAI,EAAE;MACpB;AACN;AACA;AACA;MACM,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACM,MAAM;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,OAAO,GAAG;IACZ,OAAO,EAAE,QAAQ,IAAI,IAAI,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;AACA;EACEC,KAAK,GAAe;IAAA,IAAdC,KAAK,uEAAG,IAAI;IAChB,OAAO,IAAI,CAACR,KAAK,CAACS,IAAI,CAACF,KAAK,CAAC;MAAEL,IAAI,EAAE,IAAI,CAACA,IAAI;MAAEQ,KAAK,EAAE,IAAI;MAAEF;IAAM,CAAC,CAAC;EACvE;AACF;AAEAG,MAAM,CAACC,OAAO,GAAGhB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}