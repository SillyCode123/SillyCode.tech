{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst Base = require('../Base');\n\n/**\n * Represents an OAuth2 Application.\n * @extends {Base}\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n  _patch(data) {\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the application\n       * @type {?string}\n       */\n      this.name = data.name;\n    } else {\n      this.name ??= null;\n    }\n    if ('description' in data) {\n      /**\n       * The application's description\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n    if ('icon' in data) {\n      /**\n       * The application's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the application was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the application was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.icon && this.client.rest.cdn.appIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  coverURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.cover && this.client.rest.cdn.appIcon(this.id, this.cover, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Application object.\n   * @returns {?string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n  toJSON() {\n    return super.toJSON({\n      createdTimestamp: true\n    });\n  }\n}\nmodule.exports = Application;","map":{"version":3,"names":["DiscordSnowflake","require","Base","Application","constructor","client","data","_patch","id","name","description","icon","createdTimestamp","timestampFrom","createdAt","Date","iconURL","options","rest","cdn","appIcon","coverURL","cover","toString","toJSON","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/interfaces/Application.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('../Base');\n\n/**\n * Represents an OAuth2 Application.\n * @extends {Base}\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the application\n       * @type {?string}\n       */\n      this.name = data.name;\n    } else {\n      this.name ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The application's description\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The application's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the application was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the application was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.appIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  coverURL(options = {}) {\n    return this.cover && this.client.rest.cdn.appIcon(this.id, this.cover, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Application object.\n   * @returns {?string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Application;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAiB,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA,MAAME,WAAW,SAASD,IAAI,CAAC;EAC7BE,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;IACb,IAAI,CAACE,MAAM,CAACD,IAAI,CAAC;EACnB;EAEAC,MAAM,CAACD,IAAI,EAAE;IACX;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGF,IAAI,CAACE,EAAE;IAEjB,IAAI,MAAM,IAAIF,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACG,IAAI;IACvB,CAAC,MAAM;MACL,IAAI,CAACA,IAAI,KAAK,IAAI;IACpB;IAEA,IAAI,aAAa,IAAIH,IAAI,EAAE;MACzB;AACN;AACA;AACA;MACM,IAAI,CAACI,WAAW,GAAGJ,IAAI,CAACI,WAAW;IACrC,CAAC,MAAM;MACL,IAAI,CAACA,WAAW,KAAK,IAAI;IAC3B;IAEA,IAAI,MAAM,IAAIJ,IAAI,EAAE;MAClB;AACN;AACA;AACA;MACM,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACK,IAAI;IACvB,CAAC,MAAM;MACL,IAAI,CAACA,IAAI,KAAK,IAAI;IACpB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,gBAAgB,GAAG;IACrB,OAAOZ,gBAAgB,CAACa,aAAa,CAAC,IAAI,CAACL,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIM,SAAS,GAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEI,OAAO,GAAe;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAClB,OAAO,IAAI,CAACN,IAAI,IAAI,IAAI,CAACN,MAAM,CAACa,IAAI,CAACC,GAAG,CAACC,OAAO,CAAC,IAAI,CAACZ,EAAE,EAAE,IAAI,CAACG,IAAI,EAAEM,OAAO,CAAC;EAC/E;;EAEA;AACF;AACA;AACA;AACA;EACEI,QAAQ,GAAe;IAAA,IAAdJ,OAAO,uEAAG,CAAC,CAAC;IACnB,OAAO,IAAI,CAACK,KAAK,IAAI,IAAI,CAACjB,MAAM,CAACa,IAAI,CAACC,GAAG,CAACC,OAAO,CAAC,IAAI,CAACZ,EAAE,EAAE,IAAI,CAACc,KAAK,EAAEL,OAAO,CAAC;EACjF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,QAAQ,GAAG;IACT,OAAO,IAAI,CAACd,IAAI;EAClB;EAEAe,MAAM,GAAG;IACP,OAAO,KAAK,CAACA,MAAM,CAAC;MAAEZ,gBAAgB,EAAE;IAAK,CAAC,CAAC;EACjD;AACF;AAEAa,MAAM,CAACC,OAAO,GAAGvB,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}