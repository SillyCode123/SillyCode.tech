{"ast":null,"code":"'use strict';\n\nconst {\n  makeURLSearchParams\n} = require('@discordjs/rest');\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  Routes,\n  GuildFeature\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\n\n/**\n * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.\n * @extends {Base}\n * @abstract\n */\nclass BaseGuild extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The guild's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon hash of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * An array of features available to this guild\n     * @type {GuildFeature[]}\n     */\n    this.features = data.features;\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name.replace(/'s /g, ' ').replace(/\\w+/g, e => e[0]).replace(/\\s/g, '');\n  }\n\n  /**\n   * Whether this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes(GuildFeature.Partnered);\n  }\n\n  /**\n   * Whether this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes(GuildFeature.Verified);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guild(this.id), {\n      query: makeURLSearchParams({\n        with_counts: true\n      })\n    });\n    return this.client.guilds._add(data);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\nmodule.exports = BaseGuild;","map":{"version":3,"names":["makeURLSearchParams","require","DiscordSnowflake","Routes","GuildFeature","Base","BaseGuild","constructor","client","data","id","name","icon","features","createdTimestamp","timestampFrom","createdAt","Date","nameAcronym","replace","e","partnered","includes","Partnered","verified","Verified","iconURL","options","rest","cdn","fetch","get","guild","query","with_counts","guilds","_add","toString","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/BaseGuild.js"],"sourcesContent":["'use strict';\n\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes, GuildFeature } = require('discord-api-types/v10');\nconst Base = require('./Base');\n\n/**\n * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.\n * @extends {Base}\n * @abstract\n */\nclass BaseGuild extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The guild's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon hash of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * An array of features available to this guild\n     * @type {GuildFeature[]}\n     */\n    this.features = data.features;\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name\n      .replace(/'s /g, ' ')\n      .replace(/\\w+/g, e => e[0])\n      .replace(/\\s/g, '');\n  }\n\n  /**\n   * Whether this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes(GuildFeature.Partnered);\n  }\n\n  /**\n   * Whether this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes(GuildFeature.Verified);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guild(this.id), {\n      query: makeURLSearchParams({ with_counts: true }),\n    });\n    return this.client.guilds._add(data);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\n\nmodule.exports = BaseGuild;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAoB,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC1D,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC3D,MAAM;EAAEE,MAAM;EAAEC;AAAa,CAAC,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACjE,MAAMI,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA,MAAMK,SAAS,SAASD,IAAI,CAAC;EAC3BE,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,CAAC;;IAEb;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGD,IAAI,CAACC,EAAE;;IAEjB;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGF,IAAI,CAACE,IAAI;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACG,IAAI;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,gBAAgB,GAAG;IACrB,OAAOZ,gBAAgB,CAACa,aAAa,CAAC,IAAI,CAACL,EAAE,CAAC;EAChD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIM,SAAS,GAAG;IACd,OAAO,IAAIC,IAAI,CAAC,IAAI,CAACH,gBAAgB,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,WAAW,GAAG;IAChB,OAAO,IAAI,CAACP,IAAI,CACbQ,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1BD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIE,SAAS,GAAG;IACd,OAAO,IAAI,CAACR,QAAQ,CAACS,QAAQ,CAAClB,YAAY,CAACmB,SAAS,CAAC;EACvD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,QAAQ,GAAG;IACb,OAAO,IAAI,CAACX,QAAQ,CAACS,QAAQ,CAAClB,YAAY,CAACqB,QAAQ,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAO,GAAe;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAClB,OAAO,IAAI,CAACf,IAAI,IAAI,IAAI,CAACJ,MAAM,CAACoB,IAAI,CAACC,GAAG,CAACjB,IAAI,CAAC,IAAI,CAACF,EAAE,EAAE,IAAI,CAACE,IAAI,EAAEe,OAAO,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;EACE,MAAMG,KAAK,GAAG;IACZ,MAAMrB,IAAI,GAAG,MAAM,IAAI,CAACD,MAAM,CAACoB,IAAI,CAACG,GAAG,CAAC5B,MAAM,CAAC6B,KAAK,CAAC,IAAI,CAACtB,EAAE,CAAC,EAAE;MAC7DuB,KAAK,EAAEjC,mBAAmB,CAAC;QAAEkC,WAAW,EAAE;MAAK,CAAC;IAClD,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1B,MAAM,CAAC2B,MAAM,CAACC,IAAI,CAAC3B,IAAI,CAAC;EACtC;;EAEA;AACF;AACA;AACA;EACE4B,QAAQ,GAAG;IACT,OAAO,IAAI,CAAC1B,IAAI;EAClB;AACF;AAEA2B,MAAM,CAACC,OAAO,GAAGjC,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}