{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst {\n  parseEmoji\n} = require('../util/Util');\n\n/**\n * Holds methods to resolve GuildEmojis and stores their cache.\n * @extends {CachedManager}\n */\nclass BaseGuildEmojiManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, GuildEmoji, iterable);\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name BaseGuildEmojiManager#cache\n   */\n\n  /**\n   * Data that can be resolved into a GuildEmoji object. This can be:\n   * * A Snowflake\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji id string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveId(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res?.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      return emoji;\n    }\n    return null;\n  }\n}\nmodule.exports = BaseGuildEmojiManager;","map":{"version":3,"names":["CachedManager","require","GuildEmoji","ReactionEmoji","parseEmoji","BaseGuildEmojiManager","constructor","client","iterable","resolve","emoji","id","resolveId","resolveIdentifier","emojiResolvable","identifier","res","name","length","animated","includes","encodeURIComponent","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/managers/BaseGuildEmojiManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst { parseEmoji } = require('../util/Util');\n\n/**\n * Holds methods to resolve GuildEmojis and stores their cache.\n * @extends {CachedManager}\n */\nclass BaseGuildEmojiManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, GuildEmoji, iterable);\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name BaseGuildEmojiManager#cache\n   */\n\n  /**\n   * Data that can be resolved into a GuildEmoji object. This can be:\n   * * A Snowflake\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji id string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveId(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res?.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = BaseGuildEmojiManager;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACtD,MAAME,aAAa,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAC5D,MAAM;EAAEG;AAAW,CAAC,GAAGH,OAAO,CAAC,cAAc,CAAC;;AAE9C;AACA;AACA;AACA;AACA,MAAMI,qBAAqB,SAASL,aAAa,CAAC;EAChDM,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC5B,KAAK,CAACD,MAAM,EAAEL,UAAU,EAAEM,QAAQ,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACEC,OAAO,CAACC,KAAK,EAAE;IACb,IAAIA,KAAK,YAAYP,aAAa,EAAE,OAAO,KAAK,CAACM,OAAO,CAACC,KAAK,CAACC,EAAE,CAAC;IAClE,OAAO,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEE,SAAS,CAACF,KAAK,EAAE;IACf,IAAIA,KAAK,YAAYP,aAAa,EAAE,OAAOO,KAAK,CAACC,EAAE;IACnD,OAAO,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;EACEG,iBAAiB,CAACH,KAAK,EAAE;IACvB,MAAMI,eAAe,GAAG,IAAI,CAACL,OAAO,CAACC,KAAK,CAAC;IAC3C,IAAII,eAAe,EAAE,OAAOA,eAAe,CAACC,UAAU;IACtD,IAAIL,KAAK,YAAYP,aAAa,EAAE,OAAOO,KAAK,CAACK,UAAU;IAC3D,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAMM,GAAG,GAAGZ,UAAU,CAACM,KAAK,CAAC;MAC7B,IAAIM,GAAG,EAAEC,IAAI,CAACC,MAAM,EAAE;QACpBR,KAAK,GAAI,GAAEM,GAAG,CAACG,QAAQ,GAAG,IAAI,GAAG,EAAG,GAAEH,GAAG,CAACC,IAAK,GAAED,GAAG,CAACL,EAAE,GAAI,IAAGK,GAAG,CAACL,EAAG,EAAC,GAAG,EAAG,EAAC;MAC/E;MACA,IAAI,CAACD,KAAK,CAACU,QAAQ,CAAC,GAAG,CAAC,EAAE,OAAOC,kBAAkB,CAACX,KAAK,CAAC;MAC1D,OAAOA,KAAK;IACd;IACA,OAAO,IAAI;EACb;AACF;AAEAY,MAAM,CAACC,OAAO,GAAGlB,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}