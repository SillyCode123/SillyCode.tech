{"ast":null,"code":"'use strict';\n\nvar get = require('lodash/get.js');\nvar util = require('util');\nvar fastDeepEqual = require('fast-deep-equal/es6/index.js');\nvar uniqWith = require('lodash/uniqWith.js');\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\n\n// src/lib/configs.ts\nvar validationEnabled = true;\nfunction setGlobalValidationEnabled(enabled) {\n  validationEnabled = enabled;\n}\n__name(setGlobalValidationEnabled, \"setGlobalValidationEnabled\");\nfunction getGlobalValidationEnabled() {\n  return validationEnabled;\n}\n__name(getGlobalValidationEnabled, \"getGlobalValidationEnabled\");\n\n// src/lib/Result.ts\nvar Result = class {\n  constructor(success, value, error) {\n    this.success = success;\n    if (success) {\n      this.value = value;\n    } else {\n      this.error = error;\n    }\n  }\n  isOk() {\n    return this.success;\n  }\n  isErr() {\n    return !this.success;\n  }\n  unwrap() {\n    if (this.isOk()) return this.value;\n    throw this.error;\n  }\n  static ok(value) {\n    return new Result(true, value);\n  }\n  static err(error) {\n    return new Result(false, void 0, error);\n  }\n};\n__name(Result, \"Result\");\n\n// src/validators/util/getValue.ts\nfunction getValue(valueOrFn) {\n  return typeof valueOrFn === \"function\" ? valueOrFn() : valueOrFn;\n}\n__name(getValue, \"getValue\");\n\n// src/lib/errors/BaseError.ts\nvar customInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\nvar customInspectSymbolStackLess = Symbol.for(\"nodejs.util.inspect.custom.stack-less\");\nvar BaseError = class extends Error {\n  [customInspectSymbol](depth, options) {\n    return `${this[customInspectSymbolStackLess](depth, options)}\n${this.stack.slice(this.stack.indexOf(\"\\n\"))}`;\n  }\n};\n__name(BaseError, \"BaseError\");\n\n// src/lib/errors/BaseConstraintError.ts\nvar BaseConstraintError = class extends BaseError {\n  constructor(constraint, message, given) {\n    super(message);\n    this.constraint = constraint;\n    this.given = given;\n  }\n};\n__name(BaseConstraintError, \"BaseConstraintError\");\n\n// src/lib/errors/ExpectedConstraintError.ts\nvar ExpectedConstraintError = class extends BaseConstraintError {\n  constructor(constraint, message, given, expected) {\n    super(constraint, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      constraint: this.constraint,\n      given: this.given,\n      expected: this.expected\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const constraint = options.stylize(this.constraint, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ExpectedConstraintError: ${constraint}]`, \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = util.inspect(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ExpectedConstraintError\", \"special\")} > ${constraint}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedBlock = `\n  ${options.stylize(\"Expected: \", \"string\")}${options.stylize(this.expected, \"boolean\")}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(ExpectedConstraintError, \"ExpectedConstraintError\");\n\n// src/constraints/ObjectConstrains.ts\nfunction whenConstraint(key, options, validator) {\n  return {\n    run(input, parent) {\n      if (!parent) {\n        return Result.err(new ExpectedConstraintError(\"s.object(T.when)\", \"Validator has no parent\", parent, \"Validator to have a parent\"));\n      }\n      const isKeyArray = Array.isArray(key);\n      const value = isKeyArray ? key.map(k => get(parent, k)) : get(parent, key);\n      const predicate = resolveBooleanIs(options, value, isKeyArray) ? options.then : options.otherwise;\n      if (predicate) {\n        return predicate(validator).run(input);\n      }\n      return Result.ok(input);\n    }\n  };\n}\n__name(whenConstraint, \"whenConstraint\");\nfunction resolveBooleanIs(options, value, isKeyArray) {\n  if (options.is === void 0) {\n    return isKeyArray ? !value.some(val => !val) : Boolean(value);\n  }\n  if (typeof options.is === \"function\") {\n    return options.is(value);\n  }\n  return value === options.is;\n}\n__name(resolveBooleanIs, \"resolveBooleanIs\");\n\n// src/validators/BaseValidator.ts\nvar BaseValidator = class {\n  constructor() {\n    let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.constraints = [];\n    this.isValidationEnabled = null;\n    this.constraints = constraints;\n  }\n  setParent(parent) {\n    this.parent = parent;\n    return this;\n  }\n  get optional() {\n    return new UnionValidator([new LiteralValidator(void 0), this.clone()]);\n  }\n  get nullable() {\n    return new UnionValidator([new LiteralValidator(null), this.clone()]);\n  }\n  get nullish() {\n    return new UnionValidator([new NullishValidator(), this.clone()]);\n  }\n  get array() {\n    return new ArrayValidator(this.clone());\n  }\n  get set() {\n    return new SetValidator(this.clone());\n  }\n  or() {\n    for (var _len = arguments.length, predicates = new Array(_len), _key = 0; _key < _len; _key++) {\n      predicates[_key] = arguments[_key];\n    }\n    return new UnionValidator([this.clone(), ...predicates]);\n  }\n  transform(cb) {\n    return this.addConstraint({\n      run: input => Result.ok(cb(input))\n    });\n  }\n  reshape(cb) {\n    return this.addConstraint({\n      run: cb\n    });\n  }\n  default(value) {\n    return new DefaultValidator(this.clone(), value);\n  }\n  when(key, options) {\n    return this.addConstraint(whenConstraint(key, options, this));\n  }\n  run(value) {\n    let result = this.handle(value);\n    if (result.isErr()) return result;\n    for (const constraint of this.constraints) {\n      result = constraint.run(result.value, this.parent);\n      if (result.isErr()) break;\n    }\n    return result;\n  }\n  parse(value) {\n    if (!this.shouldRunConstraints) {\n      return this.handle(value).unwrap();\n    }\n    return this.constraints.reduce((v, constraint) => constraint.run(v).unwrap(), this.handle(value).unwrap());\n  }\n  is(value) {\n    return this.run(value).isOk();\n  }\n  setValidationEnabled(isValidationEnabled) {\n    const clone = this.clone();\n    clone.isValidationEnabled = isValidationEnabled;\n    return clone;\n  }\n  getValidationEnabled() {\n    return getValue(this.isValidationEnabled);\n  }\n  get shouldRunConstraints() {\n    return getValue(this.isValidationEnabled) ?? getGlobalValidationEnabled();\n  }\n  clone() {\n    const clone = Reflect.construct(this.constructor, [this.constraints]);\n    clone.isValidationEnabled = this.isValidationEnabled;\n    return clone;\n  }\n  addConstraint(constraint) {\n    const clone = this.clone();\n    clone.constraints = clone.constraints.concat(constraint);\n    return clone;\n  }\n};\n__name(BaseValidator, \"BaseValidator\");\nfunction isUnique(input) {\n  if (input.length < 2) return true;\n  const uniqueArray2 = uniqWith(input, fastDeepEqual);\n  return uniqueArray2.length === input.length;\n}\n__name(isUnique, \"isUnique\");\n\n// src/constraints/util/operators.ts\nfunction lessThan(a, b) {\n  return a < b;\n}\n__name(lessThan, \"lessThan\");\nfunction lessThanOrEqual(a, b) {\n  return a <= b;\n}\n__name(lessThanOrEqual, \"lessThanOrEqual\");\nfunction greaterThan(a, b) {\n  return a > b;\n}\n__name(greaterThan, \"greaterThan\");\nfunction greaterThanOrEqual(a, b) {\n  return a >= b;\n}\n__name(greaterThanOrEqual, \"greaterThanOrEqual\");\nfunction equal(a, b) {\n  return a === b;\n}\n__name(equal, \"equal\");\nfunction notEqual(a, b) {\n  return a !== b;\n}\n__name(notEqual, \"notEqual\");\n\n// src/constraints/ArrayConstraints.ts\nfunction arrayLengthComparator(comparator, name, expected, length) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthComparator, \"arrayLengthComparator\");\nfunction arrayLengthLessThan(value) {\n  const expected = `expected.length < ${value}`;\n  return arrayLengthComparator(lessThan, \"s.array(T).lengthLessThan\", expected, value);\n}\n__name(arrayLengthLessThan, \"arrayLengthLessThan\");\nfunction arrayLengthLessThanOrEqual(value) {\n  const expected = `expected.length <= ${value}`;\n  return arrayLengthComparator(lessThanOrEqual, \"s.array(T).lengthLessThanOrEqual\", expected, value);\n}\n__name(arrayLengthLessThanOrEqual, \"arrayLengthLessThanOrEqual\");\nfunction arrayLengthGreaterThan(value) {\n  const expected = `expected.length > ${value}`;\n  return arrayLengthComparator(greaterThan, \"s.array(T).lengthGreaterThan\", expected, value);\n}\n__name(arrayLengthGreaterThan, \"arrayLengthGreaterThan\");\nfunction arrayLengthGreaterThanOrEqual(value) {\n  const expected = `expected.length >= ${value}`;\n  return arrayLengthComparator(greaterThanOrEqual, \"s.array(T).lengthGreaterThanOrEqual\", expected, value);\n}\n__name(arrayLengthGreaterThanOrEqual, \"arrayLengthGreaterThanOrEqual\");\nfunction arrayLengthEqual(value) {\n  const expected = `expected.length === ${value}`;\n  return arrayLengthComparator(equal, \"s.array(T).lengthEqual\", expected, value);\n}\n__name(arrayLengthEqual, \"arrayLengthEqual\");\nfunction arrayLengthNotEqual(value) {\n  const expected = `expected.length !== ${value}`;\n  return arrayLengthComparator(notEqual, \"s.array(T).lengthNotEqual\", expected, value);\n}\n__name(arrayLengthNotEqual, \"arrayLengthNotEqual\");\nfunction arrayLengthRange(start, endBefore) {\n  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.array(T).lengthRange\", \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthRange, \"arrayLengthRange\");\nfunction arrayLengthRangeInclusive(start, end) {\n  const expected = `expected.length >= ${start} && expected.length <= ${end}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.array(T).lengthRangeInclusive\", \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthRangeInclusive, \"arrayLengthRangeInclusive\");\nfunction arrayLengthRangeExclusive(startAfter, endBefore) {\n  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.array(T).lengthRangeExclusive\", \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthRangeExclusive, \"arrayLengthRangeExclusive\");\nvar uniqueArray = {\n  run(input) {\n    return isUnique(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.array(T).unique\", \"Array values are not unique\", input, \"Expected all values to be unique\"));\n  }\n};\n\n// src/lib/errors/CombinedPropertyError.ts\nvar CombinedPropertyError = class extends BaseError {\n  constructor(errors) {\n    super(\"Received one or more errors\");\n    this.errors = errors;\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    if (depth < 0) {\n      return options.stylize(\"[CombinedPropertyError]\", \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1,\n      compact: true\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const header = `${options.stylize(\"CombinedPropertyError\", \"special\")} (${options.stylize(this.errors.length.toString(), \"number\")})`;\n    const message = options.stylize(this.message, \"regexp\");\n    const errors = this.errors.map(_ref => {\n      let [key, error] = _ref;\n      const property = CombinedPropertyError.formatProperty(key, options);\n      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n      return `  input${property}${padding}${body}`;\n    }).join(\"\\n\\n\");\n    return `${header}\n  ${message}\n\n${errors}`;\n  }\n  static formatProperty(key, options) {\n    if (typeof key === \"string\") return options.stylize(`.${key}`, \"symbol\");\n    if (typeof key === \"number\") return `[${options.stylize(key.toString(), \"number\")}]`;\n    return `[${options.stylize(\"Symbol\", \"symbol\")}(${key.description})]`;\n  }\n};\n__name(CombinedPropertyError, \"CombinedPropertyError\");\nvar ValidationError = class extends BaseError {\n  constructor(validator, message, given) {\n    super(message);\n    this.validator = validator;\n    this.given = given;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      validator: this.validator,\n      given: this.given\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const validator = options.stylize(this.validator, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ValidationError: ${validator}]`, \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1,\n      compact: true\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = util.inspect(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ValidationError\", \"special\")} > ${validator}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${givenBlock}`;\n  }\n};\n__name(ValidationError, \"ValidationError\");\n\n// src/validators/ArrayValidator.ts\nvar ArrayValidator = class extends BaseValidator {\n  constructor(validator) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validator = validator;\n  }\n  lengthLessThan(length) {\n    return this.addConstraint(arrayLengthLessThan(length));\n  }\n  lengthLessThanOrEqual(length) {\n    return this.addConstraint(arrayLengthLessThanOrEqual(length));\n  }\n  lengthGreaterThan(length) {\n    return this.addConstraint(arrayLengthGreaterThan(length));\n  }\n  lengthGreaterThanOrEqual(length) {\n    return this.addConstraint(arrayLengthGreaterThanOrEqual(length));\n  }\n  lengthEqual(length) {\n    return this.addConstraint(arrayLengthEqual(length));\n  }\n  lengthNotEqual(length) {\n    return this.addConstraint(arrayLengthNotEqual(length));\n  }\n  lengthRange(start, endBefore) {\n    return this.addConstraint(arrayLengthRange(start, endBefore));\n  }\n  lengthRangeInclusive(startAt, endAt) {\n    return this.addConstraint(arrayLengthRangeInclusive(startAt, endAt));\n  }\n  lengthRangeExclusive(startAfter, endBefore) {\n    return this.addConstraint(arrayLengthRangeExclusive(startAfter, endBefore));\n  }\n  get unique() {\n    return this.addConstraint(uniqueArray);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.constraints]);\n  }\n  handle(values) {\n    if (!Array.isArray(values)) {\n      return Result.err(new ValidationError(\"s.array(T)\", \"Expected an array\", values));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = [];\n    for (let i = 0; i < values.length; i++) {\n      const result = this.validator.run(values[i]);\n      if (result.isOk()) transformed.push(result.value);else errors.push([i, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors));\n  }\n};\n__name(ArrayValidator, \"ArrayValidator\");\n\n// src/constraints/BigIntConstraints.ts\nfunction bigintComparator(comparator, name, expected, number) {\n  return {\n    run(input) {\n      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid bigint value\", input, expected));\n    }\n  };\n}\n__name(bigintComparator, \"bigintComparator\");\nfunction bigintLessThan(value) {\n  const expected = `expected < ${value}n`;\n  return bigintComparator(lessThan, \"s.bigint.lessThan\", expected, value);\n}\n__name(bigintLessThan, \"bigintLessThan\");\nfunction bigintLessThanOrEqual(value) {\n  const expected = `expected <= ${value}n`;\n  return bigintComparator(lessThanOrEqual, \"s.bigint.lessThanOrEqual\", expected, value);\n}\n__name(bigintLessThanOrEqual, \"bigintLessThanOrEqual\");\nfunction bigintGreaterThan(value) {\n  const expected = `expected > ${value}n`;\n  return bigintComparator(greaterThan, \"s.bigint.greaterThan\", expected, value);\n}\n__name(bigintGreaterThan, \"bigintGreaterThan\");\nfunction bigintGreaterThanOrEqual(value) {\n  const expected = `expected >= ${value}n`;\n  return bigintComparator(greaterThanOrEqual, \"s.bigint.greaterThanOrEqual\", expected, value);\n}\n__name(bigintGreaterThanOrEqual, \"bigintGreaterThanOrEqual\");\nfunction bigintEqual(value) {\n  const expected = `expected === ${value}n`;\n  return bigintComparator(equal, \"s.bigint.equal\", expected, value);\n}\n__name(bigintEqual, \"bigintEqual\");\nfunction bigintNotEqual(value) {\n  const expected = `expected !== ${value}n`;\n  return bigintComparator(notEqual, \"s.bigint.notEqual\", expected, value);\n}\n__name(bigintNotEqual, \"bigintNotEqual\");\nfunction bigintDivisibleBy(divider) {\n  const expected = `expected % ${divider}n === 0n`;\n  return {\n    run(input) {\n      return input % divider === 0n ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.bigint.divisibleBy\", \"BigInt is not divisible\", input, expected));\n    }\n  };\n}\n__name(bigintDivisibleBy, \"bigintDivisibleBy\");\n\n// src/validators/BigIntValidator.ts\nvar BigIntValidator = class extends BaseValidator {\n  lessThan(number) {\n    return this.addConstraint(bigintLessThan(number));\n  }\n  lessThanOrEqual(number) {\n    return this.addConstraint(bigintLessThanOrEqual(number));\n  }\n  greaterThan(number) {\n    return this.addConstraint(bigintGreaterThan(number));\n  }\n  greaterThanOrEqual(number) {\n    return this.addConstraint(bigintGreaterThanOrEqual(number));\n  }\n  equal(number) {\n    return this.addConstraint(bigintEqual(number));\n  }\n  notEqual(number) {\n    return this.addConstraint(bigintNotEqual(number));\n  }\n  get positive() {\n    return this.greaterThanOrEqual(0n);\n  }\n  get negative() {\n    return this.lessThan(0n);\n  }\n  divisibleBy(number) {\n    return this.addConstraint(bigintDivisibleBy(number));\n  }\n  get abs() {\n    return this.transform(value => value < 0 ? -value : value);\n  }\n  intN(bits) {\n    return this.transform(value => BigInt.asIntN(bits, value));\n  }\n  uintN(bits) {\n    return this.transform(value => BigInt.asUintN(bits, value));\n  }\n  handle(value) {\n    return typeof value === \"bigint\" ? Result.ok(value) : Result.err(new ValidationError(\"s.bigint\", \"Expected a bigint primitive\", value));\n  }\n};\n__name(BigIntValidator, \"BigIntValidator\");\n\n// src/constraints/BooleanConstraints.ts\nvar booleanTrue = {\n  run(input) {\n    return input ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.boolean.true\", \"Invalid boolean value\", input, \"true\"));\n  }\n};\nvar booleanFalse = {\n  run(input) {\n    return input ? Result.err(new ExpectedConstraintError(\"s.boolean.false\", \"Invalid boolean value\", input, \"false\")) : Result.ok(input);\n  }\n};\n\n// src/validators/BooleanValidator.ts\nvar BooleanValidator = class extends BaseValidator {\n  get true() {\n    return this.addConstraint(booleanTrue);\n  }\n  get false() {\n    return this.addConstraint(booleanFalse);\n  }\n  equal(value) {\n    return value ? this.true : this.false;\n  }\n  notEqual(value) {\n    return value ? this.false : this.true;\n  }\n  handle(value) {\n    return typeof value === \"boolean\" ? Result.ok(value) : Result.err(new ValidationError(\"s.boolean\", \"Expected a boolean primitive\", value));\n  }\n};\n__name(BooleanValidator, \"BooleanValidator\");\n\n// src/constraints/DateConstraints.ts\nfunction dateComparator(comparator, name, expected, number) {\n  return {\n    run(input) {\n      return comparator(input.getTime(), number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid Date value\", input, expected));\n    }\n  };\n}\n__name(dateComparator, \"dateComparator\");\nfunction dateLessThan(value) {\n  const expected = `expected < ${value.toISOString()}`;\n  return dateComparator(lessThan, \"s.date.lessThan\", expected, value.getTime());\n}\n__name(dateLessThan, \"dateLessThan\");\nfunction dateLessThanOrEqual(value) {\n  const expected = `expected <= ${value.toISOString()}`;\n  return dateComparator(lessThanOrEqual, \"s.date.lessThanOrEqual\", expected, value.getTime());\n}\n__name(dateLessThanOrEqual, \"dateLessThanOrEqual\");\nfunction dateGreaterThan(value) {\n  const expected = `expected > ${value.toISOString()}`;\n  return dateComparator(greaterThan, \"s.date.greaterThan\", expected, value.getTime());\n}\n__name(dateGreaterThan, \"dateGreaterThan\");\nfunction dateGreaterThanOrEqual(value) {\n  const expected = `expected >= ${value.toISOString()}`;\n  return dateComparator(greaterThanOrEqual, \"s.date.greaterThanOrEqual\", expected, value.getTime());\n}\n__name(dateGreaterThanOrEqual, \"dateGreaterThanOrEqual\");\nfunction dateEqual(value) {\n  const expected = `expected === ${value.toISOString()}`;\n  return dateComparator(equal, \"s.date.equal\", expected, value.getTime());\n}\n__name(dateEqual, \"dateEqual\");\nfunction dateNotEqual(value) {\n  const expected = `expected !== ${value.toISOString()}`;\n  return dateComparator(notEqual, \"s.date.notEqual\", expected, value.getTime());\n}\n__name(dateNotEqual, \"dateNotEqual\");\nvar dateInvalid = {\n  run(input) {\n    return Number.isNaN(input.getTime()) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.date.invalid\", \"Invalid Date value\", input, \"expected === NaN\"));\n  }\n};\nvar dateValid = {\n  run(input) {\n    return Number.isNaN(input.getTime()) ? Result.err(new ExpectedConstraintError(\"s.date.valid\", \"Invalid Date value\", input, \"expected !== NaN\")) : Result.ok(input);\n  }\n};\n\n// src/validators/DateValidator.ts\nvar DateValidator = class extends BaseValidator {\n  lessThan(date) {\n    return this.addConstraint(dateLessThan(new Date(date)));\n  }\n  lessThanOrEqual(date) {\n    return this.addConstraint(dateLessThanOrEqual(new Date(date)));\n  }\n  greaterThan(date) {\n    return this.addConstraint(dateGreaterThan(new Date(date)));\n  }\n  greaterThanOrEqual(date) {\n    return this.addConstraint(dateGreaterThanOrEqual(new Date(date)));\n  }\n  equal(date) {\n    const resolved = new Date(date);\n    return Number.isNaN(resolved.getTime()) ? this.invalid : this.addConstraint(dateEqual(resolved));\n  }\n  notEqual(date) {\n    const resolved = new Date(date);\n    return Number.isNaN(resolved.getTime()) ? this.valid : this.addConstraint(dateNotEqual(resolved));\n  }\n  get valid() {\n    return this.addConstraint(dateValid);\n  }\n  get invalid() {\n    return this.addConstraint(dateInvalid);\n  }\n  handle(value) {\n    return value instanceof Date ? Result.ok(value) : Result.err(new ValidationError(\"s.date\", \"Expected a Date\", value));\n  }\n};\n__name(DateValidator, \"DateValidator\");\nvar ExpectedValidationError = class extends ValidationError {\n  constructor(validator, message, given, expected) {\n    super(validator, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      validator: this.validator,\n      given: this.given,\n      expected: this.expected\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const validator = options.stylize(this.validator, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ExpectedValidationError: ${validator}]`, \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const expected = util.inspect(this.expected, newOptions).replace(/\\n/g, padding);\n    const given = util.inspect(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ExpectedValidationError\", \"special\")} > ${validator}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedBlock = `\n  ${options.stylize(\"Expected:\", \"string\")}${padding}${expected}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(ExpectedValidationError, \"ExpectedValidationError\");\n\n// src/validators/InstanceValidator.ts\nvar InstanceValidator = class extends BaseValidator {\n  constructor(expected) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.expected = expected;\n  }\n  handle(value) {\n    return value instanceof this.expected ? Result.ok(value) : Result.err(new ExpectedValidationError(\"s.instance(V)\", \"Expected\", value, this.expected));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.expected, this.constraints]);\n  }\n};\n__name(InstanceValidator, \"InstanceValidator\");\n\n// src/validators/LiteralValidator.ts\nvar LiteralValidator = class extends BaseValidator {\n  constructor(literal) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.expected = literal;\n  }\n  handle(value) {\n    return Object.is(value, this.expected) ? Result.ok(value) : Result.err(new ExpectedValidationError(\"s.literal(V)\", \"Expected values to be equals\", value, this.expected));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.expected, this.constraints]);\n  }\n};\n__name(LiteralValidator, \"LiteralValidator\");\n\n// src/validators/NeverValidator.ts\nvar NeverValidator = class extends BaseValidator {\n  handle(value) {\n    return Result.err(new ValidationError(\"s.never\", \"Expected a value to not be passed\", value));\n  }\n};\n__name(NeverValidator, \"NeverValidator\");\n\n// src/validators/NullishValidator.ts\nvar NullishValidator = class extends BaseValidator {\n  handle(value) {\n    return value === void 0 || value === null ? Result.ok(value) : Result.err(new ValidationError(\"s.nullish\", \"Expected undefined or null\", value));\n  }\n};\n__name(NullishValidator, \"NullishValidator\");\n\n// src/constraints/NumberConstraints.ts\nfunction numberComparator(comparator, name, expected, number) {\n  return {\n    run(input) {\n      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid number value\", input, expected));\n    }\n  };\n}\n__name(numberComparator, \"numberComparator\");\nfunction numberLessThan(value) {\n  const expected = `expected < ${value}`;\n  return numberComparator(lessThan, \"s.number.lessThan\", expected, value);\n}\n__name(numberLessThan, \"numberLessThan\");\nfunction numberLessThanOrEqual(value) {\n  const expected = `expected <= ${value}`;\n  return numberComparator(lessThanOrEqual, \"s.number.lessThanOrEqual\", expected, value);\n}\n__name(numberLessThanOrEqual, \"numberLessThanOrEqual\");\nfunction numberGreaterThan(value) {\n  const expected = `expected > ${value}`;\n  return numberComparator(greaterThan, \"s.number.greaterThan\", expected, value);\n}\n__name(numberGreaterThan, \"numberGreaterThan\");\nfunction numberGreaterThanOrEqual(value) {\n  const expected = `expected >= ${value}`;\n  return numberComparator(greaterThanOrEqual, \"s.number.greaterThanOrEqual\", expected, value);\n}\n__name(numberGreaterThanOrEqual, \"numberGreaterThanOrEqual\");\nfunction numberEqual(value) {\n  const expected = `expected === ${value}`;\n  return numberComparator(equal, \"s.number.equal\", expected, value);\n}\n__name(numberEqual, \"numberEqual\");\nfunction numberNotEqual(value) {\n  const expected = `expected !== ${value}`;\n  return numberComparator(notEqual, \"s.number.notEqual\", expected, value);\n}\n__name(numberNotEqual, \"numberNotEqual\");\nvar numberInt = {\n  run(input) {\n    return Number.isInteger(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number.int\", \"Given value is not an integer\", input, \"Number.isInteger(expected) to be true\"));\n  }\n};\nvar numberSafeInt = {\n  run(input) {\n    return Number.isSafeInteger(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number.safeInt\", \"Given value is not a safe integer\", input, \"Number.isSafeInteger(expected) to be true\"));\n  }\n};\nvar numberFinite = {\n  run(input) {\n    return Number.isFinite(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number.finite\", \"Given value is not finite\", input, \"Number.isFinite(expected) to be true\"));\n  }\n};\nvar numberNaN = {\n  run(input) {\n    return Number.isNaN(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number.equal(NaN)\", \"Invalid number value\", input, \"expected === NaN\"));\n  }\n};\nvar numberNotNaN = {\n  run(input) {\n    return Number.isNaN(input) ? Result.err(new ExpectedConstraintError(\"s.number.notEqual(NaN)\", \"Invalid number value\", input, \"expected !== NaN\")) : Result.ok(input);\n  }\n};\nfunction numberDivisibleBy(divider) {\n  const expected = `expected % ${divider} === 0`;\n  return {\n    run(input) {\n      return input % divider === 0 ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number.divisibleBy\", \"Number is not divisible\", input, expected));\n    }\n  };\n}\n__name(numberDivisibleBy, \"numberDivisibleBy\");\n\n// src/validators/NumberValidator.ts\nvar NumberValidator = class extends BaseValidator {\n  lessThan(number) {\n    return this.addConstraint(numberLessThan(number));\n  }\n  lessThanOrEqual(number) {\n    return this.addConstraint(numberLessThanOrEqual(number));\n  }\n  greaterThan(number) {\n    return this.addConstraint(numberGreaterThan(number));\n  }\n  greaterThanOrEqual(number) {\n    return this.addConstraint(numberGreaterThanOrEqual(number));\n  }\n  equal(number) {\n    return Number.isNaN(number) ? this.addConstraint(numberNaN) : this.addConstraint(numberEqual(number));\n  }\n  notEqual(number) {\n    return Number.isNaN(number) ? this.addConstraint(numberNotNaN) : this.addConstraint(numberNotEqual(number));\n  }\n  get int() {\n    return this.addConstraint(numberInt);\n  }\n  get safeInt() {\n    return this.addConstraint(numberSafeInt);\n  }\n  get finite() {\n    return this.addConstraint(numberFinite);\n  }\n  get positive() {\n    return this.greaterThanOrEqual(0);\n  }\n  get negative() {\n    return this.lessThan(0);\n  }\n  divisibleBy(divider) {\n    return this.addConstraint(numberDivisibleBy(divider));\n  }\n  get abs() {\n    return this.transform(Math.abs);\n  }\n  get sign() {\n    return this.transform(Math.sign);\n  }\n  get trunc() {\n    return this.transform(Math.trunc);\n  }\n  get floor() {\n    return this.transform(Math.floor);\n  }\n  get fround() {\n    return this.transform(Math.fround);\n  }\n  get round() {\n    return this.transform(Math.round);\n  }\n  get ceil() {\n    return this.transform(Math.ceil);\n  }\n  handle(value) {\n    return typeof value === \"number\" ? Result.ok(value) : Result.err(new ValidationError(\"s.number\", \"Expected a number primitive\", value));\n  }\n};\n__name(NumberValidator, \"NumberValidator\");\n\n// src/lib/errors/MissingPropertyError.ts\nvar MissingPropertyError = class extends BaseError {\n  constructor(property) {\n    super(\"A required property is missing\");\n    this.property = property;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      property: this.property\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const property = options.stylize(this.property.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[MissingPropertyError: ${property}]`, \"special\");\n    }\n    const header = `${options.stylize(\"MissingPropertyError\", \"special\")} > ${property}`;\n    const message = options.stylize(this.message, \"regexp\");\n    return `${header}\n  ${message}`;\n  }\n};\n__name(MissingPropertyError, \"MissingPropertyError\");\nvar UnknownPropertyError = class extends BaseError {\n  constructor(property, value) {\n    super(\"Received unexpected property\");\n    this.property = property;\n    this.value = value;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      property: this.property,\n      value: this.value\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const property = options.stylize(this.property.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[UnknownPropertyError: ${property}]`, \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1,\n      compact: true\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = util.inspect(this.value, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"UnknownPropertyError\", \"special\")} > ${property}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${givenBlock}`;\n  }\n};\n__name(UnknownPropertyError, \"UnknownPropertyError\");\n\n// src/validators/DefaultValidator.ts\nvar DefaultValidator = class extends BaseValidator {\n  constructor(validator, value) {\n    let constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super(constraints);\n    this.validator = validator;\n    this.defaultValue = value;\n  }\n  default(value) {\n    const clone = this.clone();\n    clone.defaultValue = value;\n    return clone;\n  }\n  handle(value) {\n    return typeof value === \"undefined\" ? Result.ok(getValue(this.defaultValue)) : this.validator[\"handle\"](value);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.defaultValue, this.constraints]);\n  }\n};\n__name(DefaultValidator, \"DefaultValidator\");\n\n// src/lib/errors/CombinedError.ts\nvar CombinedError = class extends BaseError {\n  constructor(errors) {\n    super(\"Received one or more errors\");\n    this.errors = errors;\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    if (depth < 0) {\n      return options.stylize(\"[CombinedError]\", \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1,\n      compact: true\n    };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const header = `${options.stylize(\"CombinedError\", \"special\")} (${options.stylize(this.errors.length.toString(), \"number\")})`;\n    const message = options.stylize(this.message, \"regexp\");\n    const errors = this.errors.map((error, i) => {\n      const index = options.stylize((i + 1).toString(), \"number\");\n      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n      return `  ${index} ${body}`;\n    }).join(\"\\n\\n\");\n    return `${header}\n  ${message}\n\n${errors}`;\n  }\n};\n__name(CombinedError, \"CombinedError\");\n\n// src/validators/UnionValidator.ts\nvar UnionValidator = class extends BaseValidator {\n  constructor(validators) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validators = validators;\n  }\n  get optional() {\n    if (this.validators.length === 0) return new UnionValidator([new LiteralValidator(void 0)], this.constraints);\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === void 0) return this.clone();\n      if (validator.expected === null) {\n        return new UnionValidator([new NullishValidator(), ...this.validators.slice(1)], this.constraints);\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new UnionValidator([new LiteralValidator(void 0), ...this.validators]);\n  }\n  get required() {\n    if (this.validators.length === 0) return this.clone();\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === void 0) return new UnionValidator(this.validators.slice(1), this.constraints);\n    } else if (validator instanceof NullishValidator) {\n      return new UnionValidator([new LiteralValidator(null), ...this.validators.slice(1)], this.constraints);\n    }\n    return this.clone();\n  }\n  get nullable() {\n    if (this.validators.length === 0) return new UnionValidator([new LiteralValidator(null)], this.constraints);\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === null) return this.clone();\n      if (validator.expected === void 0) {\n        return new UnionValidator([new NullishValidator(), ...this.validators.slice(1)], this.constraints);\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new UnionValidator([new LiteralValidator(null), ...this.validators]);\n  }\n  get nullish() {\n    if (this.validators.length === 0) return new UnionValidator([new NullishValidator()], this.constraints);\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === null || validator.expected === void 0) {\n        return new UnionValidator([new NullishValidator(), ...this.validators.slice(1)], this.constraints);\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new UnionValidator([new NullishValidator(), ...this.validators]);\n  }\n  or() {\n    for (var _len2 = arguments.length, predicates = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      predicates[_key2] = arguments[_key2];\n    }\n    return new UnionValidator([...this.validators, ...predicates]);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validators, this.constraints]);\n  }\n  handle(value) {\n    const errors = [];\n    for (const validator of this.validators) {\n      const result = validator.run(value);\n      if (result.isOk()) return result;\n      errors.push(result.error);\n    }\n    return Result.err(new CombinedError(errors));\n  }\n};\n__name(UnionValidator, \"UnionValidator\");\n\n// src/validators/ObjectValidator.ts\nvar ObjectValidator = class extends BaseValidator {\n  constructor(shape) {\n    let strategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ObjectValidatorStrategy.Ignore;\n    let constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super(constraints);\n    this.keys = [];\n    this.requiredKeys = /* @__PURE__ */new Map();\n    this.possiblyUndefinedKeys = /* @__PURE__ */new Map();\n    this.possiblyUndefinedKeysWithDefaults = /* @__PURE__ */new Map();\n    this.shape = shape;\n    this.strategy = strategy;\n    switch (this.strategy) {\n      case ObjectValidatorStrategy.Ignore:\n        this.handleStrategy = value => this.handleIgnoreStrategy(value);\n        break;\n      case ObjectValidatorStrategy.Strict:\n        {\n          this.handleStrategy = value => this.handleStrictStrategy(value);\n          break;\n        }\n      case ObjectValidatorStrategy.Passthrough:\n        this.handleStrategy = value => this.handlePassthroughStrategy(value);\n        break;\n    }\n    const shapeEntries = Object.entries(shape);\n    this.keys = shapeEntries.map(_ref2 => {\n      let [key] = _ref2;\n      return key;\n    });\n    for (const [key, validator] of shapeEntries) {\n      if (validator instanceof UnionValidator) {\n        const [possiblyLiteralOrNullishPredicate] = validator[\"validators\"];\n        if (possiblyLiteralOrNullishPredicate instanceof NullishValidator) {\n          this.possiblyUndefinedKeys.set(key, validator);\n        } else if (possiblyLiteralOrNullishPredicate instanceof LiteralValidator) {\n          if (possiblyLiteralOrNullishPredicate.expected === void 0) {\n            this.possiblyUndefinedKeys.set(key, validator);\n          } else {\n            this.requiredKeys.set(key, validator);\n          }\n        } else if (validator instanceof DefaultValidator) {\n          this.possiblyUndefinedKeysWithDefaults.set(key, validator);\n        } else {\n          this.requiredKeys.set(key, validator);\n        }\n      } else if (validator instanceof NullishValidator) {\n        this.possiblyUndefinedKeys.set(key, validator);\n      } else if (validator instanceof LiteralValidator) {\n        if (validator.expected === void 0) {\n          this.possiblyUndefinedKeys.set(key, validator);\n        } else {\n          this.requiredKeys.set(key, validator);\n        }\n      } else if (validator instanceof DefaultValidator) {\n        this.possiblyUndefinedKeysWithDefaults.set(key, validator);\n      } else {\n        this.requiredKeys.set(key, validator);\n      }\n    }\n  }\n  get strict() {\n    return Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Strict, this.constraints]);\n  }\n  get ignore() {\n    return Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Ignore, this.constraints]);\n  }\n  get passthrough() {\n    return Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Passthrough, this.constraints]);\n  }\n  get partial() {\n    const shape = Object.fromEntries(this.keys.map(key => [key, this.shape[key].optional]));\n    return Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n  }\n  get required() {\n    const shape = Object.fromEntries(this.keys.map(key => {\n      let validator = this.shape[key];\n      if (validator instanceof UnionValidator) validator = validator.required;\n      return [key, validator];\n    }));\n    return Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n  }\n  extend(schema) {\n    const shape = {\n      ...this.shape,\n      ...(schema instanceof ObjectValidator ? schema.shape : schema)\n    };\n    return Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n  }\n  pick(keys) {\n    const shape = Object.fromEntries(keys.filter(key => this.keys.includes(key)).map(key => [key, this.shape[key]]));\n    return Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n  }\n  omit(keys) {\n    const shape = Object.fromEntries(this.keys.filter(key => !keys.includes(key)).map(key => [key, this.shape[key]]));\n    return Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n  }\n  handle(value) {\n    const typeOfValue = typeof value;\n    if (typeOfValue !== \"object\") {\n      return Result.err(new ValidationError(\"s.object(T)\", `Expected the value to be an object, but received ${typeOfValue} instead`, value));\n    }\n    if (value === null) {\n      return Result.err(new ValidationError(\"s.object(T)\", \"Expected the value to not be null\", value));\n    }\n    if (Array.isArray(value)) {\n      return Result.err(new ValidationError(\"s.object(T)\", \"Expected the value to not be an array\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    for (const predicate of Object.values(this.shape)) {\n      predicate.setParent(this.parent ?? value);\n    }\n    return this.handleStrategy(value);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.shape, this.strategy, this.constraints]);\n  }\n  handleIgnoreStrategy(value) {\n    const errors = [];\n    const finalObject = {};\n    const inputEntries = new Map(Object.entries(value));\n    const runPredicate = /* @__PURE__ */__name((key, predicate) => {\n      const result = predicate.run(value[key]);\n      if (result.isOk()) {\n        finalObject[key] = result.value;\n      } else {\n        const error = result.error;\n        errors.push([key, error]);\n      }\n    }, \"runPredicate\");\n    for (const [key, predicate] of this.requiredKeys) {\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      } else {\n        errors.push([key, new MissingPropertyError(key)]);\n      }\n    }\n    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n      inputEntries.delete(key);\n      runPredicate(key, validator);\n    }\n    if (inputEntries.size === 0) {\n      return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors));\n    }\n    const checkInputEntriesInsteadOfSchemaKeys = this.possiblyUndefinedKeys.size > inputEntries.size;\n    if (checkInputEntriesInsteadOfSchemaKeys) {\n      for (const [key] of inputEntries) {\n        const predicate = this.possiblyUndefinedKeys.get(key);\n        if (predicate) {\n          runPredicate(key, predicate);\n        }\n      }\n    } else {\n      for (const [key, predicate] of this.possiblyUndefinedKeys) {\n        if (inputEntries.delete(key)) {\n          runPredicate(key, predicate);\n        }\n      }\n    }\n    return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors));\n  }\n  handleStrictStrategy(value) {\n    const errors = [];\n    const finalResult = {};\n    const inputEntries = new Map(Object.entries(value));\n    const runPredicate = /* @__PURE__ */__name((key, predicate) => {\n      const result = predicate.run(value[key]);\n      if (result.isOk()) {\n        finalResult[key] = result.value;\n      } else {\n        const error = result.error;\n        errors.push([key, error]);\n      }\n    }, \"runPredicate\");\n    for (const [key, predicate] of this.requiredKeys) {\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      } else {\n        errors.push([key, new MissingPropertyError(key)]);\n      }\n    }\n    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n      inputEntries.delete(key);\n      runPredicate(key, validator);\n    }\n    for (const [key, predicate] of this.possiblyUndefinedKeys) {\n      if (inputEntries.size === 0) {\n        break;\n      }\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      }\n    }\n    if (inputEntries.size !== 0) {\n      for (const [key, value2] of inputEntries.entries()) {\n        errors.push([key, new UnknownPropertyError(key, value2)]);\n      }\n    }\n    return errors.length === 0 ? Result.ok(finalResult) : Result.err(new CombinedPropertyError(errors));\n  }\n  handlePassthroughStrategy(value) {\n    const result = this.handleIgnoreStrategy(value);\n    return result.isErr() ? result : Result.ok({\n      ...value,\n      ...result.value\n    });\n  }\n};\n__name(ObjectValidator, \"ObjectValidator\");\nvar ObjectValidatorStrategy = /* @__PURE__ */(ObjectValidatorStrategy2 => {\n  ObjectValidatorStrategy2[ObjectValidatorStrategy2[\"Ignore\"] = 0] = \"Ignore\";\n  ObjectValidatorStrategy2[ObjectValidatorStrategy2[\"Strict\"] = 1] = \"Strict\";\n  ObjectValidatorStrategy2[ObjectValidatorStrategy2[\"Passthrough\"] = 2] = \"Passthrough\";\n  return ObjectValidatorStrategy2;\n})(ObjectValidatorStrategy || {});\n\n// src/validators/PassthroughValidator.ts\nvar PassthroughValidator = class extends BaseValidator {\n  handle(value) {\n    return Result.ok(value);\n  }\n};\n__name(PassthroughValidator, \"PassthroughValidator\");\n\n// src/validators/RecordValidator.ts\nvar RecordValidator = class extends BaseValidator {\n  constructor(validator) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.constraints]);\n  }\n  handle(value) {\n    if (typeof value !== \"object\") {\n      return Result.err(new ValidationError(\"s.record(T)\", \"Expected an object\", value));\n    }\n    if (value === null) {\n      return Result.err(new ValidationError(\"s.record(T)\", \"Expected the value to not be null\", value));\n    }\n    if (Array.isArray(value)) {\n      return Result.err(new ValidationError(\"s.record(T)\", \"Expected the value to not be an array\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    const errors = [];\n    const transformed = {};\n    for (const [key, val] of Object.entries(value)) {\n      const result = this.validator.run(val);\n      if (result.isOk()) transformed[key] = result.value;else errors.push([key, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors));\n  }\n};\n__name(RecordValidator, \"RecordValidator\");\n\n// src/validators/SetValidator.ts\nvar SetValidator = class extends BaseValidator {\n  constructor(validator) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.constraints]);\n  }\n  handle(values) {\n    if (!(values instanceof Set)) {\n      return Result.err(new ValidationError(\"s.set(T)\", \"Expected a set\", values));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = /* @__PURE__ */new Set();\n    for (const value of values) {\n      const result = this.validator.run(value);\n      if (result.isOk()) transformed.add(result.value);else errors.push(result.error);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedError(errors));\n  }\n};\n__name(SetValidator, \"SetValidator\");\n\n// src/constraints/util/emailValidator.ts\nvar accountRegex = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")$/;\nfunction validateEmail(email) {\n  if (!email) return false;\n  const atIndex = email.indexOf(\"@\");\n  if (atIndex === -1) return false;\n  if (atIndex > 64) return false;\n  const domainIndex = atIndex + 1;\n  if (email.includes(\"@\", domainIndex)) return false;\n  if (email.length - domainIndex > 255) return false;\n  let dotIndex = email.indexOf(\".\", domainIndex);\n  if (dotIndex === -1) return false;\n  let lastDotIndex = domainIndex;\n  do {\n    if (dotIndex - lastDotIndex > 63) return false;\n    lastDotIndex = dotIndex + 1;\n  } while ((dotIndex = email.indexOf(\".\", lastDotIndex)) !== -1);\n  if (email.length - lastDotIndex > 63) return false;\n  return accountRegex.test(email.slice(0, atIndex)) && validateEmailDomain(email.slice(domainIndex));\n}\n__name(validateEmail, \"validateEmail\");\nfunction validateEmailDomain(domain) {\n  try {\n    return new URL(`http://${domain}`).hostname === domain;\n  } catch {\n    return false;\n  }\n}\n__name(validateEmailDomain, \"validateEmailDomain\");\n\n// src/constraints/util/net.ts\nvar v4Seg = \"(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\";\nvar v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\nvar IPv4Reg = new RegExp(`^${v4Str}$`);\nvar v6Seg = \"(?:[0-9a-fA-F]{1,4})\";\nvar IPv6Reg = new RegExp(`^((?:${v6Seg}:){7}(?:${v6Seg}|:)|(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:)))(%[0-9a-zA-Z-.:]{1,})?$`);\nfunction isIPv4(s2) {\n  return IPv4Reg.test(s2);\n}\n__name(isIPv4, \"isIPv4\");\nfunction isIPv6(s2) {\n  return IPv6Reg.test(s2);\n}\n__name(isIPv6, \"isIPv6\");\nfunction isIP(s2) {\n  if (isIPv4(s2)) return 4;\n  if (isIPv6(s2)) return 6;\n  return 0;\n}\n__name(isIP, \"isIP\");\n\n// src/constraints/util/phoneValidator.ts\nvar phoneNumberRegex = /^((?:\\+|0{0,2})\\d{1,2}\\s?)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\nfunction validatePhoneNumber(input) {\n  return phoneNumberRegex.test(input);\n}\n__name(validatePhoneNumber, \"validatePhoneNumber\");\nvar MultiplePossibilitiesConstraintError = class extends BaseConstraintError {\n  constructor(constraint, message, given, expected) {\n    super(constraint, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      constraint: this.constraint,\n      given: this.given,\n      expected: this.expected\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const constraint = options.stylize(this.constraint, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[MultiplePossibilitiesConstraintError: ${constraint}]`, \"special\");\n    }\n    const newOptions = {\n      ...options,\n      depth: options.depth === null ? null : options.depth - 1\n    };\n    const verticalLine = options.stylize(\"|\", \"undefined\");\n    const padding = `\n  ${verticalLine} `;\n    const given = util.inspect(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"MultiplePossibilitiesConstraintError\", \"special\")} > ${constraint}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedPadding = `\n  ${verticalLine} - `;\n    const expectedBlock = `\n  ${options.stylize(\"Expected any of the following:\", \"string\")}${expectedPadding}${this.expected.map(possible => options.stylize(possible, \"boolean\")).join(expectedPadding)}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(MultiplePossibilitiesConstraintError, \"MultiplePossibilitiesConstraintError\");\n\n// src/constraints/util/common/combinedResultFn.ts\nfunction combinedErrorFn() {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n  switch (fns.length) {\n    case 0:\n      return () => null;\n    case 1:\n      return fns[0];\n    case 2:\n      {\n        const [fn0, fn1] = fns;\n        return function () {\n          return fn0(...arguments) || fn1(...arguments);\n        };\n      }\n    default:\n      {\n        return function () {\n          for (const fn of fns) {\n            const result = fn(...arguments);\n            if (result) return result;\n          }\n          return null;\n        };\n      }\n  }\n}\n__name(combinedErrorFn, \"combinedErrorFn\");\n\n// src/constraints/util/urlValidators.ts\nfunction createUrlValidators(options) {\n  const fns = [];\n  if (options?.allowedProtocols?.length) fns.push(allowedProtocolsFn(options.allowedProtocols));\n  if (options?.allowedDomains?.length) fns.push(allowedDomainsFn(options.allowedDomains));\n  return combinedErrorFn(...fns);\n}\n__name(createUrlValidators, \"createUrlValidators\");\nfunction allowedProtocolsFn(allowedProtocols) {\n  return (input, url) => allowedProtocols.includes(url.protocol) ? null : new MultiplePossibilitiesConstraintError(\"s.string.url\", \"Invalid URL protocol\", input, allowedProtocols);\n}\n__name(allowedProtocolsFn, \"allowedProtocolsFn\");\nfunction allowedDomainsFn(allowedDomains) {\n  return (input, url) => allowedDomains.includes(url.hostname) ? null : new MultiplePossibilitiesConstraintError(\"s.string.url\", \"Invalid URL domain\", input, allowedDomains);\n}\n__name(allowedDomainsFn, \"allowedDomainsFn\");\n\n// src/constraints/StringConstraints.ts\nfunction stringLengthComparator(comparator, name, expected, length) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid string length\", input, expected));\n    }\n  };\n}\n__name(stringLengthComparator, \"stringLengthComparator\");\nfunction stringLengthLessThan(length) {\n  const expected = `expected.length < ${length}`;\n  return stringLengthComparator(lessThan, \"s.string.lengthLessThan\", expected, length);\n}\n__name(stringLengthLessThan, \"stringLengthLessThan\");\nfunction stringLengthLessThanOrEqual(length) {\n  const expected = `expected.length <= ${length}`;\n  return stringLengthComparator(lessThanOrEqual, \"s.string.lengthLessThanOrEqual\", expected, length);\n}\n__name(stringLengthLessThanOrEqual, \"stringLengthLessThanOrEqual\");\nfunction stringLengthGreaterThan(length) {\n  const expected = `expected.length > ${length}`;\n  return stringLengthComparator(greaterThan, \"s.string.lengthGreaterThan\", expected, length);\n}\n__name(stringLengthGreaterThan, \"stringLengthGreaterThan\");\nfunction stringLengthGreaterThanOrEqual(length) {\n  const expected = `expected.length >= ${length}`;\n  return stringLengthComparator(greaterThanOrEqual, \"s.string.lengthGreaterThanOrEqual\", expected, length);\n}\n__name(stringLengthGreaterThanOrEqual, \"stringLengthGreaterThanOrEqual\");\nfunction stringLengthEqual(length) {\n  const expected = `expected.length === ${length}`;\n  return stringLengthComparator(equal, \"s.string.lengthEqual\", expected, length);\n}\n__name(stringLengthEqual, \"stringLengthEqual\");\nfunction stringLengthNotEqual(length) {\n  const expected = `expected.length !== ${length}`;\n  return stringLengthComparator(notEqual, \"s.string.lengthNotEqual\", expected, length);\n}\n__name(stringLengthNotEqual, \"stringLengthNotEqual\");\nfunction stringEmail() {\n  return {\n    run(input) {\n      return validateEmail(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.string.email\", \"Invalid email address\", input, \"expected to be an email address\"));\n    }\n  };\n}\n__name(stringEmail, \"stringEmail\");\nfunction stringRegexValidator(type, expected, regex) {\n  return {\n    run(input) {\n      return regex.test(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(type, \"Invalid string format\", input, expected));\n    }\n  };\n}\n__name(stringRegexValidator, \"stringRegexValidator\");\nfunction stringUrl(options) {\n  const validatorFn = createUrlValidators(options);\n  return {\n    run(input) {\n      let url;\n      try {\n        url = new URL(input);\n      } catch {\n        return Result.err(new ExpectedConstraintError(\"s.string.url\", \"Invalid URL\", input, \"expected to match an URL\"));\n      }\n      const validatorFnResult = validatorFn(input, url);\n      if (validatorFnResult === null) return Result.ok(input);\n      return Result.err(validatorFnResult);\n    }\n  };\n}\n__name(stringUrl, \"stringUrl\");\nfunction stringIp(version) {\n  const ipVersion = version ? `v${version}` : \"\";\n  const validatorFn = version === 4 ? isIPv4 : version === 6 ? isIPv6 : isIP;\n  const name = `s.string.ip${ipVersion}`;\n  const message = `Invalid IP${ipVersion} address`;\n  const expected = `expected to be an IP${ipVersion} address`;\n  return {\n    run(input) {\n      return validatorFn(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, message, input, expected));\n    }\n  };\n}\n__name(stringIp, \"stringIp\");\nfunction stringRegex(regex) {\n  return stringRegexValidator(\"s.string.regex\", `expected ${regex}.test(expected) to be true`, regex);\n}\n__name(stringRegex, \"stringRegex\");\nfunction stringUuid() {\n  let {\n    version = 4,\n    nullable = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  version ?? (version = \"1-5\");\n  const regex = new RegExp(`^(?:[0-9A-F]{8}-[0-9A-F]{4}-[${version}][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}${nullable ? \"|00000000-0000-0000-0000-000000000000\" : \"\"})$`, \"i\");\n  const expected = `expected to match UUID${typeof version === \"number\" ? `v${version}` : ` in range of ${version}`}`;\n  return stringRegexValidator(\"s.string.uuid\", expected, regex);\n}\n__name(stringUuid, \"stringUuid\");\nfunction stringDate() {\n  return {\n    run(input) {\n      const time = Date.parse(input);\n      return Number.isNaN(time) ? Result.err(new ExpectedConstraintError(\"s.string.date\", \"Invalid date string\", input, \"expected to be a valid date string (in the ISO 8601 or ECMA-262 format)\")) : Result.ok(input);\n    }\n  };\n}\n__name(stringDate, \"stringDate\");\nfunction stringPhone() {\n  return {\n    run(input) {\n      return validatePhoneNumber(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.string.phone\", \"Invalid phone number\", input, \"expected to be a phone number\"));\n    }\n  };\n}\n__name(stringPhone, \"stringPhone\");\n\n// src/validators/StringValidator.ts\nvar StringValidator = class extends BaseValidator {\n  lengthLessThan(length) {\n    return this.addConstraint(stringLengthLessThan(length));\n  }\n  lengthLessThanOrEqual(length) {\n    return this.addConstraint(stringLengthLessThanOrEqual(length));\n  }\n  lengthGreaterThan(length) {\n    return this.addConstraint(stringLengthGreaterThan(length));\n  }\n  lengthGreaterThanOrEqual(length) {\n    return this.addConstraint(stringLengthGreaterThanOrEqual(length));\n  }\n  lengthEqual(length) {\n    return this.addConstraint(stringLengthEqual(length));\n  }\n  lengthNotEqual(length) {\n    return this.addConstraint(stringLengthNotEqual(length));\n  }\n  get email() {\n    return this.addConstraint(stringEmail());\n  }\n  url(options) {\n    return this.addConstraint(stringUrl(options));\n  }\n  uuid(options) {\n    return this.addConstraint(stringUuid(options));\n  }\n  regex(regex) {\n    return this.addConstraint(stringRegex(regex));\n  }\n  get date() {\n    return this.addConstraint(stringDate());\n  }\n  get ipv4() {\n    return this.ip(4);\n  }\n  get ipv6() {\n    return this.ip(6);\n  }\n  ip(version) {\n    return this.addConstraint(stringIp(version));\n  }\n  phone() {\n    return this.addConstraint(stringPhone());\n  }\n  handle(value) {\n    return typeof value === \"string\" ? Result.ok(value) : Result.err(new ValidationError(\"s.string\", \"Expected a string primitive\", value));\n  }\n};\n__name(StringValidator, \"StringValidator\");\n\n// src/validators/TupleValidator.ts\nvar TupleValidator = class extends BaseValidator {\n  constructor(validators) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validators = [];\n    this.validators = validators;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validators, this.constraints]);\n  }\n  handle(values) {\n    if (!Array.isArray(values)) {\n      return Result.err(new ValidationError(\"s.tuple(T)\", \"Expected an array\", values));\n    }\n    if (values.length !== this.validators.length) {\n      return Result.err(new ValidationError(\"s.tuple(T)\", `Expected an array of length ${this.validators.length}`, values));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = [];\n    for (let i = 0; i < values.length; i++) {\n      const result = this.validators[i].run(values[i]);\n      if (result.isOk()) transformed.push(result.value);else errors.push([i, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors));\n  }\n};\n__name(TupleValidator, \"TupleValidator\");\n\n// src/validators/MapValidator.ts\nvar MapValidator = class extends BaseValidator {\n  constructor(keyValidator, valueValidator) {\n    let constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super(constraints);\n    this.keyValidator = keyValidator;\n    this.valueValidator = valueValidator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.keyValidator, this.valueValidator, this.constraints]);\n  }\n  handle(value) {\n    if (!(value instanceof Map)) {\n      return Result.err(new ValidationError(\"s.map(K, V)\", \"Expected a map\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    const errors = [];\n    const transformed = /* @__PURE__ */new Map();\n    for (const [key, val] of value.entries()) {\n      const keyResult = this.keyValidator.run(key);\n      const valueResult = this.valueValidator.run(val);\n      const {\n        length\n      } = errors;\n      if (keyResult.isErr()) errors.push([key, keyResult.error]);\n      if (valueResult.isErr()) errors.push([key, valueResult.error]);\n      if (errors.length === length) transformed.set(keyResult.value, valueResult.value);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors));\n  }\n};\n__name(MapValidator, \"MapValidator\");\n\n// src/validators/LazyValidator.ts\nvar LazyValidator = class extends BaseValidator {\n  constructor(validator) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.constraints]);\n  }\n  handle(values) {\n    return this.validator(values).run(values);\n  }\n};\n__name(LazyValidator, \"LazyValidator\");\n\n// src/lib/errors/UnknownEnumValueError.ts\nvar UnknownEnumValueError = class extends BaseError {\n  constructor(value, keys, enumMappings) {\n    super(\"Expected the value to be one of the following enum values:\");\n    this.value = value;\n    this.enumKeys = keys;\n    this.enumMappings = enumMappings;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      value: this.value,\n      enumKeys: this.enumKeys,\n      enumMappings: [...this.enumMappings.entries()]\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const value = options.stylize(this.value.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[UnknownEnumValueError: ${value}]`, \"special\");\n    }\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const pairs = this.enumKeys.map(key => {\n      const enumValue = this.enumMappings.get(key);\n      return `${options.stylize(key, \"string\")} or ${options.stylize(enumValue.toString(), typeof enumValue === \"number\" ? \"number\" : \"string\")}`;\n    }).join(padding);\n    const header = `${options.stylize(\"UnknownEnumValueError\", \"special\")} > ${value}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const pairsBlock = `${padding}${pairs}`;\n    return `${header}\n  ${message}\n${pairsBlock}`;\n  }\n};\n__name(UnknownEnumValueError, \"UnknownEnumValueError\");\n\n// src/validators/NativeEnumValidator.ts\nvar NativeEnumValidator = class extends BaseValidator {\n  constructor(enumShape) {\n    super();\n    this.hasNumericElements = false;\n    this.enumMapping = /* @__PURE__ */new Map();\n    this.enumShape = enumShape;\n    this.enumKeys = Object.keys(enumShape).filter(key => {\n      return typeof enumShape[enumShape[key]] !== \"number\";\n    });\n    for (const key of this.enumKeys) {\n      const enumValue = enumShape[key];\n      this.enumMapping.set(key, enumValue);\n      this.enumMapping.set(enumValue, enumValue);\n      if (typeof enumValue === \"number\") {\n        this.hasNumericElements = true;\n        this.enumMapping.set(`${enumValue}`, enumValue);\n      }\n    }\n  }\n  handle(value) {\n    const typeOfValue = typeof value;\n    if (typeOfValue === \"number\") {\n      if (!this.hasNumericElements) {\n        return Result.err(new ValidationError(\"s.nativeEnum(T)\", \"Expected the value to be a string\", value));\n      }\n    } else if (typeOfValue !== \"string\") {\n      return Result.err(new ValidationError(\"s.nativeEnum(T)\", \"Expected the value to be a string or number\", value));\n    }\n    const casted = value;\n    const possibleEnumValue = this.enumMapping.get(casted);\n    return typeof possibleEnumValue === \"undefined\" ? Result.err(new UnknownEnumValueError(casted, this.enumKeys, this.enumMapping)) : Result.ok(possibleEnumValue);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.enumShape]);\n  }\n};\n__name(NativeEnumValidator, \"NativeEnumValidator\");\n\n// src/constraints/TypedArrayLengthConstraints.ts\nfunction typedArrayByteLengthComparator(comparator, name, expected, length) {\n  return {\n    run(input) {\n      return comparator(input.byteLength, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid Typed Array byte length\", input, expected));\n    }\n  };\n}\n__name(typedArrayByteLengthComparator, \"typedArrayByteLengthComparator\");\nfunction typedArrayByteLengthLessThan(value) {\n  const expected = `expected.byteLength < ${value}`;\n  return typedArrayByteLengthComparator(lessThan, \"s.typedArray(T).byteLengthLessThan\", expected, value);\n}\n__name(typedArrayByteLengthLessThan, \"typedArrayByteLengthLessThan\");\nfunction typedArrayByteLengthLessThanOrEqual(value) {\n  const expected = `expected.byteLength <= ${value}`;\n  return typedArrayByteLengthComparator(lessThanOrEqual, \"s.typedArray(T).byteLengthLessThanOrEqual\", expected, value);\n}\n__name(typedArrayByteLengthLessThanOrEqual, \"typedArrayByteLengthLessThanOrEqual\");\nfunction typedArrayByteLengthGreaterThan(value) {\n  const expected = `expected.byteLength > ${value}`;\n  return typedArrayByteLengthComparator(greaterThan, \"s.typedArray(T).byteLengthGreaterThan\", expected, value);\n}\n__name(typedArrayByteLengthGreaterThan, \"typedArrayByteLengthGreaterThan\");\nfunction typedArrayByteLengthGreaterThanOrEqual(value) {\n  const expected = `expected.byteLength >= ${value}`;\n  return typedArrayByteLengthComparator(greaterThanOrEqual, \"s.typedArray(T).byteLengthGreaterThanOrEqual\", expected, value);\n}\n__name(typedArrayByteLengthGreaterThanOrEqual, \"typedArrayByteLengthGreaterThanOrEqual\");\nfunction typedArrayByteLengthEqual(value) {\n  const expected = `expected.byteLength === ${value}`;\n  return typedArrayByteLengthComparator(equal, \"s.typedArray(T).byteLengthEqual\", expected, value);\n}\n__name(typedArrayByteLengthEqual, \"typedArrayByteLengthEqual\");\nfunction typedArrayByteLengthNotEqual(value) {\n  const expected = `expected.byteLength !== ${value}`;\n  return typedArrayByteLengthComparator(notEqual, \"s.typedArray(T).byteLengthNotEqual\", expected, value);\n}\n__name(typedArrayByteLengthNotEqual, \"typedArrayByteLengthNotEqual\");\nfunction typedArrayByteLengthRange(start, endBefore) {\n  const expected = `expected.byteLength >= ${start} && expected.byteLength < ${endBefore}`;\n  return {\n    run(input) {\n      return input.byteLength >= start && input.byteLength < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).byteLengthRange\", \"Invalid Typed Array byte length\", input, expected));\n    }\n  };\n}\n__name(typedArrayByteLengthRange, \"typedArrayByteLengthRange\");\nfunction typedArrayByteLengthRangeInclusive(start, end) {\n  const expected = `expected.byteLength >= ${start} && expected.byteLength <= ${end}`;\n  return {\n    run(input) {\n      return input.byteLength >= start && input.byteLength <= end ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).byteLengthRangeInclusive\", \"Invalid Typed Array byte length\", input, expected));\n    }\n  };\n}\n__name(typedArrayByteLengthRangeInclusive, \"typedArrayByteLengthRangeInclusive\");\nfunction typedArrayByteLengthRangeExclusive(startAfter, endBefore) {\n  const expected = `expected.byteLength > ${startAfter} && expected.byteLength < ${endBefore}`;\n  return {\n    run(input) {\n      return input.byteLength > startAfter && input.byteLength < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).byteLengthRangeExclusive\", \"Invalid Typed Array byte length\", input, expected));\n    }\n  };\n}\n__name(typedArrayByteLengthRangeExclusive, \"typedArrayByteLengthRangeExclusive\");\nfunction typedArrayLengthComparator(comparator, name, expected, length) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, \"Invalid Typed Array length\", input, expected));\n    }\n  };\n}\n__name(typedArrayLengthComparator, \"typedArrayLengthComparator\");\nfunction typedArrayLengthLessThan(value) {\n  const expected = `expected.length < ${value}`;\n  return typedArrayLengthComparator(lessThan, \"s.typedArray(T).lengthLessThan\", expected, value);\n}\n__name(typedArrayLengthLessThan, \"typedArrayLengthLessThan\");\nfunction typedArrayLengthLessThanOrEqual(value) {\n  const expected = `expected.length <= ${value}`;\n  return typedArrayLengthComparator(lessThanOrEqual, \"s.typedArray(T).lengthLessThanOrEqual\", expected, value);\n}\n__name(typedArrayLengthLessThanOrEqual, \"typedArrayLengthLessThanOrEqual\");\nfunction typedArrayLengthGreaterThan(value) {\n  const expected = `expected.length > ${value}`;\n  return typedArrayLengthComparator(greaterThan, \"s.typedArray(T).lengthGreaterThan\", expected, value);\n}\n__name(typedArrayLengthGreaterThan, \"typedArrayLengthGreaterThan\");\nfunction typedArrayLengthGreaterThanOrEqual(value) {\n  const expected = `expected.length >= ${value}`;\n  return typedArrayLengthComparator(greaterThanOrEqual, \"s.typedArray(T).lengthGreaterThanOrEqual\", expected, value);\n}\n__name(typedArrayLengthGreaterThanOrEqual, \"typedArrayLengthGreaterThanOrEqual\");\nfunction typedArrayLengthEqual(value) {\n  const expected = `expected.length === ${value}`;\n  return typedArrayLengthComparator(equal, \"s.typedArray(T).lengthEqual\", expected, value);\n}\n__name(typedArrayLengthEqual, \"typedArrayLengthEqual\");\nfunction typedArrayLengthNotEqual(value) {\n  const expected = `expected.length !== ${value}`;\n  return typedArrayLengthComparator(notEqual, \"s.typedArray(T).lengthNotEqual\", expected, value);\n}\n__name(typedArrayLengthNotEqual, \"typedArrayLengthNotEqual\");\nfunction typedArrayLengthRange(start, endBefore) {\n  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).lengthRange\", \"Invalid Typed Array length\", input, expected));\n    }\n  };\n}\n__name(typedArrayLengthRange, \"typedArrayLengthRange\");\nfunction typedArrayLengthRangeInclusive(start, end) {\n  const expected = `expected.length >= ${start} && expected.length <= ${end}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).lengthRangeInclusive\", \"Invalid Typed Array length\", input, expected));\n    }\n  };\n}\n__name(typedArrayLengthRangeInclusive, \"typedArrayLengthRangeInclusive\");\nfunction typedArrayLengthRangeExclusive(startAfter, endBefore) {\n  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.typedArray(T).lengthRangeExclusive\", \"Invalid Typed Array length\", input, expected));\n    }\n  };\n}\n__name(typedArrayLengthRangeExclusive, \"typedArrayLengthRangeExclusive\");\n\n// src/constraints/util/common/vowels.ts\nvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\nvar aOrAn = /* @__PURE__ */__name(word => {\n  return `${vowels.includes(word[0].toLowerCase()) ? \"an\" : \"a\"} ${word}`;\n}, \"aOrAn\");\n\n// src/constraints/util/typedArray.ts\nvar TypedArrays = {\n  Int8Array: x => x instanceof Int8Array,\n  Uint8Array: x => x instanceof Uint8Array,\n  Uint8ClampedArray: x => x instanceof Uint8ClampedArray,\n  Int16Array: x => x instanceof Int16Array,\n  Uint16Array: x => x instanceof Uint16Array,\n  Int32Array: x => x instanceof Int32Array,\n  Uint32Array: x => x instanceof Uint32Array,\n  Float32Array: x => x instanceof Float32Array,\n  Float64Array: x => x instanceof Float64Array,\n  BigInt64Array: x => x instanceof BigInt64Array,\n  BigUint64Array: x => x instanceof BigUint64Array,\n  TypedArray: x => ArrayBuffer.isView(x) && !(x instanceof DataView)\n};\n\n// src/validators/TypedArrayValidator.ts\nvar TypedArrayValidator = class extends BaseValidator {\n  constructor(type) {\n    let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(constraints);\n    this.type = type;\n  }\n  byteLengthLessThan(length) {\n    return this.addConstraint(typedArrayByteLengthLessThan(length));\n  }\n  byteLengthLessThanOrEqual(length) {\n    return this.addConstraint(typedArrayByteLengthLessThanOrEqual(length));\n  }\n  byteLengthGreaterThan(length) {\n    return this.addConstraint(typedArrayByteLengthGreaterThan(length));\n  }\n  byteLengthGreaterThanOrEqual(length) {\n    return this.addConstraint(typedArrayByteLengthGreaterThanOrEqual(length));\n  }\n  byteLengthEqual(length) {\n    return this.addConstraint(typedArrayByteLengthEqual(length));\n  }\n  byteLengthNotEqual(length) {\n    return this.addConstraint(typedArrayByteLengthNotEqual(length));\n  }\n  byteLengthRange(start, endBefore) {\n    return this.addConstraint(typedArrayByteLengthRange(start, endBefore));\n  }\n  byteLengthRangeInclusive(startAt, endAt) {\n    return this.addConstraint(typedArrayByteLengthRangeInclusive(startAt, endAt));\n  }\n  byteLengthRangeExclusive(startAfter, endBefore) {\n    return this.addConstraint(typedArrayByteLengthRangeExclusive(startAfter, endBefore));\n  }\n  lengthLessThan(length) {\n    return this.addConstraint(typedArrayLengthLessThan(length));\n  }\n  lengthLessThanOrEqual(length) {\n    return this.addConstraint(typedArrayLengthLessThanOrEqual(length));\n  }\n  lengthGreaterThan(length) {\n    return this.addConstraint(typedArrayLengthGreaterThan(length));\n  }\n  lengthGreaterThanOrEqual(length) {\n    return this.addConstraint(typedArrayLengthGreaterThanOrEqual(length));\n  }\n  lengthEqual(length) {\n    return this.addConstraint(typedArrayLengthEqual(length));\n  }\n  lengthNotEqual(length) {\n    return this.addConstraint(typedArrayLengthNotEqual(length));\n  }\n  lengthRange(start, endBefore) {\n    return this.addConstraint(typedArrayLengthRange(start, endBefore));\n  }\n  lengthRangeInclusive(startAt, endAt) {\n    return this.addConstraint(typedArrayLengthRangeInclusive(startAt, endAt));\n  }\n  lengthRangeExclusive(startAfter, endBefore) {\n    return this.addConstraint(typedArrayLengthRangeExclusive(startAfter, endBefore));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.type, this.constraints]);\n  }\n  handle(value) {\n    return TypedArrays[this.type](value) ? Result.ok(value) : Result.err(new ValidationError(\"s.typedArray\", `Expected ${aOrAn(this.type)}`, value));\n  }\n};\n__name(TypedArrayValidator, \"TypedArrayValidator\");\n\n// src/lib/Shapes.ts\nvar Shapes = class {\n  get string() {\n    return new StringValidator();\n  }\n  get number() {\n    return new NumberValidator();\n  }\n  get bigint() {\n    return new BigIntValidator();\n  }\n  get boolean() {\n    return new BooleanValidator();\n  }\n  get date() {\n    return new DateValidator();\n  }\n  object(shape) {\n    return new ObjectValidator(shape);\n  }\n  get undefined() {\n    return this.literal(void 0);\n  }\n  get null() {\n    return this.literal(null);\n  }\n  get nullish() {\n    return new NullishValidator();\n  }\n  get any() {\n    return new PassthroughValidator();\n  }\n  get unknown() {\n    return new PassthroughValidator();\n  }\n  get never() {\n    return new NeverValidator();\n  }\n  enum() {\n    for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      values[_key4] = arguments[_key4];\n    }\n    return this.union(...values.map(value => this.literal(value)));\n  }\n  nativeEnum(enumShape) {\n    return new NativeEnumValidator(enumShape);\n  }\n  literal(value) {\n    if (value instanceof Date) return this.date.equal(value);\n    return new LiteralValidator(value);\n  }\n  instance(expected) {\n    return new InstanceValidator(expected);\n  }\n  union() {\n    for (var _len5 = arguments.length, validators = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      validators[_key5] = arguments[_key5];\n    }\n    return new UnionValidator(validators);\n  }\n  array(validator) {\n    return new ArrayValidator(validator);\n  }\n  typedArray() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"TypedArray\";\n    return new TypedArrayValidator(type);\n  }\n  get int8Array() {\n    return this.typedArray(\"Int8Array\");\n  }\n  get uint8Array() {\n    return this.typedArray(\"Uint8Array\");\n  }\n  get uint8ClampedArray() {\n    return this.typedArray(\"Uint8ClampedArray\");\n  }\n  get int16Array() {\n    return this.typedArray(\"Int16Array\");\n  }\n  get uint16Array() {\n    return this.typedArray(\"Uint16Array\");\n  }\n  get int32Array() {\n    return this.typedArray(\"Int32Array\");\n  }\n  get uint32Array() {\n    return this.typedArray(\"Uint32Array\");\n  }\n  get float32Array() {\n    return this.typedArray(\"Float32Array\");\n  }\n  get float64Array() {\n    return this.typedArray(\"Float64Array\");\n  }\n  get bigInt64Array() {\n    return this.typedArray(\"BigInt64Array\");\n  }\n  get bigUint64Array() {\n    return this.typedArray(\"BigUint64Array\");\n  }\n  tuple(validators) {\n    return new TupleValidator(validators);\n  }\n  set(validator) {\n    return new SetValidator(validator);\n  }\n  record(validator) {\n    return new RecordValidator(validator);\n  }\n  map(keyValidator, valueValidator) {\n    return new MapValidator(keyValidator, valueValidator);\n  }\n  lazy(validator) {\n    return new LazyValidator(validator);\n  }\n};\n__name(Shapes, \"Shapes\");\n\n// src/index.ts\nvar s = new Shapes();\nexports.BaseError = BaseError;\nexports.CombinedError = CombinedError;\nexports.CombinedPropertyError = CombinedPropertyError;\nexports.ExpectedConstraintError = ExpectedConstraintError;\nexports.ExpectedValidationError = ExpectedValidationError;\nexports.MissingPropertyError = MissingPropertyError;\nexports.MultiplePossibilitiesConstraintError = MultiplePossibilitiesConstraintError;\nexports.Result = Result;\nexports.UnknownEnumValueError = UnknownEnumValueError;\nexports.UnknownPropertyError = UnknownPropertyError;\nexports.ValidationError = ValidationError;\nexports.customInspectSymbol = customInspectSymbol;\nexports.customInspectSymbolStackLess = customInspectSymbolStackLess;\nexports.getGlobalValidationEnabled = getGlobalValidationEnabled;\nexports.s = s;\nexports.setGlobalValidationEnabled = setGlobalValidationEnabled;\n//# sourceMappingURL=out.js.map","map":{"version":3,"mappings":"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","names":["fastDeepEqual","value","configurable","__name","getGlobalValidationEnabled","validationEnabled","Result","constructor","success","error","isOk","isErr","unwrap","err","customInspectSymbol","customInspectSymbolStackLess","BaseError","Error","BaseConstraintError","constraint","ExpectedConstraintError","toJSON","name","given","expected","options","newOptions","depth","header","message","expectedBlock","givenBlock","whenConstraint","run","isKeyArray","k","predicate","resolveBooleanIs","BaseValidator","constraints","isValidationEnabled","setParent","or","predicates","transform","reshape","default","when","result","parse","is","setValidationEnabled","clone","getValidationEnabled","addConstraint","uniqueArray2","uniqueArray","lessThanOrEqual","greaterThan","greaterThanOrEqual","equal","notEqual","comparator","arrayLengthLessThan","arrayLengthLessThanOrEqual","arrayLengthGreaterThan","arrayLengthGreaterThanOrEqual","arrayLengthEqual","arrayLengthNotEqual","arrayLengthRange","input","length","arrayLengthRangeInclusive","arrayLengthRangeExclusive","compact","property","CombinedPropertyError","body","key","ValidationError","validator","util","ArrayValidator","lengthLessThanOrEqual","lengthGreaterThan","lengthGreaterThanOrEqual","lengthEqual","lengthNotEqual","lengthRange","start","endBefore","lengthRangeInclusive","startAt","lengthRangeExclusive","Reflect","handle","errors","transformed","ok","number","bigintLessThan","bigintComparator","divider","BigIntValidator","lessThan","bigintGreaterThan","bigintGreaterThanOrEqual","bigintEqual","bigintNotEqual","divisibleBy","abs","intN","uintN","BigInt","BooleanValidator","dateLessThan","dateComparator","Number","DateValidator","date","dateGreaterThan","Date","dateGreaterThanOrEqual","ExpectedValidationError","padding","stylize","literal","numberComparator","numberLessThanOrEqual","numberGreaterThan","numberGreaterThanOrEqual","numberEqual","numberNotEqual","numberNotNaN","numberDivisibleBy","numberInt","numberSafeInt","numberFinite","positive","negative","sign","Math","floor","fround","round","ceil","index","NullishValidator","nullable","validators","LiteralValidator","UnionValidator","strategy","ObjectValidatorStrategy","possiblyLiteralOrNullishPredicate","DefaultValidator","possiblyUndefinedKeysWithDefaults","set","requiredKeys","partial","shape","extend","pick","keys","omit","construct","typeOfValue","Array","handleIgnoreStrategy","finalObject","inputEntries","runPredicate","checkInputEntriesInsteadOfSchemaKeys","handleStrictStrategy","finalResult","size","handlePassthroughStrategy","ObjectValidatorStrategy2","atIndex","email","domainIndex","dotIndex","lastDotIndex","v4Str","RegExp","v6Seg","isIPv4","IPv6Reg","isIP","phoneNumberRegex","expectedPadding","verticalLine","fns","createUrlValidators","allowedDomains","combinedErrorFn","allowedProtocolsFn","stringLengthComparator","stringLengthGreaterThanOrEqual","stringLengthEqual","stringLengthNotEqual","stringEmail","regex","test","stringUrl","validatorFn","url","stringIp","ipVersion","stringUuid","version","stringRegexValidator","stringPhone","validatePhoneNumber","lengthLessThan","uuid","stringRegex","stringDate","ipv4","ip","ipv6","phone","shouldRunConstraints","i","keyResult","valueResult","UnknownEnumValueError","enumKeys","enumMappings","enumValue","toString","pairsBlock","enumShape","casted","possibleEnumValue","typedArrayByteLengthComparator","typedArrayByteLengthLessThan","typedArrayByteLengthGreaterThanOrEqual","typedArrayByteLengthEqual","typedArrayByteLengthNotEqual","typedArrayByteLengthRange","typedArrayByteLengthRangeExclusive","typedArrayLengthComparator","typedArrayLengthGreaterThanOrEqual","typedArrayLengthEqual","typedArrayLengthNotEqual","typedArrayLengthRange","typedArrayLengthRangeExclusive","startAfter","vowels","aOrAn","Int8Array","Uint8Array","x","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Float64Array","BigInt64Array","BigUint64Array","TypedArray","TypedArrayValidator","type","byteLengthLessThan","byteLengthLessThanOrEqual","byteLengthGreaterThan","byteLengthEqual","byteLengthNotEqual","byteLengthRange","byteLengthRangeInclusive","typedArrayByteLengthRangeInclusive","byteLengthRangeExclusive","typedArrayLengthLessThan","typedArrayLengthLessThanOrEqual","typedArrayLengthGreaterThan","typedArrayLengthRangeInclusive","TypedArrays","object","ObjectValidator","undefined","null","nullish","any","PassthroughValidator","never","enum","values","union","nativeEnum","NativeEnumValidator","instance","InstanceValidator","array","typedArray","int32Array","uint32Array","float32Array","float64Array","bigInt64Array","bigUint64Array","tuple","record","map","keyValidator","valueValidator","lazy","Shapes","exports"],"sources":["J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\configs.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\Result.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\util\\getValue.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\ObjectConstrains.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\ExpectedConstraintError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\BaseError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\BaseConstraintError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\BaseValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\isUnique.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\operators.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\ArrayConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\CombinedPropertyError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\ValidationError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\ArrayValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\BigIntConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\BigIntValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\BooleanConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\BooleanValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\DateConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\DateValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\ExpectedValidationError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\InstanceValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\LiteralValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\NeverValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\NullishValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\NumberConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\NumberValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\MissingPropertyError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\UnknownPropertyError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\DefaultValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\CombinedError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\UnionValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\ObjectValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\PassthroughValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\RecordValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\SetValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\emailValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\net.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\phoneValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\MultiplePossibilitiesConstraintError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\common\\combinedResultFn.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\urlValidators.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\StringConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\StringValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\TupleValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\MapValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\LazyValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\errors\\UnknownEnumValueError.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\NativeEnumValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\TypedArrayLengthConstraints.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\common\\vowels.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\constraints\\util\\typedArray.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\validators\\TypedArrayValidator.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\lib\\Shapes.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@sapphire\\shapeshift\\src\\index.ts"],"sourcesContent":["let validationEnabled = true;\n\n/**\n * Sets whether validators should run on the input, or if the input should be passed through.\n * @param enabled Whether validation should be done on inputs\n */\nexport function setGlobalValidationEnabled(enabled: boolean) {\n\tvalidationEnabled = enabled;\n}\n\n/**\n * @returns Whether validation is enabled\n */\nexport function getGlobalValidationEnabled() {\n\treturn validationEnabled;\n}\n","export class Result<T, E extends Error = Error> {\n\tpublic readonly success: boolean;\n\tpublic readonly value?: T;\n\tpublic readonly error?: E;\n\n\tprivate constructor(success: boolean, value?: T, error?: E) {\n\t\tthis.success = success;\n\t\tif (success) {\n\t\t\tthis.value = value;\n\t\t} else {\n\t\t\tthis.error = error;\n\t\t}\n\t}\n\n\tpublic isOk(): this is { success: true; value: T } {\n\t\treturn this.success;\n\t}\n\n\tpublic isErr(): this is { success: false; error: E } {\n\t\treturn !this.success;\n\t}\n\n\tpublic unwrap(): T {\n\t\tif (this.isOk()) return this.value;\n\t\tthrow this.error as Error;\n\t}\n\n\tpublic static ok<T, E extends Error = Error>(value: T): Result<T, E> {\n\t\treturn new Result<T, E>(true, value);\n\t}\n\n\tpublic static err<T, E extends Error = Error>(error: E): Result<T, E> {\n\t\treturn new Result<T, E>(false, undefined, error);\n\t}\n}\n","// https://github.com/microsoft/TypeScript/issues/37663\ntype Fn = (...args: unknown[]) => unknown;\n\nexport function getValue<T, U = T extends Fn ? ReturnType<T> : T>(valueOrFn: T): U {\n\treturn typeof valueOrFn === 'function' ? valueOrFn() : valueOrFn;\n}\n","import get from 'lodash/get.js';\nimport { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { BaseValidator } from '../type-exports';\nimport type { IConstraint } from './type-exports';\n\nexport type ObjectConstraintName = `s.object(T.when)`;\n\nexport type WhenKey = PropertyKey | PropertyKey[];\n\nexport interface WhenOptions<T extends BaseValidator<any>, Key extends WhenKey> {\n\tis?: boolean | ((value: Key extends Array<any> ? any[] : any) => boolean);\n\tthen: (predicate: T) => T;\n\totherwise?: (predicate: T) => T;\n}\n\nexport function whenConstraint<T extends BaseValidator<any>, I, Key extends WhenKey>(\n\tkey: Key,\n\toptions: WhenOptions<T, Key>,\n\tvalidator: T\n): IConstraint<I> {\n\treturn {\n\t\trun(input: I, parent?: any) {\n\t\t\tif (!parent) {\n\t\t\t\treturn Result.err(new ExpectedConstraintError('s.object(T.when)', 'Validator has no parent', parent, 'Validator to have a parent'));\n\t\t\t}\n\n\t\t\tconst isKeyArray = Array.isArray(key);\n\n\t\t\tconst value = isKeyArray ? key.map((k) => get(parent, k)) : get(parent, key);\n\n\t\t\tconst predicate = resolveBooleanIs<T, Key>(options, value, isKeyArray) ? options.then : options.otherwise;\n\n\t\t\tif (predicate) {\n\t\t\t\treturn predicate(validator).run(input) as Result<I, ExpectedConstraintError<I>>;\n\t\t\t}\n\n\t\t\treturn Result.ok(input);\n\t\t}\n\t};\n}\n\nfunction resolveBooleanIs<T extends BaseValidator<any>, Key extends WhenKey>(options: WhenOptions<T, Key>, value: any, isKeyArray: boolean) {\n\tif (options.is === undefined) {\n\t\treturn isKeyArray ? !value.some((val: any) => !val) : Boolean(value);\n\t}\n\n\tif (typeof options.is === 'function') {\n\t\treturn options.is(value);\n\t}\n\n\treturn value === options.is;\n}\n","import { inspect, type InspectOptionsStylized } from 'node:util';\nimport { customInspectSymbolStackLess } from './BaseError';\nimport { BaseConstraintError, type ConstraintErrorNames } from './BaseConstraintError';\n\nexport class ExpectedConstraintError<T = unknown> extends BaseConstraintError<T> {\n\tpublic readonly expected: string;\n\n\tpublic constructor(constraint: ConstraintErrorNames, message: string, given: T, expected: string) {\n\t\tsuper(constraint, message, given);\n\t\tthis.expected = expected;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tconstraint: this.constraint,\n\t\t\tgiven: this.given,\n\t\t\texpected: this.expected\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst constraint = options.stylize(this.constraint, 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[ExpectedConstraintError: ${constraint}]`, 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1 };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\t\tconst given = inspect(this.given, newOptions).replace(/\\n/g, padding);\n\n\t\tconst header = `${options.stylize('ExpectedConstraintError', 'special')} > ${constraint}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst expectedBlock = `\\n  ${options.stylize('Expected: ', 'string')}${options.stylize(this.expected, 'boolean')}`;\n\t\tconst givenBlock = `\\n  ${options.stylize('Received:', 'regexp')}${padding}${given}`;\n\t\treturn `${header}\\n  ${message}\\n${expectedBlock}\\n${givenBlock}`;\n\t}\n}\n","import type { InspectOptionsStylized } from 'node:util';\n\nexport const customInspectSymbol = Symbol.for('nodejs.util.inspect.custom');\nexport const customInspectSymbolStackLess = Symbol.for('nodejs.util.inspect.custom.stack-less');\n\nexport abstract class BaseError extends Error {\n\tprotected [customInspectSymbol](depth: number, options: InspectOptionsStylized) {\n\t\treturn `${this[customInspectSymbolStackLess](depth, options)}\\n${this.stack!.slice(this.stack!.indexOf('\\n'))}`;\n\t}\n\n\tprotected abstract [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string;\n}\n","import type {\n\tArrayConstraintName,\n\tBigIntConstraintName,\n\tBooleanConstraintName,\n\tDateConstraintName,\n\tNumberConstraintName,\n\tObjectConstraintName,\n\tStringConstraintName,\n\tTypedArrayConstraintName\n} from '../../constraints/type-exports';\nimport { BaseError } from './BaseError';\n\nexport type ConstraintErrorNames =\n\t| TypedArrayConstraintName\n\t| ArrayConstraintName\n\t| BigIntConstraintName\n\t| BooleanConstraintName\n\t| DateConstraintName\n\t| NumberConstraintName\n\t| ObjectConstraintName\n\t| StringConstraintName;\n\nexport abstract class BaseConstraintError<T = unknown> extends BaseError {\n\tpublic readonly constraint: ConstraintErrorNames;\n\tpublic readonly given: T;\n\n\tpublic constructor(constraint: ConstraintErrorNames, message: string, given: T) {\n\t\tsuper(message);\n\t\tthis.constraint = constraint;\n\t\tthis.given = given;\n\t}\n}\n","import { getGlobalValidationEnabled } from '../lib/configs';\nimport { Result } from '../lib/Result';\nimport { ArrayValidator, DefaultValidator, LiteralValidator, NullishValidator, SetValidator, UnionValidator } from './imports';\nimport { getValue } from './util/getValue';\nimport { whenConstraint, type WhenKey, type WhenOptions } from '../constraints/ObjectConstrains';\nimport type { CombinedError } from '../lib/errors/CombinedError';\nimport type { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport type { UnknownEnumValueError } from '../lib/errors/UnknownEnumValueError';\nimport type { ValidationError } from '../lib/errors/ValidationError';\nimport type { BaseConstraintError, InferResultType } from '../type-exports';\nimport type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\n\nexport abstract class BaseValidator<T> {\n\tprotected parent?: object;\n\tprotected constraints: readonly IConstraint<T>[] = [];\n\tprotected isValidationEnabled: boolean | (() => boolean) | null = null;\n\n\tpublic constructor(constraints: readonly IConstraint<T>[] = []) {\n\t\tthis.constraints = constraints;\n\t}\n\n\tpublic setParent(parent: object): this {\n\t\tthis.parent = parent;\n\t\treturn this;\n\t}\n\n\tpublic get optional(): UnionValidator<T | undefined> {\n\t\treturn new UnionValidator([new LiteralValidator(undefined), this.clone()]);\n\t}\n\n\tpublic get nullable(): UnionValidator<T | null> {\n\t\treturn new UnionValidator([new LiteralValidator(null), this.clone()]);\n\t}\n\n\tpublic get nullish(): UnionValidator<T | null | undefined> {\n\t\treturn new UnionValidator([new NullishValidator(), this.clone()]);\n\t}\n\n\tpublic get array(): ArrayValidator<T[]> {\n\t\treturn new ArrayValidator<T[]>(this.clone());\n\t}\n\n\tpublic get set(): SetValidator<T> {\n\t\treturn new SetValidator<T>(this.clone());\n\t}\n\n\tpublic or<O>(...predicates: readonly BaseValidator<O>[]): UnionValidator<T | O> {\n\t\treturn new UnionValidator<T | O>([this.clone(), ...predicates]);\n\t}\n\n\tpublic transform(cb: (value: T) => T): this;\n\tpublic transform<O>(cb: (value: T) => O): BaseValidator<O>;\n\tpublic transform<O>(cb: (value: T) => O): BaseValidator<O> {\n\t\treturn this.addConstraint({ run: (input) => Result.ok(cb(input) as unknown as T) }) as unknown as BaseValidator<O>;\n\t}\n\n\tpublic reshape(cb: (input: T) => Result<T>): this;\n\tpublic reshape<R extends Result<unknown>, O = InferResultType<R>>(cb: (input: T) => R): BaseValidator<O>;\n\tpublic reshape<R extends Result<unknown>, O = InferResultType<R>>(cb: (input: T) => R): BaseValidator<O> {\n\t\treturn this.addConstraint({ run: cb as unknown as (input: T) => Result<T, BaseConstraintError<T>> }) as unknown as BaseValidator<O>;\n\t}\n\n\tpublic default(value: Exclude<T, undefined> | (() => Exclude<T, undefined>)): DefaultValidator<Exclude<T, undefined>> {\n\t\treturn new DefaultValidator(this.clone() as unknown as BaseValidator<Exclude<T, undefined>>, value);\n\t}\n\n\tpublic when<Key extends WhenKey, This extends BaseValidator<any> = this>(key: Key, options: WhenOptions<This, Key>): this {\n\t\treturn this.addConstraint(whenConstraint<This, T, Key>(key, options, this as unknown as This));\n\t}\n\n\tpublic run(value: unknown): Result<T, BaseError> {\n\t\tlet result = this.handle(value) as Result<T, BaseError>;\n\t\tif (result.isErr()) return result;\n\n\t\tfor (const constraint of this.constraints) {\n\t\t\tresult = constraint.run(result.value as T, this.parent);\n\t\t\tif (result.isErr()) break;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic parse<R extends T = T>(value: unknown): R {\n\t\t// If validation is disabled (at the validator or global level), we only run the `handle` method, which will do some basic checks\n\t\t// (like that the input is a string for a string validator)\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn this.handle(value).unwrap() as R;\n\t\t}\n\n\t\treturn this.constraints.reduce((v, constraint) => constraint.run(v).unwrap(), this.handle(value).unwrap()) as R;\n\t}\n\n\tpublic is<R extends T = T>(value: unknown): value is R {\n\t\treturn this.run(value).isOk();\n\t}\n\n\t/**\n\t * Sets if the validator should also run constraints or just do basic checks.\n\t * @param isValidationEnabled Whether this validator should be enabled or disabled. You can pass boolean or a function returning boolean which will be called just before parsing.\n\t * Set to `null` to go off of the global configuration.\n\t */\n\tpublic setValidationEnabled(isValidationEnabled: boolean | (() => boolean) | null): this {\n\t\tconst clone = this.clone();\n\t\tclone.isValidationEnabled = isValidationEnabled;\n\t\treturn clone;\n\t}\n\n\tpublic getValidationEnabled() {\n\t\treturn getValue(this.isValidationEnabled);\n\t}\n\n\tprotected get shouldRunConstraints(): boolean {\n\t\treturn getValue(this.isValidationEnabled) ?? getGlobalValidationEnabled();\n\t}\n\n\tprotected clone(): this {\n\t\tconst clone: this = Reflect.construct(this.constructor, [this.constraints]);\n\t\tclone.isValidationEnabled = this.isValidationEnabled;\n\t\treturn clone;\n\t}\n\n\tprotected abstract handle(value: unknown): Result<T, ValidatorError>;\n\n\tprotected addConstraint(constraint: IConstraint<T>): this {\n\t\tconst clone = this.clone();\n\t\tclone.constraints = clone.constraints.concat(constraint);\n\t\treturn clone;\n\t}\n}\n\nexport type ValidatorError = ValidationError | CombinedError | CombinedPropertyError | UnknownEnumValueError;\n","import fastDeepEqual from 'fast-deep-equal/es6/index.js';\nimport uniqWith from 'lodash/uniqWith.js';\n\nexport function isUnique(input: unknown[]) {\n\tif (input.length < 2) return true;\n\tconst uniqueArray = uniqWith(input, fastDeepEqual);\n\treturn uniqueArray.length === input.length;\n}\n","export function lessThan(a: number, b: number): boolean;\nexport function lessThan(a: bigint, b: bigint): boolean;\nexport function lessThan(a: number | bigint, b: number | bigint): boolean {\n\treturn a < b;\n}\n\nexport function lessThanOrEqual(a: number, b: number): boolean;\nexport function lessThanOrEqual(a: bigint, b: bigint): boolean;\nexport function lessThanOrEqual(a: number | bigint, b: number | bigint): boolean {\n\treturn a <= b;\n}\n\nexport function greaterThan(a: number, b: number): boolean;\nexport function greaterThan(a: bigint, b: bigint): boolean;\nexport function greaterThan(a: number | bigint, b: number | bigint): boolean {\n\treturn a > b;\n}\n\nexport function greaterThanOrEqual(a: number, b: number): boolean;\nexport function greaterThanOrEqual(a: bigint, b: bigint): boolean;\nexport function greaterThanOrEqual(a: number | bigint, b: number | bigint): boolean {\n\treturn a >= b;\n}\n\nexport function equal(a: number, b: number): boolean;\nexport function equal(a: bigint, b: bigint): boolean;\nexport function equal(a: number | bigint, b: number | bigint): boolean {\n\treturn a === b;\n}\n\nexport function notEqual(a: number, b: number): boolean;\nexport function notEqual(a: bigint, b: bigint): boolean;\nexport function notEqual(a: number | bigint, b: number | bigint): boolean {\n\treturn a !== b;\n}\n\nexport interface Comparator {\n\t(a: number, b: number): boolean;\n\t(a: bigint, b: bigint): boolean;\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { isUnique } from './util/isUnique';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\n\nexport type ArrayConstraintName = `s.array(T).${\n\t| 'unique'\n\t| `length${\n\t\t\t| 'LessThan'\n\t\t\t| 'LessThanOrEqual'\n\t\t\t| 'GreaterThan'\n\t\t\t| 'GreaterThanOrEqual'\n\t\t\t| 'Equal'\n\t\t\t| 'NotEqual'\n\t\t\t| 'Range'\n\t\t\t| 'RangeInclusive'\n\t\t\t| 'RangeExclusive'}`}`;\n\nfunction arrayLengthComparator<T>(comparator: Comparator, name: ArrayConstraintName, expected: string, length: number): IConstraint<T[]> {\n\treturn {\n\t\trun(input: T[]) {\n\t\t\treturn comparator(input.length, length) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function arrayLengthLessThan<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length < ${value}`;\n\treturn arrayLengthComparator(lessThan, 's.array(T).lengthLessThan', expected, value);\n}\n\nexport function arrayLengthLessThanOrEqual<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length <= ${value}`;\n\treturn arrayLengthComparator(lessThanOrEqual, 's.array(T).lengthLessThanOrEqual', expected, value);\n}\n\nexport function arrayLengthGreaterThan<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length > ${value}`;\n\treturn arrayLengthComparator(greaterThan, 's.array(T).lengthGreaterThan', expected, value);\n}\n\nexport function arrayLengthGreaterThanOrEqual<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length >= ${value}`;\n\treturn arrayLengthComparator(greaterThanOrEqual, 's.array(T).lengthGreaterThanOrEqual', expected, value);\n}\n\nexport function arrayLengthEqual<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length === ${value}`;\n\treturn arrayLengthComparator(equal, 's.array(T).lengthEqual', expected, value);\n}\n\nexport function arrayLengthNotEqual<T>(value: number): IConstraint<T[]> {\n\tconst expected = `expected.length !== ${value}`;\n\treturn arrayLengthComparator(notEqual, 's.array(T).lengthNotEqual', expected, value);\n}\n\nexport function arrayLengthRange<T>(start: number, endBefore: number): IConstraint<T[]> {\n\tconst expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n\treturn {\n\t\trun(input: T[]) {\n\t\t\treturn input.length >= start && input.length < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.array(T).lengthRange', 'Invalid Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function arrayLengthRangeInclusive<T>(start: number, end: number): IConstraint<T[]> {\n\tconst expected = `expected.length >= ${start} && expected.length <= ${end}`;\n\treturn {\n\t\trun(input: T[]) {\n\t\t\treturn input.length >= start && input.length <= end //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.array(T).lengthRangeInclusive', 'Invalid Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function arrayLengthRangeExclusive<T>(startAfter: number, endBefore: number): IConstraint<T[]> {\n\tconst expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n\treturn {\n\t\trun(input: T[]) {\n\t\t\treturn input.length > startAfter && input.length < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.array(T).lengthRangeExclusive', 'Invalid Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport const uniqueArray: IConstraint<unknown[]> = {\n\trun(input: unknown[]) {\n\t\treturn isUnique(input) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(new ExpectedConstraintError('s.array(T).unique', 'Array values are not unique', input, 'Expected all values to be unique'));\n\t}\n};\n","import type { InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class CombinedPropertyError extends BaseError {\n\tpublic readonly errors: [PropertyKey, BaseError][];\n\n\tpublic constructor(errors: [PropertyKey, BaseError][]) {\n\t\tsuper('Received one or more errors');\n\n\t\tthis.errors = errors;\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize('[CombinedPropertyError]', 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1, compact: true };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\n\t\tconst header = `${options.stylize('CombinedPropertyError', 'special')} (${options.stylize(this.errors.length.toString(), 'number')})`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst errors = this.errors\n\t\t\t.map(([key, error]) => {\n\t\t\t\tconst property = CombinedPropertyError.formatProperty(key, options);\n\t\t\t\tconst body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n\n\t\t\t\treturn `  input${property}${padding}${body}`;\n\t\t\t})\n\t\t\t.join('\\n\\n');\n\t\treturn `${header}\\n  ${message}\\n\\n${errors}`;\n\t}\n\n\tprivate static formatProperty(key: PropertyKey, options: InspectOptionsStylized): string {\n\t\tif (typeof key === 'string') return options.stylize(`.${key}`, 'symbol');\n\t\tif (typeof key === 'number') return `[${options.stylize(key.toString(), 'number')}]`;\n\t\treturn `[${options.stylize('Symbol', 'symbol')}(${key.description})]`;\n\t}\n}\n","import { inspect, type InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class ValidationError extends BaseError {\n\tpublic readonly validator: string;\n\tpublic readonly given: unknown;\n\n\tpublic constructor(validator: string, message: string, given: unknown) {\n\t\tsuper(message);\n\n\t\tthis.validator = validator;\n\t\tthis.given = given;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tvalidator: this.validator,\n\t\t\tgiven: this.given\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst validator = options.stylize(this.validator, 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[ValidationError: ${validator}]`, 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1, compact: true };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\t\tconst given = inspect(this.given, newOptions).replace(/\\n/g, padding);\n\n\t\tconst header = `${options.stylize('ValidationError', 'special')} > ${validator}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst givenBlock = `\\n  ${options.stylize('Received:', 'regexp')}${padding}${given}`;\n\t\treturn `${header}\\n  ${message}\\n${givenBlock}`;\n\t}\n}\n","import {\n\tarrayLengthEqual,\n\tarrayLengthGreaterThan,\n\tarrayLengthGreaterThanOrEqual,\n\tarrayLengthLessThan,\n\tarrayLengthLessThanOrEqual,\n\tarrayLengthNotEqual,\n\tarrayLengthRange,\n\tarrayLengthRangeExclusive,\n\tarrayLengthRangeInclusive,\n\tuniqueArray\n} from '../constraints/ArrayConstraints';\nimport type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport type { ExpandSmallerTuples, Tuple, UnshiftTuple } from '../lib/util-types';\nimport { BaseValidator } from './imports';\n\nexport class ArrayValidator<T extends unknown[], I = T[number]> extends BaseValidator<T> {\n\tprivate readonly validator: BaseValidator<I>;\n\n\tpublic constructor(validator: BaseValidator<I>, constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validator = validator;\n\t}\n\n\tpublic lengthLessThan<N extends number>(length: N): ArrayValidator<ExpandSmallerTuples<UnshiftTuple<[...Tuple<I, N>]>>> {\n\t\treturn this.addConstraint(arrayLengthLessThan(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthLessThanOrEqual<N extends number>(length: N): ArrayValidator<ExpandSmallerTuples<[...Tuple<I, N>]>> {\n\t\treturn this.addConstraint(arrayLengthLessThanOrEqual(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthGreaterThan<N extends number>(length: N): ArrayValidator<[...Tuple<I, N>, I, ...T]> {\n\t\treturn this.addConstraint(arrayLengthGreaterThan(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthGreaterThanOrEqual<N extends number>(length: N): ArrayValidator<[...Tuple<I, N>, ...T]> {\n\t\treturn this.addConstraint(arrayLengthGreaterThanOrEqual(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthEqual<N extends number>(length: N): ArrayValidator<[...Tuple<I, N>]> {\n\t\treturn this.addConstraint(arrayLengthEqual(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthNotEqual(length: number): ArrayValidator<[...T]> {\n\t\treturn this.addConstraint(arrayLengthNotEqual(length) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthRange<S extends number, E extends number>(\n\t\tstart: S,\n\t\tendBefore: E\n\t): ArrayValidator<Exclude<ExpandSmallerTuples<UnshiftTuple<[...Tuple<I, E>]>>, ExpandSmallerTuples<UnshiftTuple<[...Tuple<I, S>]>>>> {\n\t\treturn this.addConstraint(arrayLengthRange(start, endBefore) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthRangeInclusive<S extends number, E extends number>(\n\t\tstartAt: S,\n\t\tendAt: E\n\t): ArrayValidator<Exclude<ExpandSmallerTuples<[...Tuple<I, E>]>, ExpandSmallerTuples<UnshiftTuple<[...Tuple<I, S>]>>>> {\n\t\treturn this.addConstraint(arrayLengthRangeInclusive(startAt, endAt) as IConstraint<T>) as any;\n\t}\n\n\tpublic lengthRangeExclusive<S extends number, E extends number>(\n\t\tstartAfter: S,\n\t\tendBefore: E\n\t): ArrayValidator<Exclude<ExpandSmallerTuples<UnshiftTuple<[...Tuple<I, E>]>>, ExpandSmallerTuples<[...Tuple<T, S>]>>> {\n\t\treturn this.addConstraint(arrayLengthRangeExclusive(startAfter, endBefore) as IConstraint<T>) as any;\n\t}\n\n\tpublic get unique(): this {\n\t\treturn this.addConstraint(uniqueArray as IConstraint<T>);\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validator, this.constraints]);\n\t}\n\n\tprotected handle(values: unknown): Result<T, ValidationError | CombinedPropertyError> {\n\t\tif (!Array.isArray(values)) {\n\t\t\treturn Result.err(new ValidationError('s.array(T)', 'Expected an array', values));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(values as T);\n\t\t}\n\n\t\tconst errors: [number, BaseError][] = [];\n\t\tconst transformed: T = [] as unknown as T;\n\n\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\tconst result = this.validator.run(values[i]);\n\t\t\tif (result.isOk()) transformed.push(result.value);\n\t\t\telse errors.push([i, result.error!]);\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(transformed)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\n\nexport type BigIntConstraintName = `s.bigint.${\n\t| 'lessThan'\n\t| 'lessThanOrEqual'\n\t| 'greaterThan'\n\t| 'greaterThanOrEqual'\n\t| 'equal'\n\t| 'notEqual'\n\t| 'divisibleBy'}`;\n\nfunction bigintComparator(comparator: Comparator, name: BigIntConstraintName, expected: string, number: bigint): IConstraint<bigint> {\n\treturn {\n\t\trun(input: bigint) {\n\t\t\treturn comparator(input, number) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid bigint value', input, expected));\n\t\t}\n\t};\n}\n\nexport function bigintLessThan(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected < ${value}n`;\n\treturn bigintComparator(lessThan, 's.bigint.lessThan', expected, value);\n}\n\nexport function bigintLessThanOrEqual(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected <= ${value}n`;\n\treturn bigintComparator(lessThanOrEqual, 's.bigint.lessThanOrEqual', expected, value);\n}\n\nexport function bigintGreaterThan(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected > ${value}n`;\n\treturn bigintComparator(greaterThan, 's.bigint.greaterThan', expected, value);\n}\n\nexport function bigintGreaterThanOrEqual(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected >= ${value}n`;\n\treturn bigintComparator(greaterThanOrEqual, 's.bigint.greaterThanOrEqual', expected, value);\n}\n\nexport function bigintEqual(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected === ${value}n`;\n\treturn bigintComparator(equal, 's.bigint.equal', expected, value);\n}\n\nexport function bigintNotEqual(value: bigint): IConstraint<bigint> {\n\tconst expected = `expected !== ${value}n`;\n\treturn bigintComparator(notEqual, 's.bigint.notEqual', expected, value);\n}\n\nexport function bigintDivisibleBy(divider: bigint): IConstraint<bigint> {\n\tconst expected = `expected % ${divider}n === 0n`;\n\treturn {\n\t\trun(input: bigint) {\n\t\t\treturn input % divider === 0n //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.bigint.divisibleBy', 'BigInt is not divisible', input, expected));\n\t\t}\n\t};\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport {\n\tbigintDivisibleBy,\n\tbigintEqual,\n\tbigintGreaterThan,\n\tbigintGreaterThanOrEqual,\n\tbigintLessThan,\n\tbigintLessThanOrEqual,\n\tbigintNotEqual\n} from '../constraints/BigIntConstraints';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class BigIntValidator<T extends bigint> extends BaseValidator<T> {\n\tpublic lessThan(number: bigint): this {\n\t\treturn this.addConstraint(bigintLessThan(number) as IConstraint<T>);\n\t}\n\n\tpublic lessThanOrEqual(number: bigint): this {\n\t\treturn this.addConstraint(bigintLessThanOrEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic greaterThan(number: bigint): this {\n\t\treturn this.addConstraint(bigintGreaterThan(number) as IConstraint<T>);\n\t}\n\n\tpublic greaterThanOrEqual(number: bigint): this {\n\t\treturn this.addConstraint(bigintGreaterThanOrEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic equal<N extends bigint>(number: N): BigIntValidator<N> {\n\t\treturn this.addConstraint(bigintEqual(number) as IConstraint<T>) as unknown as BigIntValidator<N>;\n\t}\n\n\tpublic notEqual(number: bigint): this {\n\t\treturn this.addConstraint(bigintNotEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic get positive(): this {\n\t\treturn this.greaterThanOrEqual(0n);\n\t}\n\n\tpublic get negative(): this {\n\t\treturn this.lessThan(0n);\n\t}\n\n\tpublic divisibleBy(number: bigint): this {\n\t\treturn this.addConstraint(bigintDivisibleBy(number) as IConstraint<T>);\n\t}\n\n\tpublic get abs(): this {\n\t\treturn this.transform((value) => (value < 0 ? -value : value) as T);\n\t}\n\n\tpublic intN(bits: number): this {\n\t\treturn this.transform((value) => BigInt.asIntN(bits, value) as T);\n\t}\n\n\tpublic uintN(bits: number): this {\n\t\treturn this.transform((value) => BigInt.asUintN(bits, value) as T);\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn typeof value === 'bigint' //\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ValidationError('s.bigint', 'Expected a bigint primitive', value));\n\t}\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\n\nexport type BooleanConstraintName = `s.boolean.${boolean}`;\n\nexport const booleanTrue: IConstraint<boolean, true> = {\n\trun(input: boolean) {\n\t\treturn input //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(new ExpectedConstraintError('s.boolean.true', 'Invalid boolean value', input, 'true'));\n\t}\n};\n\nexport const booleanFalse: IConstraint<boolean, false> = {\n\trun(input: boolean) {\n\t\treturn input //\n\t\t\t? Result.err(new ExpectedConstraintError('s.boolean.false', 'Invalid boolean value', input, 'false'))\n\t\t\t: Result.ok(input);\n\t}\n};\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport { booleanFalse, booleanTrue } from '../constraints/BooleanConstraints';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class BooleanValidator<T extends boolean = boolean> extends BaseValidator<T> {\n\tpublic get true(): BooleanValidator<true> {\n\t\treturn this.addConstraint(booleanTrue as IConstraint<T>) as BooleanValidator<true>;\n\t}\n\n\tpublic get false(): BooleanValidator<false> {\n\t\treturn this.addConstraint(booleanFalse as IConstraint<T>) as BooleanValidator<false>;\n\t}\n\n\tpublic equal<R extends true | false>(value: R): BooleanValidator<R> {\n\t\treturn (value ? this.true : this.false) as BooleanValidator<R>;\n\t}\n\n\tpublic notEqual<R extends true | false>(value: R): BooleanValidator<R> {\n\t\treturn (value ? this.false : this.true) as BooleanValidator<R>;\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn typeof value === 'boolean' //\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ValidationError('s.boolean', 'Expected a boolean primitive', value));\n\t}\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\n\nexport type DateConstraintName = `s.date.${\n\t| 'lessThan'\n\t| 'lessThanOrEqual'\n\t| 'greaterThan'\n\t| 'greaterThanOrEqual'\n\t| 'equal'\n\t| 'notEqual'\n\t| 'valid'\n\t| 'invalid'}`;\n\nfunction dateComparator(comparator: Comparator, name: DateConstraintName, expected: string, number: number): IConstraint<Date> {\n\treturn {\n\t\trun(input: Date) {\n\t\t\treturn comparator(input.getTime(), number) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid Date value', input, expected));\n\t\t}\n\t};\n}\n\nexport function dateLessThan(value: Date): IConstraint<Date> {\n\tconst expected = `expected < ${value.toISOString()}`;\n\treturn dateComparator(lessThan, 's.date.lessThan', expected, value.getTime());\n}\n\nexport function dateLessThanOrEqual(value: Date): IConstraint<Date> {\n\tconst expected = `expected <= ${value.toISOString()}`;\n\treturn dateComparator(lessThanOrEqual, 's.date.lessThanOrEqual', expected, value.getTime());\n}\n\nexport function dateGreaterThan(value: Date): IConstraint<Date> {\n\tconst expected = `expected > ${value.toISOString()}`;\n\treturn dateComparator(greaterThan, 's.date.greaterThan', expected, value.getTime());\n}\n\nexport function dateGreaterThanOrEqual(value: Date): IConstraint<Date> {\n\tconst expected = `expected >= ${value.toISOString()}`;\n\treturn dateComparator(greaterThanOrEqual, 's.date.greaterThanOrEqual', expected, value.getTime());\n}\n\nexport function dateEqual(value: Date): IConstraint<Date> {\n\tconst expected = `expected === ${value.toISOString()}`;\n\treturn dateComparator(equal, 's.date.equal', expected, value.getTime());\n}\n\nexport function dateNotEqual(value: Date): IConstraint<Date> {\n\tconst expected = `expected !== ${value.toISOString()}`;\n\treturn dateComparator(notEqual, 's.date.notEqual', expected, value.getTime());\n}\n\nexport const dateInvalid: IConstraint<Date> = {\n\trun(input: Date) {\n\t\treturn Number.isNaN(input.getTime()) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(new ExpectedConstraintError('s.date.invalid', 'Invalid Date value', input, 'expected === NaN'));\n\t}\n};\n\nexport const dateValid: IConstraint<Date> = {\n\trun(input: Date) {\n\t\treturn Number.isNaN(input.getTime()) //\n\t\t\t? Result.err(new ExpectedConstraintError('s.date.valid', 'Invalid Date value', input, 'expected !== NaN'))\n\t\t\t: Result.ok(input);\n\t}\n};\n","import {\n\tdateEqual,\n\tdateGreaterThan,\n\tdateGreaterThanOrEqual,\n\tdateInvalid,\n\tdateLessThan,\n\tdateLessThanOrEqual,\n\tdateNotEqual,\n\tdateValid\n} from '../constraints/DateConstraints';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class DateValidator extends BaseValidator<Date> {\n\tpublic lessThan(date: Date | number | string): this {\n\t\treturn this.addConstraint(dateLessThan(new Date(date)));\n\t}\n\n\tpublic lessThanOrEqual(date: Date | number | string): this {\n\t\treturn this.addConstraint(dateLessThanOrEqual(new Date(date)));\n\t}\n\n\tpublic greaterThan(date: Date | number | string): this {\n\t\treturn this.addConstraint(dateGreaterThan(new Date(date)));\n\t}\n\n\tpublic greaterThanOrEqual(date: Date | number | string): this {\n\t\treturn this.addConstraint(dateGreaterThanOrEqual(new Date(date)));\n\t}\n\n\tpublic equal(date: Date | number | string): this {\n\t\tconst resolved = new Date(date);\n\t\treturn Number.isNaN(resolved.getTime()) //\n\t\t\t? this.invalid\n\t\t\t: this.addConstraint(dateEqual(resolved));\n\t}\n\n\tpublic notEqual(date: Date | number | string): this {\n\t\tconst resolved = new Date(date);\n\t\treturn Number.isNaN(resolved.getTime()) //\n\t\t\t? this.valid\n\t\t\t: this.addConstraint(dateNotEqual(resolved));\n\t}\n\n\tpublic get valid(): this {\n\t\treturn this.addConstraint(dateValid);\n\t}\n\n\tpublic get invalid(): this {\n\t\treturn this.addConstraint(dateInvalid);\n\t}\n\n\tprotected handle(value: unknown): Result<Date, ValidationError> {\n\t\treturn value instanceof Date //\n\t\t\t? Result.ok(value)\n\t\t\t: Result.err(new ValidationError('s.date', 'Expected a Date', value));\n\t}\n}\n","import { inspect, type InspectOptionsStylized } from 'node:util';\nimport { customInspectSymbolStackLess } from './BaseError';\nimport { ValidationError } from './ValidationError';\n\nexport class ExpectedValidationError<T> extends ValidationError {\n\tpublic readonly expected: T;\n\n\tpublic constructor(validator: string, message: string, given: unknown, expected: T) {\n\t\tsuper(validator, message, given);\n\t\tthis.expected = expected;\n\t}\n\n\tpublic override toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tvalidator: this.validator,\n\t\t\tgiven: this.given,\n\t\t\texpected: this.expected\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst validator = options.stylize(this.validator, 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[ExpectedValidationError: ${validator}]`, 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1 };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\t\tconst expected = inspect(this.expected, newOptions).replace(/\\n/g, padding);\n\t\tconst given = inspect(this.given, newOptions).replace(/\\n/g, padding);\n\n\t\tconst header = `${options.stylize('ExpectedValidationError', 'special')} > ${validator}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst expectedBlock = `\\n  ${options.stylize('Expected:', 'string')}${padding}${expected}`;\n\t\tconst givenBlock = `\\n  ${options.stylize('Received:', 'regexp')}${padding}${given}`;\n\t\treturn `${header}\\n  ${message}\\n${expectedBlock}\\n${givenBlock}`;\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport { ExpectedValidationError } from '../lib/errors/ExpectedValidationError';\nimport { Result } from '../lib/Result';\nimport type { Constructor } from '../lib/util-types';\nimport { BaseValidator } from './imports';\n\nexport class InstanceValidator<T> extends BaseValidator<T> {\n\tpublic readonly expected: Constructor<T>;\n\n\tpublic constructor(expected: Constructor<T>, constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.expected = expected;\n\t}\n\n\tprotected handle(value: unknown): Result<T, ExpectedValidationError<Constructor<T>>> {\n\t\treturn value instanceof this.expected //\n\t\t\t? Result.ok(value)\n\t\t\t: Result.err(new ExpectedValidationError('s.instance(V)', 'Expected', value, this.expected));\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.expected, this.constraints]);\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport { ExpectedValidationError } from '../lib/errors/ExpectedValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class LiteralValidator<T> extends BaseValidator<T> {\n\tpublic readonly expected: T;\n\n\tpublic constructor(literal: T, constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.expected = literal;\n\t}\n\n\tprotected handle(value: unknown): Result<T, ExpectedValidationError<T>> {\n\t\treturn Object.is(value, this.expected) //\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ExpectedValidationError('s.literal(V)', 'Expected values to be equals', value, this.expected));\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.expected, this.constraints]);\n\t}\n}\n","import { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class NeverValidator extends BaseValidator<never> {\n\tprotected handle(value: unknown): Result<never, ValidationError> {\n\t\treturn Result.err(new ValidationError('s.never', 'Expected a value to not be passed', value));\n\t}\n}\n","import { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class NullishValidator extends BaseValidator<undefined | null> {\n\tprotected handle(value: unknown): Result<undefined | null, ValidationError> {\n\t\treturn value === undefined || value === null //\n\t\t\t? Result.ok(value)\n\t\t\t: Result.err(new ValidationError('s.nullish', 'Expected undefined or null', value));\n\t}\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\n\nexport type NumberConstraintName = `s.number.${\n\t| 'lessThan'\n\t| 'lessThanOrEqual'\n\t| 'greaterThan'\n\t| 'greaterThanOrEqual'\n\t| 'equal'\n\t| 'equal(NaN)'\n\t| 'notEqual'\n\t| 'notEqual(NaN)'\n\t| 'int'\n\t| 'safeInt'\n\t| 'finite'\n\t| 'divisibleBy'}`;\n\nfunction numberComparator(comparator: Comparator, name: NumberConstraintName, expected: string, number: number): IConstraint<number> {\n\treturn {\n\t\trun(input: number) {\n\t\t\treturn comparator(input, number) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid number value', input, expected));\n\t\t}\n\t};\n}\n\nexport function numberLessThan(value: number): IConstraint<number> {\n\tconst expected = `expected < ${value}`;\n\treturn numberComparator(lessThan, 's.number.lessThan', expected, value);\n}\n\nexport function numberLessThanOrEqual(value: number): IConstraint<number> {\n\tconst expected = `expected <= ${value}`;\n\treturn numberComparator(lessThanOrEqual, 's.number.lessThanOrEqual', expected, value);\n}\n\nexport function numberGreaterThan(value: number): IConstraint<number> {\n\tconst expected = `expected > ${value}`;\n\treturn numberComparator(greaterThan, 's.number.greaterThan', expected, value);\n}\n\nexport function numberGreaterThanOrEqual(value: number): IConstraint<number> {\n\tconst expected = `expected >= ${value}`;\n\treturn numberComparator(greaterThanOrEqual, 's.number.greaterThanOrEqual', expected, value);\n}\n\nexport function numberEqual(value: number): IConstraint<number> {\n\tconst expected = `expected === ${value}`;\n\treturn numberComparator(equal, 's.number.equal', expected, value);\n}\n\nexport function numberNotEqual(value: number): IConstraint<number> {\n\tconst expected = `expected !== ${value}`;\n\treturn numberComparator(notEqual, 's.number.notEqual', expected, value);\n}\n\nexport const numberInt: IConstraint<number> = {\n\trun(input: number) {\n\t\treturn Number.isInteger(input) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(\n\t\t\t\t\tnew ExpectedConstraintError('s.number.int', 'Given value is not an integer', input, 'Number.isInteger(expected) to be true')\n\t\t\t  );\n\t}\n};\n\nexport const numberSafeInt: IConstraint<number> = {\n\trun(input: number) {\n\t\treturn Number.isSafeInteger(input) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(\n\t\t\t\t\tnew ExpectedConstraintError(\n\t\t\t\t\t\t's.number.safeInt',\n\t\t\t\t\t\t'Given value is not a safe integer',\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\t'Number.isSafeInteger(expected) to be true'\n\t\t\t\t\t)\n\t\t\t  );\n\t}\n};\n\nexport const numberFinite: IConstraint<number> = {\n\trun(input: number) {\n\t\treturn Number.isFinite(input) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(new ExpectedConstraintError('s.number.finite', 'Given value is not finite', input, 'Number.isFinite(expected) to be true'));\n\t}\n};\n\nexport const numberNaN: IConstraint<number> = {\n\trun(input: number) {\n\t\treturn Number.isNaN(input) //\n\t\t\t? Result.ok(input)\n\t\t\t: Result.err(new ExpectedConstraintError('s.number.equal(NaN)', 'Invalid number value', input, 'expected === NaN'));\n\t}\n};\n\nexport const numberNotNaN: IConstraint<number> = {\n\trun(input: number) {\n\t\treturn Number.isNaN(input) //\n\t\t\t? Result.err(new ExpectedConstraintError('s.number.notEqual(NaN)', 'Invalid number value', input, 'expected !== NaN'))\n\t\t\t: Result.ok(input);\n\t}\n};\n\nexport function numberDivisibleBy(divider: number): IConstraint<number> {\n\tconst expected = `expected % ${divider} === 0`;\n\treturn {\n\t\trun(input: number) {\n\t\t\treturn input % divider === 0 //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.number.divisibleBy', 'Number is not divisible', input, expected));\n\t\t}\n\t};\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport {\n\tnumberDivisibleBy,\n\tnumberEqual,\n\tnumberFinite,\n\tnumberGreaterThan,\n\tnumberGreaterThanOrEqual,\n\tnumberInt,\n\tnumberLessThan,\n\tnumberLessThanOrEqual,\n\tnumberNaN,\n\tnumberNotEqual,\n\tnumberNotNaN,\n\tnumberSafeInt\n} from '../constraints/NumberConstraints';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class NumberValidator<T extends number> extends BaseValidator<T> {\n\tpublic lessThan(number: number): this {\n\t\treturn this.addConstraint(numberLessThan(number) as IConstraint<T>);\n\t}\n\n\tpublic lessThanOrEqual(number: number): this {\n\t\treturn this.addConstraint(numberLessThanOrEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic greaterThan(number: number): this {\n\t\treturn this.addConstraint(numberGreaterThan(number) as IConstraint<T>);\n\t}\n\n\tpublic greaterThanOrEqual(number: number): this {\n\t\treturn this.addConstraint(numberGreaterThanOrEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic equal<N extends number>(number: N): NumberValidator<N> {\n\t\treturn Number.isNaN(number) //\n\t\t\t? (this.addConstraint(numberNaN as IConstraint<T>) as unknown as NumberValidator<N>)\n\t\t\t: (this.addConstraint(numberEqual(number) as IConstraint<T>) as unknown as NumberValidator<N>);\n\t}\n\n\tpublic notEqual(number: number): this {\n\t\treturn Number.isNaN(number) //\n\t\t\t? this.addConstraint(numberNotNaN as IConstraint<T>)\n\t\t\t: this.addConstraint(numberNotEqual(number) as IConstraint<T>);\n\t}\n\n\tpublic get int(): this {\n\t\treturn this.addConstraint(numberInt as IConstraint<T>);\n\t}\n\n\tpublic get safeInt(): this {\n\t\treturn this.addConstraint(numberSafeInt as IConstraint<T>);\n\t}\n\n\tpublic get finite(): this {\n\t\treturn this.addConstraint(numberFinite as IConstraint<T>);\n\t}\n\n\tpublic get positive(): this {\n\t\treturn this.greaterThanOrEqual(0);\n\t}\n\n\tpublic get negative(): this {\n\t\treturn this.lessThan(0);\n\t}\n\n\tpublic divisibleBy(divider: number): this {\n\t\treturn this.addConstraint(numberDivisibleBy(divider) as IConstraint<T>);\n\t}\n\n\tpublic get abs(): this {\n\t\treturn this.transform(Math.abs as (value: number) => T);\n\t}\n\n\tpublic get sign(): this {\n\t\treturn this.transform(Math.sign as (value: number) => T);\n\t}\n\n\tpublic get trunc(): this {\n\t\treturn this.transform(Math.trunc as (value: number) => T);\n\t}\n\n\tpublic get floor(): this {\n\t\treturn this.transform(Math.floor as (value: number) => T);\n\t}\n\n\tpublic get fround(): this {\n\t\treturn this.transform(Math.fround as (value: number) => T);\n\t}\n\n\tpublic get round(): this {\n\t\treturn this.transform(Math.round as (value: number) => T);\n\t}\n\n\tpublic get ceil(): this {\n\t\treturn this.transform(Math.ceil as (value: number) => T);\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn typeof value === 'number' //\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ValidationError('s.number', 'Expected a number primitive', value));\n\t}\n}\n","import type { InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class MissingPropertyError extends BaseError {\n\tpublic readonly property: PropertyKey;\n\n\tpublic constructor(property: PropertyKey) {\n\t\tsuper('A required property is missing');\n\t\tthis.property = property;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tproperty: this.property\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst property = options.stylize(this.property.toString(), 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[MissingPropertyError: ${property}]`, 'special');\n\t\t}\n\n\t\tconst header = `${options.stylize('MissingPropertyError', 'special')} > ${property}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\treturn `${header}\\n  ${message}`;\n\t}\n}\n","import { inspect, type InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class UnknownPropertyError extends BaseError {\n\tpublic readonly property: PropertyKey;\n\tpublic readonly value: unknown;\n\n\tpublic constructor(property: PropertyKey, value: unknown) {\n\t\tsuper('Received unexpected property');\n\n\t\tthis.property = property;\n\t\tthis.value = value;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tproperty: this.property,\n\t\t\tvalue: this.value\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst property = options.stylize(this.property.toString(), 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[UnknownPropertyError: ${property}]`, 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1, compact: true };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\t\tconst given = inspect(this.value, newOptions).replace(/\\n/g, padding);\n\n\t\tconst header = `${options.stylize('UnknownPropertyError', 'special')} > ${property}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst givenBlock = `\\n  ${options.stylize('Received:', 'regexp')}${padding}${given}`;\n\t\treturn `${header}\\n  ${message}\\n${givenBlock}`;\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport { Result } from '../lib/Result';\nimport type { ValidatorError } from './BaseValidator';\nimport { BaseValidator } from './imports';\nimport { getValue } from './util/getValue';\n\nexport class DefaultValidator<T> extends BaseValidator<T> {\n\tprivate readonly validator: BaseValidator<T>;\n\tprivate defaultValue: T | (() => T);\n\n\tpublic constructor(validator: BaseValidator<T>, value: T | (() => T), constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validator = validator;\n\t\tthis.defaultValue = value;\n\t}\n\n\tpublic override default(value: Exclude<T, undefined> | (() => Exclude<T, undefined>)): DefaultValidator<Exclude<T, undefined>> {\n\t\tconst clone = this.clone() as unknown as DefaultValidator<Exclude<T, undefined>>;\n\t\tclone.defaultValue = value;\n\t\treturn clone;\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidatorError> {\n\t\treturn typeof value === 'undefined' //\n\t\t\t? Result.ok(getValue(this.defaultValue))\n\t\t\t: this.validator['handle'](value); // eslint-disable-line @typescript-eslint/dot-notation\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validator, this.defaultValue, this.constraints]);\n\t}\n}\n","import type { InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class CombinedError extends BaseError {\n\tpublic readonly errors: readonly BaseError[];\n\n\tpublic constructor(errors: readonly BaseError[]) {\n\t\tsuper('Received one or more errors');\n\n\t\tthis.errors = errors;\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize('[CombinedError]', 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1, compact: true };\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\n\t\tconst header = `${options.stylize('CombinedError', 'special')} (${options.stylize(this.errors.length.toString(), 'number')})`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst errors = this.errors\n\t\t\t.map((error, i) => {\n\t\t\t\tconst index = options.stylize((i + 1).toString(), 'number');\n\t\t\t\tconst body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n\n\t\t\t\treturn `  ${index} ${body}`;\n\t\t\t})\n\t\t\t.join('\\n\\n');\n\t\treturn `${header}\\n  ${message}\\n\\n${errors}`;\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedError } from '../lib/errors/CombinedError';\nimport type { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator, LiteralValidator, NullishValidator } from './imports';\n\nexport class UnionValidator<T> extends BaseValidator<T> {\n\tprivate validators: readonly BaseValidator<T>[];\n\n\tpublic constructor(validators: readonly BaseValidator<T>[], constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validators = validators;\n\t}\n\n\tpublic override get optional(): UnionValidator<T | undefined> {\n\t\tif (this.validators.length === 0) return new UnionValidator<T | undefined>([new LiteralValidator(undefined)], this.constraints);\n\n\t\tconst [validator] = this.validators;\n\t\tif (validator instanceof LiteralValidator) {\n\t\t\t// If already optional, return a clone:\n\t\t\tif (validator.expected === undefined) return this.clone();\n\n\t\t\t// If it's nullable, convert the nullable validator into a nullish validator to optimize `null | undefined`:\n\t\t\tif (validator.expected === null) {\n\t\t\t\treturn new UnionValidator<T | null | undefined>(\n\t\t\t\t\t[new NullishValidator(), ...this.validators.slice(1)],\n\t\t\t\t\tthis.constraints\n\t\t\t\t) as UnionValidator<T | undefined>;\n\t\t\t}\n\t\t} else if (validator instanceof NullishValidator) {\n\t\t\t// If it's already nullish (which validates optional), return a clone:\n\t\t\treturn this.clone();\n\t\t}\n\n\t\treturn new UnionValidator([new LiteralValidator(undefined), ...this.validators]);\n\t}\n\n\tpublic get required(): UnionValidator<Exclude<T, undefined>> {\n\t\ttype RequiredValidator = UnionValidator<Exclude<T, undefined>>;\n\n\t\tif (this.validators.length === 0) return this.clone() as unknown as RequiredValidator;\n\n\t\tconst [validator] = this.validators;\n\t\tif (validator instanceof LiteralValidator) {\n\t\t\tif (validator.expected === undefined) return new UnionValidator(this.validators.slice(1), this.constraints) as RequiredValidator;\n\t\t} else if (validator instanceof NullishValidator) {\n\t\t\treturn new UnionValidator([new LiteralValidator(null), ...this.validators.slice(1)], this.constraints) as RequiredValidator;\n\t\t}\n\n\t\treturn this.clone() as unknown as RequiredValidator;\n\t}\n\n\tpublic override get nullable(): UnionValidator<T | null> {\n\t\tif (this.validators.length === 0) return new UnionValidator<T | null>([new LiteralValidator(null)], this.constraints);\n\n\t\tconst [validator] = this.validators;\n\t\tif (validator instanceof LiteralValidator) {\n\t\t\t// If already nullable, return a clone:\n\t\t\tif (validator.expected === null) return this.clone();\n\n\t\t\t// If it's optional, convert the optional validator into a nullish validator to optimize `null | undefined`:\n\t\t\tif (validator.expected === undefined) {\n\t\t\t\treturn new UnionValidator<T | null | undefined>(\n\t\t\t\t\t[new NullishValidator(), ...this.validators.slice(1)],\n\t\t\t\t\tthis.constraints\n\t\t\t\t) as UnionValidator<T | null>;\n\t\t\t}\n\t\t} else if (validator instanceof NullishValidator) {\n\t\t\t// If it's already nullish (which validates nullable), return a clone:\n\t\t\treturn this.clone();\n\t\t}\n\n\t\treturn new UnionValidator([new LiteralValidator(null), ...this.validators]);\n\t}\n\n\tpublic override get nullish(): UnionValidator<T | null | undefined> {\n\t\tif (this.validators.length === 0) return new UnionValidator<T | null | undefined>([new NullishValidator()], this.constraints);\n\n\t\tconst [validator] = this.validators;\n\t\tif (validator instanceof LiteralValidator) {\n\t\t\t// If already nullable or optional, promote the union to nullish:\n\t\t\tif (validator.expected === null || validator.expected === undefined) {\n\t\t\t\treturn new UnionValidator<T | null | undefined>([new NullishValidator(), ...this.validators.slice(1)], this.constraints);\n\t\t\t}\n\t\t} else if (validator instanceof NullishValidator) {\n\t\t\t// If it's already nullish, return a clone:\n\t\t\treturn this.clone();\n\t\t}\n\n\t\treturn new UnionValidator<T | null | undefined>([new NullishValidator(), ...this.validators]);\n\t}\n\n\tpublic override or<O>(...predicates: readonly BaseValidator<O>[]): UnionValidator<T | O> {\n\t\treturn new UnionValidator<T | O>([...this.validators, ...predicates]);\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validators, this.constraints]);\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError | CombinedError> {\n\t\tconst errors: BaseError[] = [];\n\n\t\tfor (const validator of this.validators) {\n\t\t\tconst result = validator.run(value);\n\t\t\tif (result.isOk()) return result as Result<T, CombinedError>;\n\t\t\terrors.push(result.error!);\n\t\t}\n\n\t\treturn Result.err(new CombinedError(errors));\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport { MissingPropertyError } from '../lib/errors/MissingPropertyError';\nimport { UnknownPropertyError } from '../lib/errors/UnknownPropertyError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport type { MappedObjectValidator, UndefinedToOptional } from '../lib/util-types';\nimport { BaseValidator } from './BaseValidator';\nimport { DefaultValidator } from './DefaultValidator';\nimport { LiteralValidator } from './LiteralValidator';\nimport { NullishValidator } from './NullishValidator';\nimport { UnionValidator } from './UnionValidator';\n\nexport class ObjectValidator<T extends object, I = UndefinedToOptional<T>> extends BaseValidator<I> {\n\tpublic readonly shape: MappedObjectValidator<T>;\n\tpublic readonly strategy: ObjectValidatorStrategy;\n\tprivate readonly keys: readonly (keyof I)[] = [];\n\tprivate readonly handleStrategy: (value: object) => Result<I, CombinedPropertyError>;\n\n\tprivate readonly requiredKeys = new Map<keyof I, BaseValidator<unknown>>();\n\tprivate readonly possiblyUndefinedKeys = new Map<keyof I, BaseValidator<unknown>>();\n\tprivate readonly possiblyUndefinedKeysWithDefaults = new Map<keyof I, DefaultValidator<unknown>>();\n\n\tpublic constructor(\n\t\tshape: MappedObjectValidator<T>,\n\t\tstrategy: ObjectValidatorStrategy = ObjectValidatorStrategy.Ignore,\n\t\tconstraints: readonly IConstraint<I>[] = []\n\t) {\n\t\tsuper(constraints);\n\t\tthis.shape = shape;\n\t\tthis.strategy = strategy;\n\n\t\tswitch (this.strategy) {\n\t\t\tcase ObjectValidatorStrategy.Ignore:\n\t\t\t\tthis.handleStrategy = (value) => this.handleIgnoreStrategy(value);\n\t\t\t\tbreak;\n\t\t\tcase ObjectValidatorStrategy.Strict: {\n\t\t\t\tthis.handleStrategy = (value) => this.handleStrictStrategy(value);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ObjectValidatorStrategy.Passthrough:\n\t\t\t\tthis.handleStrategy = (value) => this.handlePassthroughStrategy(value);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst shapeEntries = Object.entries(shape) as [keyof I, BaseValidator<T>][];\n\t\tthis.keys = shapeEntries.map(([key]) => key);\n\n\t\tfor (const [key, validator] of shapeEntries) {\n\t\t\tif (validator instanceof UnionValidator) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/dot-notation\n\t\t\t\tconst [possiblyLiteralOrNullishPredicate] = validator['validators'];\n\n\t\t\t\tif (possiblyLiteralOrNullishPredicate instanceof NullishValidator) {\n\t\t\t\t\tthis.possiblyUndefinedKeys.set(key, validator);\n\t\t\t\t} else if (possiblyLiteralOrNullishPredicate instanceof LiteralValidator) {\n\t\t\t\t\tif (possiblyLiteralOrNullishPredicate.expected === undefined) {\n\t\t\t\t\t\tthis.possiblyUndefinedKeys.set(key, validator);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.requiredKeys.set(key, validator);\n\t\t\t\t\t}\n\t\t\t\t} else if (validator instanceof DefaultValidator) {\n\t\t\t\t\tthis.possiblyUndefinedKeysWithDefaults.set(key, validator);\n\t\t\t\t} else {\n\t\t\t\t\tthis.requiredKeys.set(key, validator);\n\t\t\t\t}\n\t\t\t} else if (validator instanceof NullishValidator) {\n\t\t\t\tthis.possiblyUndefinedKeys.set(key, validator);\n\t\t\t} else if (validator instanceof LiteralValidator) {\n\t\t\t\tif (validator.expected === undefined) {\n\t\t\t\t\tthis.possiblyUndefinedKeys.set(key, validator);\n\t\t\t\t} else {\n\t\t\t\t\tthis.requiredKeys.set(key, validator);\n\t\t\t\t}\n\t\t\t} else if (validator instanceof DefaultValidator) {\n\t\t\t\tthis.possiblyUndefinedKeysWithDefaults.set(key, validator);\n\t\t\t} else {\n\t\t\t\tthis.requiredKeys.set(key, validator);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get strict(): this {\n\t\treturn Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Strict, this.constraints]);\n\t}\n\n\tpublic get ignore(): this {\n\t\treturn Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Ignore, this.constraints]);\n\t}\n\n\tpublic get passthrough(): this {\n\t\treturn Reflect.construct(this.constructor, [this.shape, ObjectValidatorStrategy.Passthrough, this.constraints]);\n\t}\n\n\tpublic get partial(): ObjectValidator<{ [Key in keyof I]?: I[Key] }> {\n\t\tconst shape = Object.fromEntries(this.keys.map((key) => [key, this.shape[key as unknown as keyof typeof this.shape].optional]));\n\t\treturn Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n\t}\n\n\tpublic get required(): ObjectValidator<{ [Key in keyof I]-?: I[Key] }> {\n\t\tconst shape = Object.fromEntries(\n\t\t\tthis.keys.map((key) => {\n\t\t\t\tlet validator = this.shape[key as unknown as keyof typeof this.shape];\n\t\t\t\tif (validator instanceof UnionValidator) validator = validator.required;\n\t\t\t\treturn [key, validator];\n\t\t\t})\n\t\t);\n\t\treturn Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n\t}\n\n\tpublic extend<ET extends object>(schema: ObjectValidator<ET> | MappedObjectValidator<ET>): ObjectValidator<T & ET> {\n\t\tconst shape = { ...this.shape, ...(schema instanceof ObjectValidator ? schema.shape : schema) };\n\t\treturn Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n\t}\n\n\tpublic pick<K extends keyof I>(keys: readonly K[]): ObjectValidator<{ [Key in keyof Pick<I, K>]: I[Key] }> {\n\t\tconst shape = Object.fromEntries(\n\t\t\tkeys.filter((key) => this.keys.includes(key)).map((key) => [key, this.shape[key as unknown as keyof typeof this.shape]])\n\t\t);\n\t\treturn Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n\t}\n\n\tpublic omit<K extends keyof I>(keys: readonly K[]): ObjectValidator<{ [Key in keyof Omit<I, K>]: I[Key] }> {\n\t\tconst shape = Object.fromEntries(\n\t\t\tthis.keys.filter((key) => !keys.includes(key as any)).map((key) => [key, this.shape[key as unknown as keyof typeof this.shape]])\n\t\t);\n\t\treturn Reflect.construct(this.constructor, [shape, this.strategy, this.constraints]);\n\t}\n\n\tprotected override handle(value: unknown): Result<I, ValidationError | CombinedPropertyError> {\n\t\tconst typeOfValue = typeof value;\n\t\tif (typeOfValue !== 'object') {\n\t\t\treturn Result.err(new ValidationError('s.object(T)', `Expected the value to be an object, but received ${typeOfValue} instead`, value));\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn Result.err(new ValidationError('s.object(T)', 'Expected the value to not be null', value));\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn Result.err(new ValidationError('s.object(T)', 'Expected the value to not be an array', value));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(value as I);\n\t\t}\n\n\t\tfor (const predicate of Object.values(this.shape) as BaseValidator<any>[]) {\n\t\t\tpredicate.setParent(this.parent ?? value!);\n\t\t}\n\n\t\treturn this.handleStrategy(value as object);\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.shape, this.strategy, this.constraints]);\n\t}\n\n\tprivate handleIgnoreStrategy(value: object): Result<I, CombinedPropertyError> {\n\t\tconst errors: [PropertyKey, BaseError][] = [];\n\t\tconst finalObject = {} as I;\n\t\tconst inputEntries = new Map(Object.entries(value) as [keyof I, unknown][]);\n\n\t\tconst runPredicate = (key: keyof I, predicate: BaseValidator<unknown>) => {\n\t\t\tconst result = predicate.run(value[key as keyof object]);\n\n\t\t\tif (result.isOk()) {\n\t\t\t\tfinalObject[key] = result.value as I[keyof I];\n\t\t\t} else {\n\t\t\t\tconst error = result.error!;\n\t\t\t\terrors.push([key, error]);\n\t\t\t}\n\t\t};\n\n\t\tfor (const [key, predicate] of this.requiredKeys) {\n\t\t\tif (inputEntries.delete(key)) {\n\t\t\t\trunPredicate(key, predicate);\n\t\t\t} else {\n\t\t\t\terrors.push([key, new MissingPropertyError(key)]);\n\t\t\t}\n\t\t}\n\n\t\t// Run possibly undefined keys that also have defaults even if there are no more keys to process (this is necessary so we fill in those defaults)\n\t\tfor (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n\t\t\tinputEntries.delete(key);\n\t\t\trunPredicate(key, validator);\n\t\t}\n\n\t\t// Early exit if there are no more properties to validate in the object and there are errors to report\n\t\tif (inputEntries.size === 0) {\n\t\t\treturn errors.length === 0 //\n\t\t\t\t? Result.ok(finalObject)\n\t\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t\t}\n\n\t\t// In the event the remaining keys to check are less than the number of possible undefined keys, we check those\n\t\t// as it could yield a faster execution\n\t\tconst checkInputEntriesInsteadOfSchemaKeys = this.possiblyUndefinedKeys.size > inputEntries.size;\n\n\t\tif (checkInputEntriesInsteadOfSchemaKeys) {\n\t\t\tfor (const [key] of inputEntries) {\n\t\t\t\tconst predicate = this.possiblyUndefinedKeys.get(key);\n\n\t\t\t\tif (predicate) {\n\t\t\t\t\trunPredicate(key, predicate);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const [key, predicate] of this.possiblyUndefinedKeys) {\n\t\t\t\tif (inputEntries.delete(key)) {\n\t\t\t\t\trunPredicate(key, predicate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(finalObject)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n\n\tprivate handleStrictStrategy(value: object): Result<I, CombinedPropertyError> {\n\t\tconst errors: [PropertyKey, BaseError][] = [];\n\t\tconst finalResult = {} as I;\n\t\tconst inputEntries = new Map(Object.entries(value) as [keyof I, unknown][]);\n\n\t\tconst runPredicate = (key: keyof I, predicate: BaseValidator<unknown>) => {\n\t\t\tconst result = predicate.run(value[key as keyof object]);\n\n\t\t\tif (result.isOk()) {\n\t\t\t\tfinalResult[key] = result.value as I[keyof I];\n\t\t\t} else {\n\t\t\t\tconst error = result.error!;\n\t\t\t\terrors.push([key, error]);\n\t\t\t}\n\t\t};\n\n\t\tfor (const [key, predicate] of this.requiredKeys) {\n\t\t\tif (inputEntries.delete(key)) {\n\t\t\t\trunPredicate(key, predicate);\n\t\t\t} else {\n\t\t\t\terrors.push([key, new MissingPropertyError(key)]);\n\t\t\t}\n\t\t}\n\n\t\t// Run possibly undefined keys that also have defaults even if there are no more keys to process (this is necessary so we fill in those defaults)\n\t\tfor (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n\t\t\tinputEntries.delete(key);\n\t\t\trunPredicate(key, validator);\n\t\t}\n\n\t\tfor (const [key, predicate] of this.possiblyUndefinedKeys) {\n\t\t\t// All of these validators are assumed to be possibly undefined, so if we have gone through the entire object and there's still validators,\n\t\t\t// safe to assume we're done here\n\t\t\tif (inputEntries.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (inputEntries.delete(key)) {\n\t\t\t\trunPredicate(key, predicate);\n\t\t\t}\n\t\t}\n\n\t\tif (inputEntries.size !== 0) {\n\t\t\tfor (const [key, value] of inputEntries.entries()) {\n\t\t\t\terrors.push([key, new UnknownPropertyError(key, value)]);\n\t\t\t}\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(finalResult)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n\n\tprivate handlePassthroughStrategy(value: object): Result<I, CombinedPropertyError> {\n\t\tconst result = this.handleIgnoreStrategy(value);\n\t\treturn result.isErr() ? result : Result.ok({ ...value, ...result.value } as I);\n\t}\n}\n\nexport const enum ObjectValidatorStrategy {\n\tIgnore,\n\tStrict,\n\tPassthrough\n}\n","import type { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class PassthroughValidator<T extends any | unknown> extends BaseValidator<T> {\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn Result.ok(value as T);\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class RecordValidator<T> extends BaseValidator<Record<string, T>> {\n\tprivate readonly validator: BaseValidator<T>;\n\n\tpublic constructor(validator: BaseValidator<T>, constraints: readonly IConstraint<Record<string, T>>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validator = validator;\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validator, this.constraints]);\n\t}\n\n\tprotected handle(value: unknown): Result<Record<string, T>, ValidationError | CombinedPropertyError> {\n\t\tif (typeof value !== 'object') {\n\t\t\treturn Result.err(new ValidationError('s.record(T)', 'Expected an object', value));\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn Result.err(new ValidationError('s.record(T)', 'Expected the value to not be null', value));\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\treturn Result.err(new ValidationError('s.record(T)', 'Expected the value to not be an array', value));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(value as Record<string, T>);\n\t\t}\n\n\t\tconst errors: [string, BaseError][] = [];\n\t\tconst transformed: Record<string, T> = {};\n\n\t\tfor (const [key, val] of Object.entries(value!)) {\n\t\t\tconst result = this.validator.run(val);\n\t\t\tif (result.isOk()) transformed[key] = result.value;\n\t\t\telse errors.push([key, result.error!]);\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(transformed)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedError } from '../lib/errors/CombinedError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class SetValidator<T> extends BaseValidator<Set<T>> {\n\tprivate readonly validator: BaseValidator<T>;\n\n\tpublic constructor(validator: BaseValidator<T>, constraints: readonly IConstraint<Set<T>>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validator = validator;\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validator, this.constraints]);\n\t}\n\n\tprotected handle(values: unknown): Result<Set<T>, ValidationError | CombinedError> {\n\t\tif (!(values instanceof Set)) {\n\t\t\treturn Result.err(new ValidationError('s.set(T)', 'Expected a set', values));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(values);\n\t\t}\n\n\t\tconst errors: BaseError[] = [];\n\t\tconst transformed = new Set<T>();\n\n\t\tfor (const value of values) {\n\t\t\tconst result = this.validator.run(value);\n\t\t\tif (result.isOk()) transformed.add(result.value);\n\t\t\telse errors.push(result.error!);\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(transformed)\n\t\t\t: Result.err(new CombinedError(errors));\n\t}\n}\n","/**\n * [RFC-5322](https://datatracker.ietf.org/doc/html/rfc5322)\n * compliant {@link RegExp} to validate an email address\n *\n * @see https://stackoverflow.com/questions/201323/how-can-i-validate-an-email-address-using-a-regular-expression/201378#201378\n */\nconst accountRegex =\n\t/^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")$/;\n\n/**\n * Validates an email address string based on various checks:\n * - It must be a non nullish and non empty string\n * - It must include at least an `@` symbol`\n * - The account name may not exceed 64 characters\n * - The domain name may not exceed 255 characters\n * - The domain must include at least one `.` symbol\n * - Each part of the domain, split by `.` must not exceed 63 characters\n * - The email address must be [RFC-5322](https://datatracker.ietf.org/doc/html/rfc5322) compliant\n * @param email The email to validate\n * @returns `true` if the email is valid, `false` otherwise\n *\n * @remark Based on the following sources:\n * - `email-validator` by [manisharaan](https://github.com/manishsaraan) ([code](https://github.com/manishsaraan/email-validator/blob/master/index.js))\n * - [Comparing E-mail Address Validating Regular Expressions](http://fightingforalostcause.net/misc/2006/compare-email-regex.php)\n * - [Validating Email Addresses by Derrick Pallas](http://thedailywtf.com/Articles/Validating_Email_Addresses.aspx)\n * - [StackOverflow answer by bortzmeyer](http://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/201378#201378)\n * - [The wikipedia page on Email addresses](https://en.wikipedia.org/wiki/Email_address)\n */\nexport function validateEmail(email: string): boolean {\n\t// 1. Non-nullish and non-empty string check.\n\t//\n\t// If a nullish or empty email was provided then do an early exit\n\tif (!email) return false;\n\n\t// Find the location of the @ symbol:\n\tconst atIndex = email.indexOf('@');\n\n\t// 2. @ presence check.\n\t//\n\t// If the email does not have the @ symbol, it's automatically invalid:\n\tif (atIndex === -1) return false;\n\n\t// 3. <account> maximum length check.\n\t//\n\t// From <account>@<domain>, if <account> exceeds 64 characters, then the\n\t// position of the @ symbol is 64 or greater. In this case, the email is\n\t// invalid:\n\tif (atIndex > 64) return false;\n\n\tconst domainIndex = atIndex + 1;\n\n\t// 7.1. Duplicated @ symbol check.\n\t//\n\t// If there's a second @ symbol, the email is automatically invalid:\n\tif (email.includes('@', domainIndex)) return false;\n\n\t// 4. <domain> maximum length check.\n\t//\n\t// From <account>@<domain>, if <domain> exceeds 255 characters, then it\n\t// means that the amount of characters between the start of <domain> and the\n\t// end of the string is separated by 255 or more characters.\n\tif (email.length - domainIndex > 255) return false;\n\n\t// Find the location of the . symbol in <domain>:\n\tlet dotIndex = email.indexOf('.', domainIndex);\n\n\t// 5. <domain> dot (.) symbol check.\n\t//\n\t// From <account>@<domain>, if <domain> does not contain a dot (.) symbol,\n\t// then it means the domain is invalid.\n\tif (dotIndex === -1) return false;\n\n\t// 6. <domain> parts length.\n\t//\n\t// Assign a temporary variable to store the start of the last read domain\n\t// part, this would be at the start of <domain>.\n\t//\n\t// For a <domain> part to be correct, it must have at most, 63 characters.\n\t// We repeat this step for every sub-section of <domain> contained within\n\t// dot (.) symbols.\n\t//\n\t// The following step is a more optimized version of the following code:\n\t//\n\t// ```javascript\n\t// domain.split('.').some((part) => part.length > 63);\n\t// ```\n\tlet lastDotIndex = domainIndex;\n\tdo {\n\t\tif (dotIndex - lastDotIndex > 63) return false;\n\n\t\tlastDotIndex = dotIndex + 1;\n\t} while ((dotIndex = email.indexOf('.', lastDotIndex)) !== -1);\n\n\t// The loop iterates from the first to the n - 1 part, this line checks for\n\t// the last (n) part:\n\tif (email.length - lastDotIndex > 63) return false;\n\n\t// 7.2. Character checks.\n\t//\n\t// From <account>@<domain>:\n\t// - Extract the <account> part by slicing the input from start to the @\n\t//   character. Validate afterwards.\n\t// - Extract the <domain> part by slicing the input from the start of\n\t//   <domain>. Validate afterwards.\n\t//\n\t// Note: we inline the variables so <domain> isn't created unless the\n\t//       <account> check passes.\n\treturn accountRegex.test(email.slice(0, atIndex)) && validateEmailDomain(email.slice(domainIndex));\n}\n\nfunction validateEmailDomain(domain: string): boolean {\n\ttry {\n\t\treturn new URL(`http://${domain}`).hostname === domain;\n\t} catch {\n\t\treturn false;\n\t}\n}\n","/**\n * Code ported from https://github.com/nodejs/node/blob/5fad0b93667ffc6e4def52996b9529ac99b26319/lib/internal/net.js\n */\n\n// IPv4 Segment\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\nconst IPv4Reg = new RegExp(`^${v4Str}$`);\n\n// IPv6 Segment\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})';\nconst IPv6Reg = new RegExp(\n\t'^(' +\n\t\t`(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\n\t\t`(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\n\t\t`(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\n\t\t`(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\n\t\t`(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\n\t\t`(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\n\t\t`(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\n\t\t`(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\n\t\t')(%[0-9a-zA-Z-.:]{1,})?$'\n);\n\nexport function isIPv4(s: string): boolean {\n\treturn IPv4Reg.test(s);\n}\n\nexport function isIPv6(s: string): boolean {\n\treturn IPv6Reg.test(s);\n}\n\nexport function isIP(s: string): number {\n\tif (isIPv4(s)) return 4;\n\tif (isIPv6(s)) return 6;\n\treturn 0;\n}\n","export const phoneNumberRegex = /^((?:\\+|0{0,2})\\d{1,2}\\s?)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n\nexport function validatePhoneNumber(input: string) {\n\treturn phoneNumberRegex.test(input);\n}\n","import { inspect, type InspectOptionsStylized } from 'node:util';\nimport { customInspectSymbolStackLess } from './BaseError';\nimport { BaseConstraintError, type ConstraintErrorNames } from './BaseConstraintError';\n\nexport class MultiplePossibilitiesConstraintError<T = unknown> extends BaseConstraintError<T> {\n\tpublic readonly expected: readonly string[];\n\n\tpublic constructor(constraint: ConstraintErrorNames, message: string, given: T, expected: readonly string[]) {\n\t\tsuper(constraint, message, given);\n\t\tthis.expected = expected;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tconstraint: this.constraint,\n\t\t\tgiven: this.given,\n\t\t\texpected: this.expected\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst constraint = options.stylize(this.constraint, 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[MultiplePossibilitiesConstraintError: ${constraint}]`, 'special');\n\t\t}\n\n\t\tconst newOptions = { ...options, depth: options.depth === null ? null : options.depth! - 1 };\n\n\t\tconst verticalLine = options.stylize('|', 'undefined');\n\t\tconst padding = `\\n  ${verticalLine} `;\n\t\tconst given = inspect(this.given, newOptions).replace(/\\n/g, padding);\n\n\t\tconst header = `${options.stylize('MultiplePossibilitiesConstraintError', 'special')} > ${constraint}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\n\t\tconst expectedPadding = `\\n  ${verticalLine} - `;\n\t\tconst expectedBlock = `\\n  ${options.stylize('Expected any of the following:', 'string')}${expectedPadding}${this.expected\n\t\t\t.map((possible) => options.stylize(possible, 'boolean'))\n\t\t\t.join(expectedPadding)}`;\n\t\tconst givenBlock = `\\n  ${options.stylize('Received:', 'regexp')}${padding}${given}`;\n\t\treturn `${header}\\n  ${message}\\n${expectedBlock}\\n${givenBlock}`;\n\t}\n}\n","export function combinedErrorFn<P extends [...any], E extends Error>(...fns: ErrorFn<P, E>[]): ErrorFn<P, E> {\n\tswitch (fns.length) {\n\t\tcase 0:\n\t\t\treturn () => null;\n\t\tcase 1:\n\t\t\treturn fns[0];\n\t\tcase 2: {\n\t\t\tconst [fn0, fn1] = fns;\n\t\t\treturn (...params) => fn0(...params) || fn1(...params);\n\t\t}\n\t\tdefault: {\n\t\t\treturn (...params) => {\n\t\t\t\tfor (const fn of fns) {\n\t\t\t\t\tconst result = fn(...params);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport type ErrorFn<P extends [...any], E extends Error> = (...params: P) => E | null;\n","import { MultiplePossibilitiesConstraintError } from '../../lib/errors/MultiplePossibilitiesConstraintError';\nimport { combinedErrorFn, ErrorFn } from './common/combinedResultFn';\n\nexport type StringProtocol = `${string}:`;\n\nexport type StringDomain = `${string}.${string}`;\n\nexport interface UrlOptions {\n\tallowedProtocols?: StringProtocol[];\n\tallowedDomains?: StringDomain[];\n}\n\nexport function createUrlValidators(options?: UrlOptions) {\n\tconst fns: ErrorFn<[input: string, url: URL], MultiplePossibilitiesConstraintError<string>>[] = [];\n\n\tif (options?.allowedProtocols?.length) fns.push(allowedProtocolsFn(options.allowedProtocols));\n\tif (options?.allowedDomains?.length) fns.push(allowedDomainsFn(options.allowedDomains));\n\n\treturn combinedErrorFn(...fns);\n}\n\nfunction allowedProtocolsFn(allowedProtocols: StringProtocol[]) {\n\treturn (input: string, url: URL) =>\n\t\tallowedProtocols.includes(url.protocol as StringProtocol)\n\t\t\t? null\n\t\t\t: new MultiplePossibilitiesConstraintError('s.string.url', 'Invalid URL protocol', input, allowedProtocols);\n}\n\nfunction allowedDomainsFn(allowedDomains: StringDomain[]) {\n\treturn (input: string, url: URL) =>\n\t\tallowedDomains.includes(url.hostname as StringDomain)\n\t\t\t? null\n\t\t\t: new MultiplePossibilitiesConstraintError('s.string.url', 'Invalid URL domain', input, allowedDomains);\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { validateEmail } from './util/emailValidator';\nimport { isIP, isIPv4, isIPv6 } from './util/net';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\nimport { validatePhoneNumber } from './util/phoneValidator';\nimport { createUrlValidators } from './util/urlValidators';\n\nexport type StringConstraintName =\n\t| `s.string.${\n\t\t\t| `length${'LessThan' | 'LessThanOrEqual' | 'GreaterThan' | 'GreaterThanOrEqual' | 'Equal' | 'NotEqual'}`\n\t\t\t| 'regex'\n\t\t\t| 'url'\n\t\t\t| 'uuid'\n\t\t\t| 'email'\n\t\t\t| `ip${'v4' | 'v6' | ''}`\n\t\t\t| 'date'\n\t\t\t| 'phone'}`;\n\nexport type StringProtocol = `${string}:`;\n\nexport type StringDomain = `${string}.${string}`;\n\nexport interface UrlOptions {\n\tallowedProtocols?: StringProtocol[];\n\tallowedDomains?: StringDomain[];\n}\n\nexport type UUIDVersion = 1 | 3 | 4 | 5;\n\nexport interface StringUuidOptions {\n\tversion?: UUIDVersion | `${UUIDVersion}-${UUIDVersion}` | null;\n\tnullable?: boolean;\n}\n\nfunction stringLengthComparator(comparator: Comparator, name: StringConstraintName, expected: string, length: number): IConstraint<string> {\n\treturn {\n\t\trun(input: string) {\n\t\t\treturn comparator(input.length, length) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid string length', input, expected));\n\t\t}\n\t};\n}\n\nexport function stringLengthLessThan(length: number): IConstraint<string> {\n\tconst expected = `expected.length < ${length}`;\n\treturn stringLengthComparator(lessThan, 's.string.lengthLessThan', expected, length);\n}\n\nexport function stringLengthLessThanOrEqual(length: number): IConstraint<string> {\n\tconst expected = `expected.length <= ${length}`;\n\treturn stringLengthComparator(lessThanOrEqual, 's.string.lengthLessThanOrEqual', expected, length);\n}\n\nexport function stringLengthGreaterThan(length: number): IConstraint<string> {\n\tconst expected = `expected.length > ${length}`;\n\treturn stringLengthComparator(greaterThan, 's.string.lengthGreaterThan', expected, length);\n}\n\nexport function stringLengthGreaterThanOrEqual(length: number): IConstraint<string> {\n\tconst expected = `expected.length >= ${length}`;\n\treturn stringLengthComparator(greaterThanOrEqual, 's.string.lengthGreaterThanOrEqual', expected, length);\n}\n\nexport function stringLengthEqual(length: number): IConstraint<string> {\n\tconst expected = `expected.length === ${length}`;\n\treturn stringLengthComparator(equal, 's.string.lengthEqual', expected, length);\n}\n\nexport function stringLengthNotEqual(length: number): IConstraint<string> {\n\tconst expected = `expected.length !== ${length}`;\n\treturn stringLengthComparator(notEqual, 's.string.lengthNotEqual', expected, length);\n}\n\nexport function stringEmail(): IConstraint<string> {\n\treturn {\n\t\trun(input: string) {\n\t\t\treturn validateEmail(input)\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.string.email', 'Invalid email address', input, 'expected to be an email address'));\n\t\t}\n\t};\n}\n\nfunction stringRegexValidator(type: StringConstraintName, expected: string, regex: RegExp): IConstraint<string> {\n\treturn {\n\t\trun(input: string) {\n\t\t\treturn regex.test(input) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(type, 'Invalid string format', input, expected));\n\t\t}\n\t};\n}\n\nexport function stringUrl(options?: UrlOptions): IConstraint<string> {\n\tconst validatorFn = createUrlValidators(options);\n\treturn {\n\t\trun(input: string) {\n\t\t\tlet url: URL;\n\t\t\ttry {\n\t\t\t\turl = new URL(input);\n\t\t\t} catch {\n\t\t\t\treturn Result.err(new ExpectedConstraintError('s.string.url', 'Invalid URL', input, 'expected to match an URL'));\n\t\t\t}\n\n\t\t\tconst validatorFnResult = validatorFn(input, url);\n\t\t\tif (validatorFnResult === null) return Result.ok(input);\n\t\t\treturn Result.err(validatorFnResult);\n\t\t}\n\t};\n}\n\nexport function stringIp(version?: 4 | 6): IConstraint<string> {\n\tconst ipVersion = version ? (`v${version}` as const) : '';\n\tconst validatorFn = version === 4 ? isIPv4 : version === 6 ? isIPv6 : isIP;\n\n\tconst name = `s.string.ip${ipVersion}` as const;\n\tconst message = `Invalid IP${ipVersion} address`;\n\tconst expected = `expected to be an IP${ipVersion} address`;\n\treturn {\n\t\trun(input: string) {\n\t\t\treturn validatorFn(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, message, input, expected));\n\t\t}\n\t};\n}\n\nexport function stringRegex(regex: RegExp) {\n\treturn stringRegexValidator('s.string.regex', `expected ${regex}.test(expected) to be true`, regex);\n}\n\nexport function stringUuid({ version = 4, nullable = false }: StringUuidOptions = {}) {\n\tversion ??= '1-5';\n\tconst regex = new RegExp(\n\t\t`^(?:[0-9A-F]{8}-[0-9A-F]{4}-[${version}][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}${\n\t\t\tnullable ? '|00000000-0000-0000-0000-000000000000' : ''\n\t\t})$`,\n\t\t'i'\n\t);\n\tconst expected = `expected to match UUID${typeof version === 'number' ? `v${version}` : ` in range of ${version}`}`;\n\treturn stringRegexValidator('s.string.uuid', expected, regex);\n}\n\nexport function stringDate(): IConstraint<string> {\n\treturn {\n\t\trun(input: string) {\n\t\t\tconst time = Date.parse(input);\n\n\t\t\treturn Number.isNaN(time)\n\t\t\t\t? Result.err(\n\t\t\t\t\t\tnew ExpectedConstraintError(\n\t\t\t\t\t\t\t's.string.date',\n\t\t\t\t\t\t\t'Invalid date string',\n\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t'expected to be a valid date string (in the ISO 8601 or ECMA-262 format)'\n\t\t\t\t\t\t)\n\t\t\t\t  )\n\t\t\t\t: Result.ok(input);\n\t\t}\n\t};\n}\n\nexport function stringPhone(): IConstraint<string> {\n\treturn {\n\t\trun(input: string) {\n\t\t\treturn validatePhoneNumber(input)\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.string.phone', 'Invalid phone number', input, 'expected to be a phone number'));\n\t\t}\n\t};\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport {\n\tstringDate,\n\tstringEmail,\n\tstringIp,\n\tstringLengthEqual,\n\tstringLengthGreaterThan,\n\tstringLengthGreaterThanOrEqual,\n\tstringLengthLessThan,\n\tstringLengthLessThanOrEqual,\n\tstringLengthNotEqual,\n\tstringPhone,\n\tstringRegex,\n\tstringUrl,\n\tstringUuid,\n\tStringUuidOptions,\n\ttype UrlOptions\n} from '../constraints/StringConstraints';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class StringValidator<T extends string> extends BaseValidator<T> {\n\tpublic lengthLessThan(length: number): this {\n\t\treturn this.addConstraint(stringLengthLessThan(length) as IConstraint<T>);\n\t}\n\n\tpublic lengthLessThanOrEqual(length: number): this {\n\t\treturn this.addConstraint(stringLengthLessThanOrEqual(length) as IConstraint<T>);\n\t}\n\n\tpublic lengthGreaterThan(length: number): this {\n\t\treturn this.addConstraint(stringLengthGreaterThan(length) as IConstraint<T>);\n\t}\n\n\tpublic lengthGreaterThanOrEqual(length: number): this {\n\t\treturn this.addConstraint(stringLengthGreaterThanOrEqual(length) as IConstraint<T>);\n\t}\n\n\tpublic lengthEqual(length: number): this {\n\t\treturn this.addConstraint(stringLengthEqual(length) as IConstraint<T>);\n\t}\n\n\tpublic lengthNotEqual(length: number): this {\n\t\treturn this.addConstraint(stringLengthNotEqual(length) as IConstraint<T>);\n\t}\n\n\tpublic get email(): this {\n\t\treturn this.addConstraint(stringEmail() as IConstraint<T>);\n\t}\n\n\tpublic url(options?: UrlOptions): this {\n\t\treturn this.addConstraint(stringUrl(options) as IConstraint<T>);\n\t}\n\n\tpublic uuid(options?: StringUuidOptions): this {\n\t\treturn this.addConstraint(stringUuid(options) as IConstraint<T>);\n\t}\n\n\tpublic regex(regex: RegExp): this {\n\t\treturn this.addConstraint(stringRegex(regex) as IConstraint<T>);\n\t}\n\n\tpublic get date() {\n\t\treturn this.addConstraint(stringDate() as IConstraint<T>);\n\t}\n\n\tpublic get ipv4(): this {\n\t\treturn this.ip(4);\n\t}\n\n\tpublic get ipv6(): this {\n\t\treturn this.ip(6);\n\t}\n\n\tpublic ip(version?: 4 | 6): this {\n\t\treturn this.addConstraint(stringIp(version) as IConstraint<T>);\n\t}\n\n\tpublic phone(): this {\n\t\treturn this.addConstraint(stringPhone() as IConstraint<T>);\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn typeof value === 'string' //\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ValidationError('s.string', 'Expected a string primitive', value));\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class TupleValidator<T extends any[]> extends BaseValidator<[...T]> {\n\tprivate readonly validators: BaseValidator<[...T]>[] = [];\n\n\tpublic constructor(validators: BaseValidator<[...T]>[], constraints: readonly IConstraint<[...T]>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validators = validators;\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validators, this.constraints]);\n\t}\n\n\tprotected handle(values: unknown): Result<[...T], ValidationError | CombinedPropertyError> {\n\t\tif (!Array.isArray(values)) {\n\t\t\treturn Result.err(new ValidationError('s.tuple(T)', 'Expected an array', values));\n\t\t}\n\n\t\tif (values.length !== this.validators.length) {\n\t\t\treturn Result.err(new ValidationError('s.tuple(T)', `Expected an array of length ${this.validators.length}`, values));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(values as [...T]);\n\t\t}\n\n\t\tconst errors: [number, BaseError][] = [];\n\t\tconst transformed: T = [] as unknown as T;\n\n\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\tconst result = this.validators[i].run(values[i]);\n\t\t\tif (result.isOk()) transformed.push(result.value);\n\t\t\telse errors.push([i, result.error!]);\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(transformed)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n}\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport type { BaseError } from '../lib/errors/BaseError';\nimport { CombinedPropertyError } from '../lib/errors/CombinedPropertyError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class MapValidator<K, V> extends BaseValidator<Map<K, V>> {\n\tprivate readonly keyValidator: BaseValidator<K>;\n\tprivate readonly valueValidator: BaseValidator<V>;\n\n\tpublic constructor(keyValidator: BaseValidator<K>, valueValidator: BaseValidator<V>, constraints: readonly IConstraint<Map<K, V>>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.keyValidator = keyValidator;\n\t\tthis.valueValidator = valueValidator;\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.keyValidator, this.valueValidator, this.constraints]);\n\t}\n\n\tprotected handle(value: unknown): Result<Map<K, V>, ValidationError | CombinedPropertyError> {\n\t\tif (!(value instanceof Map)) {\n\t\t\treturn Result.err(new ValidationError('s.map(K, V)', 'Expected a map', value));\n\t\t}\n\n\t\tif (!this.shouldRunConstraints) {\n\t\t\treturn Result.ok(value);\n\t\t}\n\n\t\tconst errors: [string, BaseError][] = [];\n\t\tconst transformed = new Map<K, V>();\n\n\t\tfor (const [key, val] of value.entries()) {\n\t\t\tconst keyResult = this.keyValidator.run(key);\n\t\t\tconst valueResult = this.valueValidator.run(val);\n\t\t\tconst { length } = errors;\n\t\t\tif (keyResult.isErr()) errors.push([key, keyResult.error]);\n\t\t\tif (valueResult.isErr()) errors.push([key, valueResult.error]);\n\t\t\tif (errors.length === length) transformed.set(keyResult.value!, valueResult.value!);\n\t\t}\n\n\t\treturn errors.length === 0 //\n\t\t\t? Result.ok(transformed)\n\t\t\t: Result.err(new CombinedPropertyError(errors));\n\t}\n}\n","import type { Result } from '../lib/Result';\nimport type { IConstraint, Unwrap } from '../type-exports';\nimport { BaseValidator, ValidatorError } from './imports';\n\nexport class LazyValidator<T extends BaseValidator<unknown>, R = Unwrap<T>> extends BaseValidator<R> {\n\tprivate readonly validator: (value: unknown) => T;\n\n\tpublic constructor(validator: (value: unknown) => T, constraints: readonly IConstraint<R>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.validator = validator;\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.validator, this.constraints]);\n\t}\n\n\tprotected handle(values: unknown): Result<R, ValidatorError> {\n\t\treturn this.validator(values).run(values) as Result<R, ValidatorError>;\n\t}\n}\n","import type { InspectOptionsStylized } from 'node:util';\nimport { BaseError, customInspectSymbolStackLess } from './BaseError';\n\nexport class UnknownEnumValueError extends BaseError {\n\tpublic readonly value: string | number;\n\tpublic readonly enumKeys: string[];\n\tpublic readonly enumMappings: Map<string | number, string | number>;\n\n\tpublic constructor(value: string | number, keys: string[], enumMappings: Map<string | number, string | number>) {\n\t\tsuper('Expected the value to be one of the following enum values:');\n\n\t\tthis.value = value;\n\t\tthis.enumKeys = keys;\n\t\tthis.enumMappings = enumMappings;\n\t}\n\n\tpublic toJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tvalue: this.value,\n\t\t\tenumKeys: this.enumKeys,\n\t\t\tenumMappings: [...this.enumMappings.entries()]\n\t\t};\n\t}\n\n\tprotected [customInspectSymbolStackLess](depth: number, options: InspectOptionsStylized): string {\n\t\tconst value = options.stylize(this.value.toString(), 'string');\n\t\tif (depth < 0) {\n\t\t\treturn options.stylize(`[UnknownEnumValueError: ${value}]`, 'special');\n\t\t}\n\n\t\tconst padding = `\\n  ${options.stylize('|', 'undefined')} `;\n\t\tconst pairs = this.enumKeys\n\t\t\t.map((key) => {\n\t\t\t\tconst enumValue = this.enumMappings.get(key)!;\n\t\t\t\treturn `${options.stylize(key, 'string')} or ${options.stylize(\n\t\t\t\t\tenumValue.toString(),\n\t\t\t\t\ttypeof enumValue === 'number' ? 'number' : 'string'\n\t\t\t\t)}`;\n\t\t\t})\n\t\t\t.join(padding);\n\n\t\tconst header = `${options.stylize('UnknownEnumValueError', 'special')} > ${value}`;\n\t\tconst message = options.stylize(this.message, 'regexp');\n\t\tconst pairsBlock = `${padding}${pairs}`;\n\t\treturn `${header}\\n  ${message}\\n${pairsBlock}`;\n\t}\n}\n","import { UnknownEnumValueError } from '../lib/errors/UnknownEnumValueError';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class NativeEnumValidator<T extends NativeEnumLike> extends BaseValidator<T[keyof T]> {\n\tpublic readonly enumShape: T;\n\tpublic readonly hasNumericElements: boolean = false;\n\tprivate readonly enumKeys: string[];\n\tprivate readonly enumMapping = new Map<string | number, T[keyof T]>();\n\n\tpublic constructor(enumShape: T) {\n\t\tsuper();\n\t\tthis.enumShape = enumShape;\n\n\t\tthis.enumKeys = Object.keys(enumShape).filter((key) => {\n\t\t\treturn typeof enumShape[enumShape[key]] !== 'number';\n\t\t});\n\n\t\tfor (const key of this.enumKeys) {\n\t\t\tconst enumValue = enumShape[key] as T[keyof T];\n\n\t\t\tthis.enumMapping.set(key, enumValue);\n\t\t\tthis.enumMapping.set(enumValue, enumValue);\n\n\t\t\tif (typeof enumValue === 'number') {\n\t\t\t\tthis.hasNumericElements = true;\n\t\t\t\tthis.enumMapping.set(`${enumValue}`, enumValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected override handle(value: unknown): Result<T[keyof T], ValidationError | UnknownEnumValueError> {\n\t\tconst typeOfValue = typeof value;\n\n\t\tif (typeOfValue === 'number') {\n\t\t\tif (!this.hasNumericElements) {\n\t\t\t\treturn Result.err(new ValidationError('s.nativeEnum(T)', 'Expected the value to be a string', value));\n\t\t\t}\n\t\t} else if (typeOfValue !== 'string') {\n\t\t\t// typeOfValue !== 'number' is implied here\n\t\t\treturn Result.err(new ValidationError('s.nativeEnum(T)', 'Expected the value to be a string or number', value));\n\t\t}\n\n\t\tconst casted = value as string | number;\n\n\t\tconst possibleEnumValue = this.enumMapping.get(casted);\n\n\t\treturn typeof possibleEnumValue === 'undefined'\n\t\t\t? Result.err(new UnknownEnumValueError(casted, this.enumKeys, this.enumMapping))\n\t\t\t: Result.ok(possibleEnumValue);\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.enumShape]);\n\t}\n}\n\nexport interface NativeEnumLike {\n\t[key: string]: string | number;\n\t[key: number]: string;\n}\n","import { ExpectedConstraintError } from '../lib/errors/ExpectedConstraintError';\nimport { Result } from '../lib/Result';\nimport type { IConstraint } from './base/IConstraint';\nimport { Comparator, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notEqual } from './util/operators';\nimport type { TypedArray } from './util/typedArray';\n\nexport type TypedArrayConstraintName = `s.typedArray(T).${'byteLength' | 'length'}${\n\t| 'LessThan'\n\t| 'LessThanOrEqual'\n\t| 'GreaterThan'\n\t| 'GreaterThanOrEqual'\n\t| 'Equal'\n\t| 'NotEqual'\n\t| 'Range'\n\t| 'RangeInclusive'\n\t| 'RangeExclusive'}`;\n\nfunction typedArrayByteLengthComparator<T extends TypedArray>(\n\tcomparator: Comparator,\n\tname: TypedArrayConstraintName,\n\texpected: string,\n\tlength: number\n): IConstraint<T> {\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn comparator(input.byteLength, length) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid Typed Array byte length', input, expected));\n\t\t}\n\t};\n}\n\nexport function typedArrayByteLengthLessThan<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength < ${value}`;\n\treturn typedArrayByteLengthComparator(lessThan, 's.typedArray(T).byteLengthLessThan', expected, value);\n}\n\nexport function typedArrayByteLengthLessThanOrEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength <= ${value}`;\n\treturn typedArrayByteLengthComparator(lessThanOrEqual, 's.typedArray(T).byteLengthLessThanOrEqual', expected, value);\n}\n\nexport function typedArrayByteLengthGreaterThan<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength > ${value}`;\n\treturn typedArrayByteLengthComparator(greaterThan, 's.typedArray(T).byteLengthGreaterThan', expected, value);\n}\n\nexport function typedArrayByteLengthGreaterThanOrEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength >= ${value}`;\n\treturn typedArrayByteLengthComparator(greaterThanOrEqual, 's.typedArray(T).byteLengthGreaterThanOrEqual', expected, value);\n}\n\nexport function typedArrayByteLengthEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength === ${value}`;\n\treturn typedArrayByteLengthComparator(equal, 's.typedArray(T).byteLengthEqual', expected, value);\n}\n\nexport function typedArrayByteLengthNotEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.byteLength !== ${value}`;\n\treturn typedArrayByteLengthComparator(notEqual, 's.typedArray(T).byteLengthNotEqual', expected, value);\n}\n\nexport function typedArrayByteLengthRange<T extends TypedArray>(start: number, endBefore: number): IConstraint<T> {\n\tconst expected = `expected.byteLength >= ${start} && expected.byteLength < ${endBefore}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.byteLength >= start && input.byteLength < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.typedArray(T).byteLengthRange', 'Invalid Typed Array byte length', input, expected));\n\t\t}\n\t};\n}\n\nexport function typedArrayByteLengthRangeInclusive<T extends TypedArray>(start: number, end: number) {\n\tconst expected = `expected.byteLength >= ${start} && expected.byteLength <= ${end}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.byteLength >= start && input.byteLength <= end //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(\n\t\t\t\t\t\tnew ExpectedConstraintError('s.typedArray(T).byteLengthRangeInclusive', 'Invalid Typed Array byte length', input, expected)\n\t\t\t\t  );\n\t\t}\n\t};\n}\n\nexport function typedArrayByteLengthRangeExclusive<T extends TypedArray>(startAfter: number, endBefore: number): IConstraint<T> {\n\tconst expected = `expected.byteLength > ${startAfter} && expected.byteLength < ${endBefore}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.byteLength > startAfter && input.byteLength < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(\n\t\t\t\t\t\tnew ExpectedConstraintError('s.typedArray(T).byteLengthRangeExclusive', 'Invalid Typed Array byte length', input, expected)\n\t\t\t\t  );\n\t\t}\n\t};\n}\n\nfunction typedArrayLengthComparator<T extends TypedArray>(\n\tcomparator: Comparator,\n\tname: TypedArrayConstraintName,\n\texpected: string,\n\tlength: number\n): IConstraint<T> {\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn comparator(input.length, length) //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError(name, 'Invalid Typed Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function typedArrayLengthLessThan<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length < ${value}`;\n\treturn typedArrayLengthComparator(lessThan, 's.typedArray(T).lengthLessThan', expected, value);\n}\n\nexport function typedArrayLengthLessThanOrEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length <= ${value}`;\n\treturn typedArrayLengthComparator(lessThanOrEqual, 's.typedArray(T).lengthLessThanOrEqual', expected, value);\n}\n\nexport function typedArrayLengthGreaterThan<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length > ${value}`;\n\treturn typedArrayLengthComparator(greaterThan, 's.typedArray(T).lengthGreaterThan', expected, value);\n}\n\nexport function typedArrayLengthGreaterThanOrEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length >= ${value}`;\n\treturn typedArrayLengthComparator(greaterThanOrEqual, 's.typedArray(T).lengthGreaterThanOrEqual', expected, value);\n}\n\nexport function typedArrayLengthEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length === ${value}`;\n\treturn typedArrayLengthComparator(equal, 's.typedArray(T).lengthEqual', expected, value);\n}\n\nexport function typedArrayLengthNotEqual<T extends TypedArray>(value: number): IConstraint<T> {\n\tconst expected = `expected.length !== ${value}`;\n\treturn typedArrayLengthComparator(notEqual, 's.typedArray(T).lengthNotEqual', expected, value);\n}\n\nexport function typedArrayLengthRange<T extends TypedArray>(start: number, endBefore: number): IConstraint<T> {\n\tconst expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.length >= start && input.length < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.typedArray(T).lengthRange', 'Invalid Typed Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function typedArrayLengthRangeInclusive<T extends TypedArray>(start: number, end: number): IConstraint<T> {\n\tconst expected = `expected.length >= ${start} && expected.length <= ${end}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.length >= start && input.length <= end //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.typedArray(T).lengthRangeInclusive', 'Invalid Typed Array length', input, expected));\n\t\t}\n\t};\n}\n\nexport function typedArrayLengthRangeExclusive<T extends TypedArray>(startAfter: number, endBefore: number): IConstraint<T> {\n\tconst expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n\treturn {\n\t\trun(input: T) {\n\t\t\treturn input.length > startAfter && input.length < endBefore //\n\t\t\t\t? Result.ok(input)\n\t\t\t\t: Result.err(new ExpectedConstraintError('s.typedArray(T).lengthRangeExclusive', 'Invalid Typed Array length', input, expected));\n\t\t}\n\t};\n}\n","const vowels = ['a', 'e', 'i', 'o', 'u'];\n\nexport const aOrAn = (word: string) => {\n\treturn `${vowels.includes(word[0].toLowerCase()) ? 'an' : 'a'} ${word}`;\n};\n","export type TypedArray =\n\t| Int8Array\n\t| Uint8Array\n\t| Uint8ClampedArray\n\t| Int16Array\n\t| Uint16Array\n\t| Int32Array\n\t| Uint32Array\n\t| Float32Array\n\t| Float64Array\n\t| BigInt64Array\n\t| BigUint64Array;\n\nexport const TypedArrays = {\n\tInt8Array: (x: unknown): x is Int8Array => x instanceof Int8Array,\n\tUint8Array: (x: unknown): x is Uint8Array => x instanceof Uint8Array,\n\tUint8ClampedArray: (x: unknown): x is Uint8ClampedArray => x instanceof Uint8ClampedArray,\n\tInt16Array: (x: unknown): x is Int16Array => x instanceof Int16Array,\n\tUint16Array: (x: unknown): x is Uint16Array => x instanceof Uint16Array,\n\tInt32Array: (x: unknown): x is Int32Array => x instanceof Int32Array,\n\tUint32Array: (x: unknown): x is Uint32Array => x instanceof Uint32Array,\n\tFloat32Array: (x: unknown): x is Float32Array => x instanceof Float32Array,\n\tFloat64Array: (x: unknown): x is Float64Array => x instanceof Float64Array,\n\tBigInt64Array: (x: unknown): x is BigInt64Array => x instanceof BigInt64Array,\n\tBigUint64Array: (x: unknown): x is BigUint64Array => x instanceof BigUint64Array,\n\tTypedArray: (x: unknown): x is TypedArray => ArrayBuffer.isView(x) && !(x instanceof DataView)\n} as const;\n\nexport type TypedArrayName = keyof typeof TypedArrays;\n","import type { IConstraint } from '../constraints/base/IConstraint';\nimport {\n\ttypedArrayByteLengthEqual,\n\ttypedArrayByteLengthGreaterThan,\n\ttypedArrayByteLengthGreaterThanOrEqual,\n\ttypedArrayByteLengthLessThan,\n\ttypedArrayByteLengthLessThanOrEqual,\n\ttypedArrayByteLengthNotEqual,\n\ttypedArrayByteLengthRange,\n\ttypedArrayByteLengthRangeExclusive,\n\ttypedArrayByteLengthRangeInclusive,\n\ttypedArrayLengthEqual,\n\ttypedArrayLengthGreaterThan,\n\ttypedArrayLengthGreaterThanOrEqual,\n\ttypedArrayLengthLessThan,\n\ttypedArrayLengthLessThanOrEqual,\n\ttypedArrayLengthNotEqual,\n\ttypedArrayLengthRange,\n\ttypedArrayLengthRangeExclusive,\n\ttypedArrayLengthRangeInclusive\n} from '../constraints/TypedArrayLengthConstraints';\nimport { aOrAn } from '../constraints/util/common/vowels';\nimport { TypedArray, TypedArrayName, TypedArrays } from '../constraints/util/typedArray';\nimport { ValidationError } from '../lib/errors/ValidationError';\nimport { Result } from '../lib/Result';\nimport { BaseValidator } from './imports';\n\nexport class TypedArrayValidator<T extends TypedArray> extends BaseValidator<T> {\n\tprivate readonly type: TypedArrayName;\n\n\tpublic constructor(type: TypedArrayName, constraints: readonly IConstraint<T>[] = []) {\n\t\tsuper(constraints);\n\t\tthis.type = type;\n\t}\n\n\tpublic byteLengthLessThan(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthLessThan(length));\n\t}\n\n\tpublic byteLengthLessThanOrEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthLessThanOrEqual(length));\n\t}\n\n\tpublic byteLengthGreaterThan(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthGreaterThan(length));\n\t}\n\n\tpublic byteLengthGreaterThanOrEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthGreaterThanOrEqual(length));\n\t}\n\n\tpublic byteLengthEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthEqual(length));\n\t}\n\n\tpublic byteLengthNotEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthNotEqual(length));\n\t}\n\n\tpublic byteLengthRange(start: number, endBefore: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthRange(start, endBefore));\n\t}\n\n\tpublic byteLengthRangeInclusive(startAt: number, endAt: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthRangeInclusive(startAt, endAt) as IConstraint<T>);\n\t}\n\n\tpublic byteLengthRangeExclusive(startAfter: number, endBefore: number) {\n\t\treturn this.addConstraint(typedArrayByteLengthRangeExclusive(startAfter, endBefore));\n\t}\n\n\tpublic lengthLessThan(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthLessThan(length));\n\t}\n\n\tpublic lengthLessThanOrEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthLessThanOrEqual(length));\n\t}\n\n\tpublic lengthGreaterThan(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthGreaterThan(length));\n\t}\n\n\tpublic lengthGreaterThanOrEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthGreaterThanOrEqual(length));\n\t}\n\n\tpublic lengthEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthEqual(length));\n\t}\n\n\tpublic lengthNotEqual(length: number) {\n\t\treturn this.addConstraint(typedArrayLengthNotEqual(length));\n\t}\n\n\tpublic lengthRange(start: number, endBefore: number) {\n\t\treturn this.addConstraint(typedArrayLengthRange(start, endBefore));\n\t}\n\n\tpublic lengthRangeInclusive(startAt: number, endAt: number) {\n\t\treturn this.addConstraint(typedArrayLengthRangeInclusive(startAt, endAt));\n\t}\n\n\tpublic lengthRangeExclusive(startAfter: number, endBefore: number) {\n\t\treturn this.addConstraint(typedArrayLengthRangeExclusive(startAfter, endBefore));\n\t}\n\n\tprotected override clone(): this {\n\t\treturn Reflect.construct(this.constructor, [this.type, this.constraints]);\n\t}\n\n\tprotected handle(value: unknown): Result<T, ValidationError> {\n\t\treturn TypedArrays[this.type](value)\n\t\t\t? Result.ok(value as T)\n\t\t\t: Result.err(new ValidationError('s.typedArray', `Expected ${aOrAn(this.type)}`, value));\n\t}\n}\n","import type { TypedArray, TypedArrayName } from '../constraints/util/typedArray';\nimport type { Unwrap, UnwrapTuple } from '../lib/util-types';\nimport {\n\tArrayValidator,\n\tBaseValidator,\n\tBigIntValidator,\n\tBooleanValidator,\n\tDateValidator,\n\tInstanceValidator,\n\tLiteralValidator,\n\tMapValidator,\n\tNeverValidator,\n\tNullishValidator,\n\tNumberValidator,\n\tObjectValidator,\n\tPassthroughValidator,\n\tRecordValidator,\n\tSetValidator,\n\tStringValidator,\n\tTupleValidator,\n\tUnionValidator\n} from '../validators/imports';\nimport { LazyValidator } from '../validators/LazyValidator';\nimport { NativeEnumLike, NativeEnumValidator } from '../validators/NativeEnumValidator';\nimport { TypedArrayValidator } from '../validators/TypedArrayValidator';\nimport type { Constructor, MappedObjectValidator } from './util-types';\n\nexport class Shapes {\n\tpublic get string() {\n\t\treturn new StringValidator();\n\t}\n\n\tpublic get number() {\n\t\treturn new NumberValidator();\n\t}\n\n\tpublic get bigint() {\n\t\treturn new BigIntValidator();\n\t}\n\n\tpublic get boolean() {\n\t\treturn new BooleanValidator();\n\t}\n\n\tpublic get date() {\n\t\treturn new DateValidator();\n\t}\n\n\tpublic object<T extends object>(shape: MappedObjectValidator<T>) {\n\t\treturn new ObjectValidator<T>(shape);\n\t}\n\n\tpublic get undefined() {\n\t\treturn this.literal(undefined);\n\t}\n\n\tpublic get null() {\n\t\treturn this.literal(null);\n\t}\n\n\tpublic get nullish() {\n\t\treturn new NullishValidator();\n\t}\n\n\tpublic get any() {\n\t\treturn new PassthroughValidator<any>();\n\t}\n\n\tpublic get unknown() {\n\t\treturn new PassthroughValidator<unknown>();\n\t}\n\n\tpublic get never() {\n\t\treturn new NeverValidator();\n\t}\n\n\tpublic enum<T>(...values: readonly T[]) {\n\t\treturn this.union(...values.map((value) => this.literal(value)));\n\t}\n\n\tpublic nativeEnum<T extends NativeEnumLike>(enumShape: T): NativeEnumValidator<T> {\n\t\treturn new NativeEnumValidator(enumShape);\n\t}\n\n\tpublic literal<T>(value: T): BaseValidator<T> {\n\t\tif (value instanceof Date) return this.date.equal(value) as unknown as BaseValidator<T>;\n\t\treturn new LiteralValidator(value);\n\t}\n\n\tpublic instance<T>(expected: Constructor<T>): InstanceValidator<T> {\n\t\treturn new InstanceValidator(expected);\n\t}\n\n\tpublic union<T extends [...BaseValidator<any>[]]>(...validators: [...T]): UnionValidator<Unwrap<T[number]>> {\n\t\treturn new UnionValidator(validators);\n\t}\n\n\tpublic array<T>(validator: BaseValidator<T[][number]>): ArrayValidator<T[], T[][number]>;\n\tpublic array<T extends unknown[]>(validator: BaseValidator<T[number]>): ArrayValidator<T, T[number]>;\n\tpublic array<T extends unknown[]>(validator: BaseValidator<T[number]>) {\n\t\treturn new ArrayValidator(validator);\n\t}\n\n\tpublic typedArray<T extends TypedArray>(type: TypedArrayName = 'TypedArray') {\n\t\treturn new TypedArrayValidator<T>(type);\n\t}\n\n\tpublic get int8Array() {\n\t\treturn this.typedArray<Int8Array>('Int8Array');\n\t}\n\n\tpublic get uint8Array() {\n\t\treturn this.typedArray<Uint8Array>('Uint8Array');\n\t}\n\n\tpublic get uint8ClampedArray() {\n\t\treturn this.typedArray<Uint8ClampedArray>('Uint8ClampedArray');\n\t}\n\n\tpublic get int16Array() {\n\t\treturn this.typedArray<Int16Array>('Int16Array');\n\t}\n\n\tpublic get uint16Array() {\n\t\treturn this.typedArray<Uint16Array>('Uint16Array');\n\t}\n\n\tpublic get int32Array() {\n\t\treturn this.typedArray<Int32Array>('Int32Array');\n\t}\n\n\tpublic get uint32Array() {\n\t\treturn this.typedArray<Uint32Array>('Uint32Array');\n\t}\n\n\tpublic get float32Array() {\n\t\treturn this.typedArray<Float32Array>('Float32Array');\n\t}\n\n\tpublic get float64Array() {\n\t\treturn this.typedArray<Float64Array>('Float64Array');\n\t}\n\n\tpublic get bigInt64Array() {\n\t\treturn this.typedArray<BigInt64Array>('BigInt64Array');\n\t}\n\n\tpublic get bigUint64Array() {\n\t\treturn this.typedArray<BigUint64Array>('BigUint64Array');\n\t}\n\n\tpublic tuple<T extends [...BaseValidator<any>[]]>(validators: [...T]): TupleValidator<UnwrapTuple<T>> {\n\t\treturn new TupleValidator(validators);\n\t}\n\n\tpublic set<T>(validator: BaseValidator<T>) {\n\t\treturn new SetValidator(validator);\n\t}\n\n\tpublic record<T>(validator: BaseValidator<T>) {\n\t\treturn new RecordValidator(validator);\n\t}\n\n\tpublic map<T, U>(keyValidator: BaseValidator<T>, valueValidator: BaseValidator<U>) {\n\t\treturn new MapValidator(keyValidator, valueValidator);\n\t}\n\n\tpublic lazy<T extends BaseValidator<unknown>>(validator: (value: unknown) => T) {\n\t\treturn new LazyValidator(validator);\n\t}\n}\n","import { Shapes } from './lib/Shapes';\n\nexport const s = new Shapes();\n\nexport * from './lib/configs';\nexport * from './lib/errors/BaseError';\nexport * from './lib/errors/CombinedError';\nexport * from './lib/errors/CombinedPropertyError';\nexport * from './lib/errors/ExpectedConstraintError';\nexport * from './lib/errors/ExpectedValidationError';\nexport * from './lib/errors/MissingPropertyError';\nexport * from './lib/errors/MultiplePossibilitiesConstraintError';\nexport * from './lib/errors/UnknownEnumValueError';\nexport * from './lib/errors/UnknownPropertyError';\nexport * from './lib/errors/ValidationError';\nexport * from './lib/Result';\nexport * from './type-exports';\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}