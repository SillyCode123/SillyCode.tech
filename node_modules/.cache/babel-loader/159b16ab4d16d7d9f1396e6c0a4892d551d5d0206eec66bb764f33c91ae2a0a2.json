{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--) if (decorator = decorators[i]) result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ActionRowBuilder: () => ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin: () => ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase: () => ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin: () => ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithChoicesAndAutocompleteMixin: () => ApplicationCommandOptionWithChoicesAndAutocompleteMixin,\n  BaseSelectMenuBuilder: () => BaseSelectMenuBuilder,\n  ButtonBuilder: () => ButtonBuilder,\n  ChannelSelectMenuBuilder: () => ChannelSelectMenuBuilder,\n  ComponentAssertions: () => Assertions_exports2,\n  ComponentBuilder: () => ComponentBuilder,\n  ContextMenuCommandAssertions: () => Assertions_exports6,\n  ContextMenuCommandBuilder: () => ContextMenuCommandBuilder,\n  EmbedAssertions: () => Assertions_exports,\n  EmbedBuilder: () => EmbedBuilder,\n  Faces: () => Faces,\n  MentionableSelectMenuBuilder: () => MentionableSelectMenuBuilder,\n  ModalAssertions: () => Assertions_exports4,\n  ModalBuilder: () => ModalBuilder,\n  RoleSelectMenuBuilder: () => RoleSelectMenuBuilder,\n  SelectMenuBuilder: () => StringSelectMenuBuilder,\n  SelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  SharedNameAndDescription: () => SharedNameAndDescription,\n  SharedSlashCommandOptions: () => SharedSlashCommandOptions,\n  SlashCommandAssertions: () => Assertions_exports5,\n  SlashCommandAttachmentOption: () => SlashCommandAttachmentOption,\n  SlashCommandBooleanOption: () => SlashCommandBooleanOption,\n  SlashCommandBuilder: () => SlashCommandBuilder,\n  SlashCommandChannelOption: () => SlashCommandChannelOption,\n  SlashCommandIntegerOption: () => SlashCommandIntegerOption,\n  SlashCommandMentionableOption: () => SlashCommandMentionableOption,\n  SlashCommandNumberOption: () => SlashCommandNumberOption,\n  SlashCommandRoleOption: () => SlashCommandRoleOption,\n  SlashCommandStringOption: () => SlashCommandStringOption,\n  SlashCommandSubcommandBuilder: () => SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder: () => SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption: () => SlashCommandUserOption,\n  StringSelectMenuBuilder: () => StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  TextInputAssertions: () => Assertions_exports3,\n  TextInputBuilder: () => TextInputBuilder,\n  TimestampStyles: () => TimestampStyles,\n  UserSelectMenuBuilder: () => UserSelectMenuBuilder,\n  blockQuote: () => blockQuote,\n  bold: () => bold,\n  channelLink: () => channelLink,\n  channelMention: () => channelMention,\n  chatInputApplicationCommandMention: () => chatInputApplicationCommandMention,\n  codeBlock: () => codeBlock,\n  createComponentBuilder: () => createComponentBuilder,\n  disableValidators: () => disableValidators,\n  embedLength: () => embedLength,\n  enableValidators: () => enableValidators,\n  formatEmoji: () => formatEmoji,\n  hideLinkEmbed: () => hideLinkEmbed,\n  hyperlink: () => hyperlink,\n  inlineCode: () => inlineCode,\n  isValidationEnabled: () => isValidationEnabled,\n  italic: () => italic,\n  messageLink: () => messageLink,\n  normalizeArray: () => normalizeArray,\n  quote: () => quote,\n  roleMention: () => roleMention,\n  spoiler: () => spoiler,\n  strikethrough: () => strikethrough,\n  time: () => time,\n  underscore: () => underscore,\n  userMention: () => userMention,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/messages/embed/Assertions.ts\nvar Assertions_exports = {};\n__export(Assertions_exports, {\n  RGBPredicate: () => RGBPredicate,\n  authorNamePredicate: () => authorNamePredicate,\n  colorPredicate: () => colorPredicate,\n  descriptionPredicate: () => descriptionPredicate,\n  embedAuthorPredicate: () => embedAuthorPredicate,\n  embedFieldPredicate: () => embedFieldPredicate,\n  embedFieldsArrayPredicate: () => embedFieldsArrayPredicate,\n  embedFooterPredicate: () => embedFooterPredicate,\n  fieldInlinePredicate: () => fieldInlinePredicate,\n  fieldLengthPredicate: () => fieldLengthPredicate,\n  fieldNamePredicate: () => fieldNamePredicate,\n  fieldValuePredicate: () => fieldValuePredicate,\n  footerTextPredicate: () => footerTextPredicate,\n  imageURLPredicate: () => imageURLPredicate,\n  timestampPredicate: () => timestampPredicate,\n  titlePredicate: () => titlePredicate,\n  urlPredicate: () => urlPredicate,\n  validateFieldLength: () => validateFieldLength\n});\nvar import_shapeshift = require(\"@sapphire/shapeshift\");\n\n// src/util/validation.ts\nvar validate = true;\nvar enableValidators = /* @__PURE__ */__name(() => validate = true, \"enableValidators\");\nvar disableValidators = /* @__PURE__ */__name(() => validate = false, \"disableValidators\");\nvar isValidationEnabled = /* @__PURE__ */__name(() => validate, \"isValidationEnabled\");\n\n// src/messages/embed/Assertions.ts\nvar fieldNamePredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(256).setValidationEnabled(isValidationEnabled);\nvar fieldValuePredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(1024).setValidationEnabled(isValidationEnabled);\nvar fieldInlinePredicate = import_shapeshift.s.boolean.optional;\nvar embedFieldPredicate = import_shapeshift.s.object({\n  name: fieldNamePredicate,\n  value: fieldValuePredicate,\n  inline: fieldInlinePredicate\n}).setValidationEnabled(isValidationEnabled);\nvar embedFieldsArrayPredicate = embedFieldPredicate.array.setValidationEnabled(isValidationEnabled);\nvar fieldLengthPredicate = import_shapeshift.s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateFieldLength(amountAdding, fields) {\n  fieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n__name(validateFieldLength, \"validateFieldLength\");\nvar authorNamePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\nvar imageURLPredicate = import_shapeshift.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\", \"attachment:\"]\n}).nullish.setValidationEnabled(isValidationEnabled);\nvar urlPredicate = import_shapeshift.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\"]\n}).nullish.setValidationEnabled(isValidationEnabled);\nvar embedAuthorPredicate = import_shapeshift.s.object({\n  name: authorNamePredicate,\n  iconURL: imageURLPredicate,\n  url: urlPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar RGBPredicate = import_shapeshift.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(255).setValidationEnabled(isValidationEnabled);\nvar colorPredicate = import_shapeshift.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(16777215).or(import_shapeshift.s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable.setValidationEnabled(isValidationEnabled);\nvar descriptionPredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable.setValidationEnabled(isValidationEnabled);\nvar footerTextPredicate = import_shapeshift.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable.setValidationEnabled(isValidationEnabled);\nvar embedFooterPredicate = import_shapeshift.s.object({\n  text: footerTextPredicate,\n  iconURL: imageURLPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar timestampPredicate = import_shapeshift.s.union(import_shapeshift.s.number, import_shapeshift.s.date).nullable.setValidationEnabled(isValidationEnabled);\nvar titlePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n\n// src/util/normalizeArray.ts\nfunction normalizeArray(arr) {\n  if (Array.isArray(arr[0])) return arr[0];\n  return arr;\n}\n__name(normalizeArray, \"normalizeArray\");\n\n// src/messages/embed/Embed.ts\nvar EmbedBuilder = class {\n  data;\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.data = {\n      ...data\n    };\n    if (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n  }\n  addFields() {\n    for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n      fields[_key] = arguments[_key];\n    }\n    fields = normalizeArray(fields);\n    validateFieldLength(fields.length, this.data.fields);\n    embedFieldsArrayPredicate.parse(fields);\n    if (this.data.fields) this.data.fields.push(...fields);else this.data.fields = fields;\n    return this;\n  }\n  spliceFields(index, deleteCount) {\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      fields[_key2 - 2] = arguments[_key2];\n    }\n    validateFieldLength(fields.length - deleteCount, this.data.fields);\n    embedFieldsArrayPredicate.parse(fields);\n    if (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);else this.data.fields = fields;\n    return this;\n  }\n  setFields() {\n    for (var _len3 = arguments.length, fields = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      fields[_key3] = arguments[_key3];\n    }\n    this.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n    return this;\n  }\n  setAuthor(options) {\n    if (options === null) {\n      this.data.author = void 0;\n      return this;\n    }\n    embedAuthorPredicate.parse(options);\n    this.data.author = {\n      name: options.name,\n      url: options.url,\n      icon_url: options.iconURL\n    };\n    return this;\n  }\n  setColor(color) {\n    colorPredicate.parse(color);\n    if (Array.isArray(color)) {\n      const [red, green, blue] = color;\n      this.data.color = (red << 16) + (green << 8) + blue;\n      return this;\n    }\n    this.data.color = color ?? void 0;\n    return this;\n  }\n  setDescription(description) {\n    descriptionPredicate.parse(description);\n    this.data.description = description ?? void 0;\n    return this;\n  }\n  setFooter(options) {\n    if (options === null) {\n      this.data.footer = void 0;\n      return this;\n    }\n    embedFooterPredicate.parse(options);\n    this.data.footer = {\n      text: options.text,\n      icon_url: options.iconURL\n    };\n    return this;\n  }\n  setImage(url) {\n    imageURLPredicate.parse(url);\n    this.data.image = url ? {\n      url\n    } : void 0;\n    return this;\n  }\n  setThumbnail(url) {\n    imageURLPredicate.parse(url);\n    this.data.thumbnail = url ? {\n      url\n    } : void 0;\n    return this;\n  }\n  setTimestamp() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    timestampPredicate.parse(timestamp);\n    this.data.timestamp = timestamp ? new Date(timestamp).toISOString() : void 0;\n    return this;\n  }\n  setTitle(title) {\n    titlePredicate.parse(title);\n    this.data.title = title ?? void 0;\n    return this;\n  }\n  setURL(url) {\n    urlPredicate.parse(url);\n    this.data.url = url ?? void 0;\n    return this;\n  }\n  toJSON() {\n    return {\n      ...this.data\n    };\n  }\n};\n__name(EmbedBuilder, \"EmbedBuilder\");\n\n// src/messages/formatters.ts\nfunction codeBlock(language, content) {\n  return typeof content === \"undefined\" ? `\\`\\`\\`\n${language}\n\\`\\`\\`` : `\\`\\`\\`${language}\n${content}\n\\`\\`\\``;\n}\n__name(codeBlock, \"codeBlock\");\nfunction inlineCode(content) {\n  return `\\`${content}\\``;\n}\n__name(inlineCode, \"inlineCode\");\nfunction italic(content) {\n  return `_${content}_`;\n}\n__name(italic, \"italic\");\nfunction bold(content) {\n  return `**${content}**`;\n}\n__name(bold, \"bold\");\nfunction underscore(content) {\n  return `__${content}__`;\n}\n__name(underscore, \"underscore\");\nfunction strikethrough(content) {\n  return `~~${content}~~`;\n}\n__name(strikethrough, \"strikethrough\");\nfunction quote(content) {\n  return `> ${content}`;\n}\n__name(quote, \"quote\");\nfunction blockQuote(content) {\n  return `>>> ${content}`;\n}\n__name(blockQuote, \"blockQuote\");\nfunction hideLinkEmbed(url) {\n  return `<${url}>`;\n}\n__name(hideLinkEmbed, \"hideLinkEmbed\");\nfunction hyperlink(content, url, title) {\n  return title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n__name(hyperlink, \"hyperlink\");\nfunction spoiler(content) {\n  return `||${content}||`;\n}\n__name(spoiler, \"spoiler\");\nfunction userMention(userId) {\n  return `<@${userId}>`;\n}\n__name(userMention, \"userMention\");\nfunction channelMention(channelId) {\n  return `<#${channelId}>`;\n}\n__name(channelMention, \"channelMention\");\nfunction roleMention(roleId) {\n  return `<@&${roleId}>`;\n}\n__name(roleMention, \"roleMention\");\nfunction chatInputApplicationCommandMention(commandName, subcommandGroupName, subcommandName, commandId) {\n  if (typeof commandId !== \"undefined\") {\n    return `</${commandName} ${subcommandGroupName} ${subcommandName}:${commandId}>`;\n  }\n  if (typeof subcommandName !== \"undefined\") {\n    return `</${commandName} ${subcommandGroupName}:${subcommandName}>`;\n  }\n  return `</${commandName}:${subcommandGroupName}>`;\n}\n__name(chatInputApplicationCommandMention, \"chatInputApplicationCommandMention\");\nfunction formatEmoji(emojiId) {\n  let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return `<${animated ? \"a\" : \"\"}:_:${emojiId}>`;\n}\n__name(formatEmoji, \"formatEmoji\");\nfunction channelLink(channelId, guildId) {\n  return `https://discord.com/channels/${guildId ?? \"@me\"}/${channelId}`;\n}\n__name(channelLink, \"channelLink\");\nfunction messageLink(channelId, messageId, guildId) {\n  return `${typeof guildId === \"undefined\" ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;\n}\n__name(messageLink, \"messageLink\");\nfunction time(timeOrSeconds, style) {\n  if (typeof timeOrSeconds !== \"number\") {\n    timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1e3);\n  }\n  return typeof style === \"string\" ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n__name(time, \"time\");\nvar TimestampStyles = {\n  ShortTime: \"t\",\n  LongTime: \"T\",\n  ShortDate: \"d\",\n  LongDate: \"D\",\n  ShortDateTime: \"f\",\n  LongDateTime: \"F\",\n  RelativeTime: \"R\"\n};\nvar Faces = /* @__PURE__ */(Faces2 => {\n  Faces2[\"Shrug\"] = \"\\xAF\\\\_(\\u30C4)\\\\_/\\xAF\";\n  Faces2[\"Tableflip\"] = \"(\\u256F\\xB0\\u25A1\\xB0\\uFF09\\u256F\\uFE35 \\u253B\\u2501\\u253B\";\n  Faces2[\"Unflip\"] = \"\\u252C\\u2500\\u252C \\u30CE( \\u309C-\\u309C\\u30CE)\";\n  return Faces2;\n})(Faces || {});\n\n// src/components/Assertions.ts\nvar Assertions_exports2 = {};\n__export(Assertions_exports2, {\n  buttonLabelValidator: () => buttonLabelValidator,\n  buttonStyleValidator: () => buttonStyleValidator,\n  channelTypesValidator: () => channelTypesValidator,\n  customIdValidator: () => customIdValidator,\n  defaultValidator: () => defaultValidator,\n  disabledValidator: () => disabledValidator,\n  emojiValidator: () => emojiValidator,\n  jsonOptionValidator: () => jsonOptionValidator,\n  labelValueDescriptionValidator: () => labelValueDescriptionValidator,\n  minMaxValidator: () => minMaxValidator,\n  optionValidator: () => optionValidator,\n  optionsLengthValidator: () => optionsLengthValidator,\n  optionsValidator: () => optionsValidator,\n  placeholderValidator: () => placeholderValidator,\n  urlValidator: () => urlValidator,\n  validateRequiredButtonParameters: () => validateRequiredButtonParameters,\n  validateRequiredSelectMenuOptionParameters: () => validateRequiredSelectMenuOptionParameters,\n  validateRequiredSelectMenuParameters: () => validateRequiredSelectMenuParameters\n});\nvar import_shapeshift2 = require(\"@sapphire/shapeshift\");\nvar import_v10 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/StringSelectMenuOption.ts\nvar StringSelectMenuOptionBuilder = class {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.data = data;\n  }\n  setLabel(label) {\n    this.data.label = labelValueDescriptionValidator.parse(label);\n    return this;\n  }\n  setValue(value) {\n    this.data.value = labelValueDescriptionValidator.parse(value);\n    return this;\n  }\n  setDescription(description) {\n    this.data.description = labelValueDescriptionValidator.parse(description);\n    return this;\n  }\n  setDefault() {\n    let isDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.data.default = defaultValidator.parse(isDefault);\n    return this;\n  }\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  toJSON() {\n    validateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n    return {\n      ...this.data\n    };\n  }\n};\n__name(StringSelectMenuOptionBuilder, \"StringSelectMenuOptionBuilder\");\n\n// src/components/Assertions.ts\nvar customIdValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar emojiValidator = import_shapeshift2.s.object({\n  id: import_shapeshift2.s.string,\n  name: import_shapeshift2.s.string,\n  animated: import_shapeshift2.s.boolean\n}).partial.strict.setValidationEnabled(isValidationEnabled);\nvar disabledValidator = import_shapeshift2.s.boolean;\nvar buttonLabelValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80).setValidationEnabled(isValidationEnabled);\nvar buttonStyleValidator = import_shapeshift2.s.nativeEnum(import_v10.ButtonStyle);\nvar placeholderValidator = import_shapeshift2.s.string.lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nvar minMaxValidator = import_shapeshift2.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nvar labelValueDescriptionValidator = import_shapeshift2.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar jsonOptionValidator = import_shapeshift2.s.object({\n  label: labelValueDescriptionValidator,\n  value: labelValueDescriptionValidator,\n  description: labelValueDescriptionValidator.optional,\n  emoji: emojiValidator.optional,\n  default: import_shapeshift2.s.boolean.optional\n}).setValidationEnabled(isValidationEnabled);\nvar optionValidator = import_shapeshift2.s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\nvar optionsValidator = optionValidator.array.lengthGreaterThanOrEqual(0).setValidationEnabled(isValidationEnabled);\nvar optionsLengthValidator = import_shapeshift2.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredSelectMenuParameters(options, customId) {\n  customIdValidator.parse(customId);\n  optionsValidator.parse(options);\n}\n__name(validateRequiredSelectMenuParameters, \"validateRequiredSelectMenuParameters\");\nvar defaultValidator = import_shapeshift2.s.boolean;\nfunction validateRequiredSelectMenuOptionParameters(label, value) {\n  labelValueDescriptionValidator.parse(label);\n  labelValueDescriptionValidator.parse(value);\n}\n__name(validateRequiredSelectMenuOptionParameters, \"validateRequiredSelectMenuOptionParameters\");\nvar channelTypesValidator = import_shapeshift2.s.nativeEnum(import_v10.ChannelType).array.setValidationEnabled(isValidationEnabled);\nvar urlValidator = import_shapeshift2.s.string.url({\n  allowedProtocols: [\"http:\", \"https:\", \"discord:\"]\n}).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredButtonParameters(style, label, emoji, customId, url) {\n  if (url && customId) {\n    throw new RangeError(\"URL and custom id are mutually exclusive\");\n  }\n  if (!label && !emoji) {\n    throw new RangeError(\"Buttons must have a label and/or an emoji\");\n  }\n  if (style === import_v10.ButtonStyle.Link) {\n    if (!url) {\n      throw new RangeError(\"Link buttons must have a url\");\n    }\n  } else if (url) {\n    throw new RangeError(\"Non-link buttons cannot have a url\");\n  }\n}\n__name(validateRequiredButtonParameters, \"validateRequiredButtonParameters\");\n\n// src/components/ActionRow.ts\nvar import_v1011 = require(\"discord-api-types/v10\");\n\n// src/components/Component.ts\nvar ComponentBuilder = class {\n  data;\n  constructor(data) {\n    this.data = data;\n  }\n};\n__name(ComponentBuilder, \"ComponentBuilder\");\n\n// src/components/Components.ts\nvar import_v1010 = require(\"discord-api-types/v10\");\n\n// src/components/button/Button.ts\nvar import_v102 = require(\"discord-api-types/v10\");\nvar ButtonBuilder = class extends ComponentBuilder {\n  constructor(data) {\n    super({\n      type: import_v102.ComponentType.Button,\n      ...data\n    });\n  }\n  setStyle(style) {\n    this.data.style = buttonStyleValidator.parse(style);\n    return this;\n  }\n  setURL(url) {\n    this.data.url = urlValidator.parse(url);\n    return this;\n  }\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  setDisabled() {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  setLabel(label) {\n    this.data.label = buttonLabelValidator.parse(label);\n    return this;\n  }\n  toJSON() {\n    validateRequiredButtonParameters(this.data.style, this.data.label, this.data.emoji, this.data.custom_id, this.data.url);\n    return {\n      ...this.data\n    };\n  }\n};\n__name(ButtonBuilder, \"ButtonBuilder\");\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar import_v103 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/BaseSelectMenu.ts\nvar BaseSelectMenuBuilder = class extends ComponentBuilder {\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator.parse(placeholder);\n    return this;\n  }\n  setMinValues(minValues) {\n    this.data.min_values = minMaxValidator.parse(minValues);\n    return this;\n  }\n  setMaxValues(maxValues) {\n    this.data.max_values = minMaxValidator.parse(maxValues);\n    return this;\n  }\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  setDisabled() {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n__name(BaseSelectMenuBuilder, \"BaseSelectMenuBuilder\");\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar ChannelSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v103.ComponentType.ChannelSelect\n    });\n  }\n  addChannelTypes() {\n    for (var _len4 = arguments.length, types = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      types[_key4] = arguments[_key4];\n    }\n    types = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.push(...channelTypesValidator.parse(types));\n    return this;\n  }\n  setChannelTypes() {\n    for (var _len5 = arguments.length, types = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      types[_key5] = arguments[_key5];\n    }\n    types = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(types));\n    return this;\n  }\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n__name(ChannelSelectMenuBuilder, \"ChannelSelectMenuBuilder\");\n\n// src/components/selectMenu/MentionableSelectMenu.ts\nvar import_v104 = require(\"discord-api-types/v10\");\nvar MentionableSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v104.ComponentType.MentionableSelect\n    });\n  }\n};\n__name(MentionableSelectMenuBuilder, \"MentionableSelectMenuBuilder\");\n\n// src/components/selectMenu/RoleSelectMenu.ts\nvar import_v105 = require(\"discord-api-types/v10\");\nvar RoleSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v105.ComponentType.RoleSelect\n    });\n  }\n};\n__name(RoleSelectMenuBuilder, \"RoleSelectMenuBuilder\");\n\n// src/components/selectMenu/StringSelectMenu.ts\nvar import_v106 = require(\"discord-api-types/v10\");\nvar StringSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  options;\n  constructor(data) {\n    const {\n      options,\n      ...initData\n    } = data ?? {};\n    super({\n      ...initData,\n      type: import_v106.ComponentType.StringSelect\n    });\n    this.options = options?.map(option => new StringSelectMenuOptionBuilder(option)) ?? [];\n  }\n  addOptions() {\n    for (var _len6 = arguments.length, options = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      options[_key6] = arguments[_key6];\n    }\n    options = normalizeArray(options);\n    optionsLengthValidator.parse(this.options.length + options.length);\n    this.options.push(...options.map(option => option instanceof StringSelectMenuOptionBuilder ? option : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option))));\n    return this;\n  }\n  setOptions() {\n    for (var _len7 = arguments.length, options = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      options[_key7] = arguments[_key7];\n    }\n    options = normalizeArray(options);\n    optionsLengthValidator.parse(options.length);\n    this.options.splice(0, this.options.length, ...options.map(option => option instanceof StringSelectMenuOptionBuilder ? option : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option))));\n    return this;\n  }\n  toJSON() {\n    validateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n    return {\n      ...this.data,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(StringSelectMenuBuilder, \"StringSelectMenuBuilder\");\n\n// src/components/selectMenu/UserSelectMenu.ts\nvar import_v107 = require(\"discord-api-types/v10\");\nvar UserSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  constructor(data) {\n    super({\n      ...data,\n      type: import_v107.ComponentType.UserSelect\n    });\n  }\n};\n__name(UserSelectMenuBuilder, \"UserSelectMenuBuilder\");\n\n// src/components/textInput/TextInput.ts\nvar import_util = require(\"@discordjs/util\");\nvar import_v109 = require(\"discord-api-types/v10\");\nvar import_fast_deep_equal = __toESM(require(\"fast-deep-equal\"));\n\n// src/components/textInput/Assertions.ts\nvar Assertions_exports3 = {};\n__export(Assertions_exports3, {\n  labelValidator: () => labelValidator,\n  maxLengthValidator: () => maxLengthValidator,\n  minLengthValidator: () => minLengthValidator,\n  placeholderValidator: () => placeholderValidator2,\n  requiredValidator: () => requiredValidator,\n  textInputStyleValidator: () => textInputStyleValidator,\n  validateRequiredParameters: () => validateRequiredParameters,\n  valueValidator: () => valueValidator\n});\nvar import_shapeshift3 = require(\"@sapphire/shapeshift\");\nvar import_v108 = require(\"discord-api-types/v10\");\nvar textInputStyleValidator = import_shapeshift3.s.nativeEnum(import_v108.TextInputStyle);\nvar minLengthValidator = import_shapeshift3.s.number.int.greaterThanOrEqual(0).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar maxLengthValidator = import_shapeshift3.s.number.int.greaterThanOrEqual(1).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar requiredValidator = import_shapeshift3.s.boolean;\nvar valueValidator = import_shapeshift3.s.string.lengthLessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar placeholderValidator2 = import_shapeshift3.s.string.lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar labelValidator = import_shapeshift3.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters(customId, style, label) {\n  customIdValidator.parse(customId);\n  textInputStyleValidator.parse(style);\n  labelValidator.parse(label);\n}\n__name(validateRequiredParameters, \"validateRequiredParameters\");\n\n// src/components/textInput/TextInput.ts\nvar TextInputBuilder = class extends ComponentBuilder {\n  constructor(data) {\n    super({\n      type: import_v109.ComponentType.TextInput,\n      ...data\n    });\n  }\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  setLabel(label) {\n    this.data.label = labelValidator.parse(label);\n    return this;\n  }\n  setStyle(style) {\n    this.data.style = textInputStyleValidator.parse(style);\n    return this;\n  }\n  setMinLength(minLength) {\n    this.data.min_length = minLengthValidator.parse(minLength);\n    return this;\n  }\n  setMaxLength(maxLength) {\n    this.data.max_length = maxLengthValidator.parse(maxLength);\n    return this;\n  }\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator2.parse(placeholder);\n    return this;\n  }\n  setValue(value) {\n    this.data.value = valueValidator.parse(value);\n    return this;\n  }\n  setRequired() {\n    let required = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.data.required = requiredValidator.parse(required);\n    return this;\n  }\n  toJSON() {\n    validateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n    return {\n      ...this.data\n    };\n  }\n  equals(other) {\n    if ((0, import_util.isJSONEncodable)(other)) {\n      return (0, import_fast_deep_equal.default)(other.toJSON(), this.data);\n    }\n    return (0, import_fast_deep_equal.default)(other, this.data);\n  }\n};\n__name(TextInputBuilder, \"TextInputBuilder\");\n\n// src/components/Components.ts\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n  switch (data.type) {\n    case import_v1010.ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case import_v1010.ComponentType.Button:\n      return new ButtonBuilder(data);\n    case import_v1010.ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case import_v1010.ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case import_v1010.ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case import_v1010.ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case import_v1010.ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case import_v1010.ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      throw new Error(`Cannot properly serialize component type: ${data.type}`);\n  }\n}\n__name(createComponentBuilder, \"createComponentBuilder\");\n\n// src/components/ActionRow.ts\nvar ActionRowBuilder = class extends ComponentBuilder {\n  components;\n  constructor() {\n    let {\n      components,\n      ...data\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      type: import_v1011.ComponentType.ActionRow,\n      ...data\n    });\n    this.components = components?.map(component => createComponentBuilder(component)) ?? [];\n  }\n  addComponents() {\n    for (var _len8 = arguments.length, components = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      components[_key8] = arguments[_key8];\n    }\n    this.components.push(...normalizeArray(components));\n    return this;\n  }\n  setComponents() {\n    for (var _len9 = arguments.length, components = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      components[_key9] = arguments[_key9];\n    }\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  toJSON() {\n    return {\n      ...this.data,\n      components: this.components.map(component => component.toJSON())\n    };\n  }\n};\n__name(ActionRowBuilder, \"ActionRowBuilder\");\n\n// src/interactions/modals/Assertions.ts\nvar Assertions_exports4 = {};\n__export(Assertions_exports4, {\n  componentsValidator: () => componentsValidator,\n  titleValidator: () => titleValidator,\n  validateRequiredParameters: () => validateRequiredParameters2\n});\nvar import_shapeshift4 = require(\"@sapphire/shapeshift\");\nvar titleValidator = import_shapeshift4.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nvar componentsValidator = import_shapeshift4.s.instance(ActionRowBuilder).array.lengthGreaterThanOrEqual(1).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters2(customId, title, components) {\n  customIdValidator.parse(customId);\n  titleValidator.parse(title);\n  componentsValidator.parse(components);\n}\n__name(validateRequiredParameters2, \"validateRequiredParameters\");\n\n// src/interactions/modals/Modal.ts\nvar ModalBuilder = class {\n  data;\n  components = [];\n  constructor() {\n    let {\n      components,\n      ...data\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.data = {\n      ...data\n    };\n    this.components = components?.map(component => createComponentBuilder(component)) ?? [];\n  }\n  setTitle(title) {\n    this.data.title = titleValidator.parse(title);\n    return this;\n  }\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  addComponents() {\n    for (var _len10 = arguments.length, components = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      components[_key10] = arguments[_key10];\n    }\n    this.components.push(...normalizeArray(components).map(component => component instanceof ActionRowBuilder ? component : new ActionRowBuilder(component)));\n    return this;\n  }\n  setComponents() {\n    for (var _len11 = arguments.length, components = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      components[_key11] = arguments[_key11];\n    }\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  toJSON() {\n    validateRequiredParameters2(this.data.custom_id, this.data.title, this.components);\n    return {\n      ...this.data,\n      components: this.components.map(component => component.toJSON())\n    };\n  }\n};\n__name(ModalBuilder, \"ModalBuilder\");\n\n// src/interactions/slashCommands/Assertions.ts\nvar Assertions_exports5 = {};\n__export(Assertions_exports5, {\n  assertReturnOfBuilder: () => assertReturnOfBuilder,\n  localizationMapPredicate: () => localizationMapPredicate,\n  validateChoicesLength: () => validateChoicesLength,\n  validateDMPermission: () => validateDMPermission,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions,\n  validateDefaultPermission: () => validateDefaultPermission,\n  validateDescription: () => validateDescription,\n  validateLocale: () => validateLocale,\n  validateLocalizationMap: () => validateLocalizationMap,\n  validateMaxOptionsLength: () => validateMaxOptionsLength,\n  validateName: () => validateName,\n  validateRequired: () => validateRequired,\n  validateRequiredParameters: () => validateRequiredParameters3\n});\nvar import_shapeshift5 = require(\"@sapphire/shapeshift\");\nvar import_v1012 = require(\"discord-api-types/v10\");\nvar namePredicate = import_shapeshift5.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);\nfunction validateName(name) {\n  namePredicate.parse(name);\n}\n__name(validateName, \"validateName\");\nvar descriptionPredicate2 = import_shapeshift5.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar localePredicate = import_shapeshift5.s.nativeEnum(import_v1012.Locale);\nfunction validateDescription(description) {\n  descriptionPredicate2.parse(description);\n}\n__name(validateDescription, \"validateDescription\");\nvar maxArrayLengthPredicate = import_shapeshift5.s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateLocale(locale) {\n  return localePredicate.parse(locale);\n}\n__name(validateLocale, \"validateLocale\");\nfunction validateMaxOptionsLength(options) {\n  maxArrayLengthPredicate.parse(options);\n}\n__name(validateMaxOptionsLength, \"validateMaxOptionsLength\");\nfunction validateRequiredParameters3(name, description, options) {\n  validateName(name);\n  validateDescription(description);\n  validateMaxOptionsLength(options);\n}\n__name(validateRequiredParameters3, \"validateRequiredParameters\");\nvar booleanPredicate = import_shapeshift5.s.boolean;\nfunction validateDefaultPermission(value) {\n  booleanPredicate.parse(value);\n}\n__name(validateDefaultPermission, \"validateDefaultPermission\");\nfunction validateRequired(required) {\n  booleanPredicate.parse(required);\n}\n__name(validateRequired, \"validateRequired\");\nvar choicesLengthPredicate = import_shapeshift5.s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateChoicesLength(amountAdding, choices) {\n  choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n__name(validateChoicesLength, \"validateChoicesLength\");\nfunction assertReturnOfBuilder(input, ExpectedInstanceOf) {\n  import_shapeshift5.s.instance(ExpectedInstanceOf).parse(input);\n}\n__name(assertReturnOfBuilder, \"assertReturnOfBuilder\");\nvar localizationMapPredicate = import_shapeshift5.s.object(Object.fromEntries(Object.values(import_v1012.Locale).map(locale => [locale, import_shapeshift5.s.string.nullish]))).strict.nullish.setValidationEnabled(isValidationEnabled);\nfunction validateLocalizationMap(value) {\n  localizationMapPredicate.parse(value);\n}\n__name(validateLocalizationMap, \"validateLocalizationMap\");\nvar dmPermissionPredicate = import_shapeshift5.s.boolean.nullish;\nfunction validateDMPermission(value) {\n  dmPermissionPredicate.parse(value);\n}\n__name(validateDMPermission, \"validateDMPermission\");\nvar memberPermissionPredicate = import_shapeshift5.s.union(import_shapeshift5.s.bigint.transform(value => value.toString()), import_shapeshift5.s.number.safeInt.transform(value => value.toString()), import_shapeshift5.s.string.regex(/^\\d+$/)).nullish;\nfunction validateDefaultMemberPermissions(permissions) {\n  return memberPermissionPredicate.parse(permissions);\n}\n__name(validateDefaultMemberPermissions, \"validateDefaultMemberPermissions\");\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar import_ts_mixer6 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/SlashCommandSubcommands.ts\nvar import_v1024 = require(\"discord-api-types/v10\");\nvar import_ts_mixer5 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/NameAndDescription.ts\nvar SharedNameAndDescription = class {\n  name;\n  name_localizations;\n  description;\n  description_localizations;\n  setName(name) {\n    validateName(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  setDescription(description) {\n    validateDescription(description);\n    Reflect.set(this, \"description\", description);\n    return this;\n  }\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames)) {\n      this.setNameLocalization(...args);\n    }\n    return this;\n  }\n  setDescriptionLocalization(locale, localizedDescription) {\n    if (!this.description_localizations) {\n      Reflect.set(this, \"description_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedDescription === null) {\n      this.description_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateDescription(localizedDescription);\n    this.description_localizations[parsedLocale] = localizedDescription;\n    return this;\n  }\n  setDescriptionLocalizations(localizedDescriptions) {\n    if (localizedDescriptions === null) {\n      Reflect.set(this, \"description_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"description_localizations\", {});\n    for (const args of Object.entries(localizedDescriptions)) {\n      this.setDescriptionLocalization(...args);\n    }\n    return this;\n  }\n};\n__name(SharedNameAndDescription, \"SharedNameAndDescription\");\n\n// src/interactions/slashCommands/options/attachment.ts\nvar import_v1013 = require(\"discord-api-types/v10\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts\nvar ApplicationCommandOptionBase = class extends SharedNameAndDescription {\n  required = false;\n  setRequired(required) {\n    validateRequired(required);\n    Reflect.set(this, \"required\", required);\n    return this;\n  }\n  runRequiredValidations() {\n    validateRequiredParameters3(this.name, this.description, []);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    validateRequired(this.required);\n  }\n};\n__name(ApplicationCommandOptionBase, \"ApplicationCommandOptionBase\");\n\n// src/interactions/slashCommands/options/attachment.ts\nvar SlashCommandAttachmentOption = class extends ApplicationCommandOptionBase {\n  type = import_v1013.ApplicationCommandOptionType.Attachment;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandAttachmentOption, \"SlashCommandAttachmentOption\");\n\n// src/interactions/slashCommands/options/boolean.ts\nvar import_v1014 = require(\"discord-api-types/v10\");\nvar SlashCommandBooleanOption = class extends ApplicationCommandOptionBase {\n  type = import_v1014.ApplicationCommandOptionType.Boolean;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandBooleanOption, \"SlashCommandBooleanOption\");\n\n// src/interactions/slashCommands/options/channel.ts\nvar import_v1016 = require(\"discord-api-types/v10\");\nvar import_ts_mixer = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts\nvar import_shapeshift6 = require(\"@sapphire/shapeshift\");\nvar import_v1015 = require(\"discord-api-types/v10\");\nvar allowedChannelTypes = [import_v1015.ChannelType.GuildText, import_v1015.ChannelType.GuildVoice, import_v1015.ChannelType.GuildCategory, import_v1015.ChannelType.GuildAnnouncement, import_v1015.ChannelType.AnnouncementThread, import_v1015.ChannelType.PublicThread, import_v1015.ChannelType.PrivateThread, import_v1015.ChannelType.GuildStageVoice, import_v1015.ChannelType.GuildForum];\nvar channelTypesPredicate = import_shapeshift6.s.array(import_shapeshift6.s.union(...allowedChannelTypes.map(type => import_shapeshift6.s.literal(type))));\nvar ApplicationCommandOptionChannelTypesMixin = class {\n  channel_types;\n  addChannelTypes() {\n    if (this.channel_types === void 0) {\n      Reflect.set(this, \"channel_types\", []);\n    }\n    for (var _len12 = arguments.length, channelTypes = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      channelTypes[_key12] = arguments[_key12];\n    }\n    this.channel_types.push(...channelTypesPredicate.parse(channelTypes));\n    return this;\n  }\n};\n__name(ApplicationCommandOptionChannelTypesMixin, \"ApplicationCommandOptionChannelTypesMixin\");\n\n// src/interactions/slashCommands/options/channel.ts\nvar SlashCommandChannelOption = class extends ApplicationCommandOptionBase {\n  type = import_v1016.ApplicationCommandOptionType.Channel;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandChannelOption, \"SlashCommandChannelOption\");\nSlashCommandChannelOption = __decorateClass([(0, import_ts_mixer.mix)(ApplicationCommandOptionChannelTypesMixin)], SlashCommandChannelOption);\n\n// src/interactions/slashCommands/options/integer.ts\nvar import_shapeshift8 = require(\"@sapphire/shapeshift\");\nvar import_v1018 = require(\"discord-api-types/v10\");\nvar import_ts_mixer2 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts\nvar ApplicationCommandNumericOptionMinMaxValueMixin = class {\n  max_value;\n  min_value;\n};\n__name(ApplicationCommandNumericOptionMinMaxValueMixin, \"ApplicationCommandNumericOptionMinMaxValueMixin\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts\nvar import_shapeshift7 = require(\"@sapphire/shapeshift\");\nvar import_v1017 = require(\"discord-api-types/v10\");\nvar stringPredicate = import_shapeshift7.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nvar numberPredicate = import_shapeshift7.s.number.greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nvar choicesPredicate = import_shapeshift7.s.object({\n  name: stringPredicate,\n  name_localizations: localizationMapPredicate,\n  value: import_shapeshift7.s.union(stringPredicate, numberPredicate)\n}).array;\nvar booleanPredicate2 = import_shapeshift7.s.boolean;\nvar ApplicationCommandOptionWithChoicesAndAutocompleteMixin = class {\n  choices;\n  autocomplete;\n  type;\n  addChoices() {\n    for (var _len13 = arguments.length, choices = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      choices[_key13] = arguments[_key13];\n    }\n    if (choices.length > 0 && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(choices);\n    if (this.choices === void 0) {\n      Reflect.set(this, \"choices\", []);\n    }\n    validateChoicesLength(choices.length, this.choices);\n    for (const {\n      name,\n      name_localizations,\n      value\n    } of choices) {\n      if (this.type === import_v1017.ApplicationCommandOptionType.String) {\n        stringPredicate.parse(value);\n      } else {\n        numberPredicate.parse(value);\n      }\n      this.choices.push({\n        name,\n        name_localizations,\n        value\n      });\n    }\n    return this;\n  }\n  setChoices() {\n    for (var _len14 = arguments.length, choices = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n      choices[_key14] = arguments[_key14];\n    }\n    if (choices.length > 0 && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(choices);\n    Reflect.set(this, \"choices\", []);\n    this.addChoices(...choices);\n    return this;\n  }\n  setAutocomplete(autocomplete) {\n    booleanPredicate2.parse(autocomplete);\n    if (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    Reflect.set(this, \"autocomplete\", autocomplete);\n    return this;\n  }\n};\n__name(ApplicationCommandOptionWithChoicesAndAutocompleteMixin, \"ApplicationCommandOptionWithChoicesAndAutocompleteMixin\");\n\n// src/interactions/slashCommands/options/integer.ts\nvar numberValidator = import_shapeshift8.s.number.int;\nvar SlashCommandIntegerOption = class extends ApplicationCommandOptionBase {\n  type = import_v1018.ApplicationCommandOptionType.Integer;\n  setMaxValue(max) {\n    numberValidator.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  setMinValue(min) {\n    numberValidator.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandIntegerOption, \"SlashCommandIntegerOption\");\nSlashCommandIntegerOption = __decorateClass([(0, import_ts_mixer2.mix)(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandIntegerOption);\n\n// src/interactions/slashCommands/options/mentionable.ts\nvar import_v1019 = require(\"discord-api-types/v10\");\nvar SlashCommandMentionableOption = class extends ApplicationCommandOptionBase {\n  type = import_v1019.ApplicationCommandOptionType.Mentionable;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandMentionableOption, \"SlashCommandMentionableOption\");\n\n// src/interactions/slashCommands/options/number.ts\nvar import_shapeshift9 = require(\"@sapphire/shapeshift\");\nvar import_v1020 = require(\"discord-api-types/v10\");\nvar import_ts_mixer3 = require(\"ts-mixer\");\nvar numberValidator2 = import_shapeshift9.s.number;\nvar SlashCommandNumberOption = class extends ApplicationCommandOptionBase {\n  type = import_v1020.ApplicationCommandOptionType.Number;\n  setMaxValue(max) {\n    numberValidator2.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  setMinValue(min) {\n    numberValidator2.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandNumberOption, \"SlashCommandNumberOption\");\nSlashCommandNumberOption = __decorateClass([(0, import_ts_mixer3.mix)(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandNumberOption);\n\n// src/interactions/slashCommands/options/role.ts\nvar import_v1021 = require(\"discord-api-types/v10\");\nvar SlashCommandRoleOption = class extends ApplicationCommandOptionBase {\n  type = import_v1021.ApplicationCommandOptionType.Role;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandRoleOption, \"SlashCommandRoleOption\");\n\n// src/interactions/slashCommands/options/string.ts\nvar import_shapeshift10 = require(\"@sapphire/shapeshift\");\nvar import_v1022 = require(\"discord-api-types/v10\");\nvar import_ts_mixer4 = require(\"ts-mixer\");\nvar minLengthValidator2 = import_shapeshift10.s.number.greaterThanOrEqual(0).lessThanOrEqual(6e3);\nvar maxLengthValidator2 = import_shapeshift10.s.number.greaterThanOrEqual(1).lessThanOrEqual(6e3);\nvar SlashCommandStringOption = class extends ApplicationCommandOptionBase {\n  type = import_v1022.ApplicationCommandOptionType.String;\n  max_length;\n  min_length;\n  setMaxLength(max) {\n    maxLengthValidator2.parse(max);\n    Reflect.set(this, \"max_length\", max);\n    return this;\n  }\n  setMinLength(min) {\n    minLengthValidator2.parse(min);\n    Reflect.set(this, \"min_length\", min);\n    return this;\n  }\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandStringOption, \"SlashCommandStringOption\");\nSlashCommandStringOption = __decorateClass([(0, import_ts_mixer4.mix)(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)], SlashCommandStringOption);\n\n// src/interactions/slashCommands/options/user.ts\nvar import_v1023 = require(\"discord-api-types/v10\");\nvar SlashCommandUserOption = class extends ApplicationCommandOptionBase {\n  type = import_v1023.ApplicationCommandOptionType.User;\n  toJSON() {\n    this.runRequiredValidations();\n    return {\n      ...this\n    };\n  }\n};\n__name(SlashCommandUserOption, \"SlashCommandUserOption\");\n\n// src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts\nvar SharedSlashCommandOptions = class {\n  options;\n  addBooleanOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n  }\n  addUserOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandUserOption);\n  }\n  addChannelOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n  }\n  addRoleOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n  }\n  addAttachmentOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n  }\n  addMentionableOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n  }\n  addStringOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandStringOption);\n  }\n  addIntegerOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n  }\n  addNumberOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n  }\n  _sharedAddOptionMethod(input, Instance) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new Instance()) : input;\n    assertReturnOfBuilder(result, Instance);\n    options.push(result);\n    return this;\n  }\n};\n__name(SharedSlashCommandOptions, \"SharedSlashCommandOptions\");\n\n// src/interactions/slashCommands/SlashCommandSubcommands.ts\nvar SlashCommandSubcommandGroupBuilder = class {\n  name = void 0;\n  description = void 0;\n  options = [];\n  addSubcommand(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1024.ApplicationCommandOptionType.SubcommandGroup,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandGroupBuilder, \"SlashCommandSubcommandGroupBuilder\");\nSlashCommandSubcommandGroupBuilder = __decorateClass([(0, import_ts_mixer5.mix)(SharedNameAndDescription)], SlashCommandSubcommandGroupBuilder);\nvar SlashCommandSubcommandBuilder = class {\n  name = void 0;\n  description = void 0;\n  options = [];\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1024.ApplicationCommandOptionType.Subcommand,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandBuilder, \"SlashCommandSubcommandBuilder\");\nSlashCommandSubcommandBuilder = __decorateClass([(0, import_ts_mixer5.mix)(SharedNameAndDescription, SharedSlashCommandOptions)], SlashCommandSubcommandBuilder);\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar SlashCommandBuilder = class {\n  name = void 0;\n  name_localizations;\n  description = void 0;\n  description_localizations;\n  options = [];\n  default_permission = void 0;\n  default_member_permissions = void 0;\n  dm_permission = void 0;\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    return {\n      ...this,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n  setDefaultPermission(value) {\n    validateDefaultPermission(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  setDMPermission(enabled) {\n    validateDMPermission(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  addSubcommandGroup(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n    options.push(result);\n    return this;\n  }\n  addSubcommand(input) {\n    const {\n      options\n    } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n};\n__name(SlashCommandBuilder, \"SlashCommandBuilder\");\nSlashCommandBuilder = __decorateClass([(0, import_ts_mixer6.mix)(SharedSlashCommandOptions, SharedNameAndDescription)], SlashCommandBuilder);\n\n// src/interactions/contextMenuCommands/Assertions.ts\nvar Assertions_exports6 = {};\n__export(Assertions_exports6, {\n  validateDMPermission: () => validateDMPermission2,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions2,\n  validateDefaultPermission: () => validateDefaultPermission2,\n  validateName: () => validateName2,\n  validateRequiredParameters: () => validateRequiredParameters4,\n  validateType: () => validateType\n});\nvar import_shapeshift11 = require(\"@sapphire/shapeshift\");\nvar import_v1025 = require(\"discord-api-types/v10\");\nvar namePredicate2 = import_shapeshift11.s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u).setValidationEnabled(isValidationEnabled);\nvar typePredicate = import_shapeshift11.s.union(import_shapeshift11.s.literal(import_v1025.ApplicationCommandType.User), import_shapeshift11.s.literal(import_v1025.ApplicationCommandType.Message)).setValidationEnabled(isValidationEnabled);\nvar booleanPredicate3 = import_shapeshift11.s.boolean;\nfunction validateDefaultPermission2(value) {\n  booleanPredicate3.parse(value);\n}\n__name(validateDefaultPermission2, \"validateDefaultPermission\");\nfunction validateName2(name) {\n  namePredicate2.parse(name);\n}\n__name(validateName2, \"validateName\");\nfunction validateType(type) {\n  typePredicate.parse(type);\n}\n__name(validateType, \"validateType\");\nfunction validateRequiredParameters4(name, type) {\n  validateName2(name);\n  validateType(type);\n}\n__name(validateRequiredParameters4, \"validateRequiredParameters\");\nvar dmPermissionPredicate2 = import_shapeshift11.s.boolean.nullish;\nfunction validateDMPermission2(value) {\n  dmPermissionPredicate2.parse(value);\n}\n__name(validateDMPermission2, \"validateDMPermission\");\nvar memberPermissionPredicate2 = import_shapeshift11.s.union(import_shapeshift11.s.bigint.transform(value => value.toString()), import_shapeshift11.s.number.safeInt.transform(value => value.toString()), import_shapeshift11.s.string.regex(/^\\d+$/)).nullish;\nfunction validateDefaultMemberPermissions2(permissions) {\n  return memberPermissionPredicate2.parse(permissions);\n}\n__name(validateDefaultMemberPermissions2, \"validateDefaultMemberPermissions\");\n\n// src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts\nvar ContextMenuCommandBuilder = class {\n  name = void 0;\n  name_localizations;\n  type = void 0;\n  default_permission = void 0;\n  default_member_permissions = void 0;\n  dm_permission = void 0;\n  setName(name) {\n    validateName2(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  setType(type) {\n    validateType(type);\n    Reflect.set(this, \"type\", type);\n    return this;\n  }\n  setDefaultPermission(value) {\n    validateDefaultPermission2(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions2(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  setDMPermission(enabled) {\n    validateDMPermission2(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName2(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames)) this.setNameLocalization(...args);\n    return this;\n  }\n  toJSON() {\n    validateRequiredParameters4(this.name, this.type);\n    validateLocalizationMap(this.name_localizations);\n    return {\n      ...this\n    };\n  }\n};\n__name(ContextMenuCommandBuilder, \"ContextMenuCommandBuilder\");\n\n// src/util/componentUtil.ts\nfunction embedLength(data) {\n  return (data.title?.length ?? 0) + (data.description?.length ?? 0) + (data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) + (data.footer?.text.length ?? 0) + (data.author?.name.length ?? 0);\n}\n__name(embedLength, \"embedLength\");\n\n// src/index.ts\n__reExport(src_exports, require(\"@discordjs/util\"), module.exports);\nvar version = \"1.4.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithChoicesAndAutocompleteMixin,\n  BaseSelectMenuBuilder,\n  ButtonBuilder,\n  ChannelSelectMenuBuilder,\n  ComponentAssertions,\n  ComponentBuilder,\n  ContextMenuCommandAssertions,\n  ContextMenuCommandBuilder,\n  EmbedAssertions,\n  EmbedBuilder,\n  Faces,\n  MentionableSelectMenuBuilder,\n  ModalAssertions,\n  ModalBuilder,\n  RoleSelectMenuBuilder,\n  SelectMenuBuilder,\n  SelectMenuOptionBuilder,\n  SharedNameAndDescription,\n  SharedSlashCommandOptions,\n  SlashCommandAssertions,\n  SlashCommandAttachmentOption,\n  SlashCommandBooleanOption,\n  SlashCommandBuilder,\n  SlashCommandChannelOption,\n  SlashCommandIntegerOption,\n  SlashCommandMentionableOption,\n  SlashCommandNumberOption,\n  SlashCommandRoleOption,\n  SlashCommandStringOption,\n  SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption,\n  StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder,\n  TextInputAssertions,\n  TextInputBuilder,\n  TimestampStyles,\n  UserSelectMenuBuilder,\n  blockQuote,\n  bold,\n  channelLink,\n  channelMention,\n  chatInputApplicationCommandMention,\n  codeBlock,\n  createComponentBuilder,\n  disableValidators,\n  embedLength,\n  enableValidators,\n  formatEmoji,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  isValidationEnabled,\n  italic,\n  messageLink,\n  normalizeArray,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  time,\n  underscore,\n  userMention,\n  version\n});","map":{"version":3,"mappings":"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","names":["__export","ActionRowBuilder","ApplicationCommandNumericOptionMinMaxValueMixin","ApplicationCommandOptionBase","ApplicationCommandOptionChannelTypesMixin","ApplicationCommandOptionWithChoicesAndAutocompleteMixin","BaseSelectMenuBuilder","ButtonBuilder","ChannelSelectMenuBuilder","ComponentAssertions","ComponentBuilder","ContextMenuCommandAssertions","ContextMenuCommandBuilder","EmbedAssertions","EmbedBuilder","Faces","MentionableSelectMenuBuilder","ModalAssertions","ModalBuilder","RoleSelectMenuBuilder","SelectMenuBuilder","SelectMenuOptionBuilder","SharedNameAndDescription","SharedSlashCommandOptions","SlashCommandAssertions","SlashCommandAttachmentOption","SlashCommandBooleanOption","SlashCommandBuilder","SlashCommandChannelOption","SlashCommandIntegerOption","SlashCommandMentionableOption","SlashCommandNumberOption","SlashCommandRoleOption","SlashCommandStringOption","SlashCommandSubcommandBuilder","SlashCommandSubcommandGroupBuilder","SlashCommandUserOption","StringSelectMenuBuilder","StringSelectMenuOptionBuilder","TextInputAssertions","TextInputBuilder","TimestampStyles","UserSelectMenuBuilder","blockQuote","bold","channelLink","channelMention","chatInputApplicationCommandMention","codeBlock","createComponentBuilder","disableValidators","embedLength","enableValidators","formatEmoji","hideLinkEmbed","hyperlink","inlineCode","isValidationEnabled","italic","messageLink","normalizeArray","quote","roleMention","spoiler","strikethrough","time","underscore","userMention","version","module","RGBPredicate","authorNamePredicate","colorPredicate","descriptionPredicate","embedAuthorPredicate","embedFieldPredicate","embedFieldsArrayPredicate","embedFooterPredicate","fieldInlinePredicate","fieldLengthPredicate","fieldNamePredicate","fieldValuePredicate","footerTextPredicate","imageURLPredicate","timestampPredicate","titlePredicate","urlPredicate","validateFieldLength","require","validate","import_shapeshift","string","lengthGreaterThanOrEqual","lengthLessThanOrEqual","setValidationEnabled","boolean","optional","object","name","value","inline","array","number","lessThanOrEqual","amountAdding","fields","parse","length","__name","nullable","url","allowedProtocols","nullish","iconURL","int","greaterThanOrEqual","or","tuple","text","union","date","arr","Array","isArray","data","constructor","timestamp","Date","toISOString","addFields","push","spliceFields","index","deleteCount","splice","setFields","setAuthor","options","author","icon_url","setColor","color","red","green","blue","setDescription","description","setFooter","footer","setImage","image","setThumbnail","thumbnail","setTimestamp","now","setTitle","title","setURL","toJSON","language","content","userId","channelId","roleId","commandName","subcommandGroupName","subcommandName","commandId","emojiId","animated","guildId","messageId","timeOrSeconds","style","Math","floor","getTime","ShortTime","LongTime","ShortDate","LongDate","ShortDateTime","LongDateTime","RelativeTime","buttonLabelValidator","buttonStyleValidator","channelTypesValidator","customIdValidator","defaultValidator","disabledValidator","emojiValidator","jsonOptionValidator","labelValueDescriptionValidator","minMaxValidator","optionValidator","optionsLengthValidator","optionsValidator","placeholderValidator","urlValidator","validateRequiredButtonParameters","validateRequiredSelectMenuOptionParameters","validateRequiredSelectMenuParameters","setLabel","label","setValue","setDefault","isDefault","default","setEmoji","emoji","import_shapeshift2","id","partial","strict","nativeEnum","import_v10","instance","customId","RangeError","Link","type","import_v102","Button","setStyle","setCustomId","custom_id","setDisabled","disabled","setPlaceholder","placeholder","setMinValues","minValues","min_values","setMaxValues","maxValues","max_values","import_v103","ChannelSelect","addChannelTypes","types","channel_types","setChannelTypes","import_v104","MentionableSelect","import_v105","RoleSelect","initData","import_v106","StringSelect","map","option","addOptions","setOptions","import_v107","UserSelect","__toESM","labelValidator","maxLengthValidator","minLengthValidator","requiredValidator","textInputStyleValidator","validateRequiredParameters","valueValidator","import_shapeshift3","import_v108","import_v109","TextInput","setMinLength","minLength","min_length","setMaxLength","maxLength","max_length","setRequired","required","equals","other","import_util","import_fast_deep_equal","import_v1010","ActionRow","Error","components","import_v1011","component","addComponents","setComponents","componentsValidator","titleValidator","import_shapeshift4","assertReturnOfBuilder","localizationMapPredicate","validateChoicesLength","validateDMPermission","validateDefaultMemberPermissions","validateDefaultPermission","validateDescription","validateLocale","validateLocalizationMap","validateMaxOptionsLength","validateName","validateRequired","namePredicate","import_shapeshift5","regex","localePredicate","import_v1012","maxArrayLengthPredicate","unknown","locale","booleanPredicate","choicesLengthPredicate","choices","input","ExpectedInstanceOf","Object","fromEntries","values","dmPermissionPredicate","memberPermissionPredicate","bigint","transform","toString","safeInt","permissions","name_localizations","description_localizations","setName","Reflect","set","setNameLocalization","localizedName","parsedLocale","setNameLocalizations","localizedNames","args","entries","setDescriptionLocalization","localizedDescription","setDescriptionLocalizations","localizedDescriptions","runRequiredValidations","import_v1013","Attachment","import_v1014","Boolean","allowedChannelTypes","import_v1015","GuildText","GuildVoice","GuildCategory","GuildAnnouncement","AnnouncementThread","PublicThread","PrivateThread","GuildStageVoice","GuildForum","channelTypesPredicate","import_shapeshift6","literal","channelTypes","import_v1016","Channel","__decorateClass","import_ts_mixer","max_value","min_value","stringPredicate","import_shapeshift7","numberPredicate","greaterThan","Number","NEGATIVE_INFINITY","lessThan","POSITIVE_INFINITY","choicesPredicate","autocomplete","addChoices","import_v1017","String","setChoices","setAutocomplete","numberValidator","import_shapeshift8","import_v1018","Integer","setMaxValue","max","setMinValue","min","import_ts_mixer2","import_v1019","Mentionable","import_shapeshift9","import_v1020","import_ts_mixer3","import_v1021","Role","import_shapeshift10","import_v1022","import_ts_mixer4","import_v1023","User","addBooleanOption","_sharedAddOptionMethod","addUserOption","addChannelOption","addRoleOption","addAttachmentOption","addMentionableOption","addStringOption","addIntegerOption","addNumberOption","Instance","result","addSubcommand","import_v1024","SubcommandGroup","import_ts_mixer5","Subcommand","default_permission","default_member_permissions","dm_permission","setDefaultPermission","setDefaultMemberPermissions","permissionValue","setDMPermission","enabled","addSubcommandGroup","import_ts_mixer6","validateType","import_shapeshift11","typePredicate","import_v1025","Message","setType","reduce","prev","curr","__reExport"],"sources":["J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\index.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\messages\\embed\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\util\\validation.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\util\\normalizeArray.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\messages\\embed\\Embed.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\messages\\formatters.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\StringSelectMenuOption.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\ActionRow.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\Component.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\Components.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\button\\Button.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\ChannelSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\BaseSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\MentionableSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\RoleSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\StringSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\selectMenu\\UserSelectMenu.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\textInput\\TextInput.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\components\\textInput\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\modals\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\modals\\Modal.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\SlashCommandBuilder.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\SlashCommandSubcommands.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\NameAndDescription.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\attachment.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionBase.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\boolean.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\channel.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionChannelTypesMixin.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\integer.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandNumericOptionMinMaxValueMixin.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\ApplicationCommandOptionWithChoicesAndAutocompleteMixin.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\mentionable.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\number.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\role.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\string.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\options\\user.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\slashCommands\\mixins\\SharedSlashCommandOptions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\contextMenuCommands\\Assertions.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\interactions\\contextMenuCommands\\ContextMenuCommandBuilder.ts","J:\\Coding\\Projekts\\Web\\JavaScript\\sillcode.tech\\node_modules\\@discordjs\\builders\\src\\util\\componentUtil.ts"],"sourcesContent":["export * as EmbedAssertions from './messages/embed/Assertions.js';\nexport * from './messages/embed/Embed.js';\nexport * from './messages/formatters.js';\n\nexport * as ComponentAssertions from './components/Assertions.js';\nexport * from './components/ActionRow.js';\nexport * from './components/button/Button.js';\nexport * from './components/Component.js';\nexport * from './components/Components.js';\nexport * from './components/textInput/TextInput.js';\nexport * as TextInputAssertions from './components/textInput/Assertions.js';\nexport * from './interactions/modals/Modal.js';\nexport * as ModalAssertions from './interactions/modals/Assertions.js';\n\nexport * from './components/selectMenu/BaseSelectMenu.js';\nexport * from './components/selectMenu/ChannelSelectMenu.js';\nexport * from './components/selectMenu/MentionableSelectMenu.js';\nexport * from './components/selectMenu/RoleSelectMenu.js';\nexport * from './components/selectMenu/StringSelectMenu.js';\n// TODO: Remove those aliases in v2\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuBuilder} instead.\n\t */\n\tStringSelectMenuBuilder as SelectMenuBuilder,\n} from './components/selectMenu/StringSelectMenu.js';\nexport {\n\t/**\n\t * @deprecated Will be removed in the next major version, use {@link StringSelectMenuOptionBuilder} instead.\n\t */\n\tStringSelectMenuOptionBuilder as SelectMenuOptionBuilder,\n} from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/StringSelectMenuOption.js';\nexport * from './components/selectMenu/UserSelectMenu.js';\n\nexport * as SlashCommandAssertions from './interactions/slashCommands/Assertions.js';\nexport * from './interactions/slashCommands/SlashCommandBuilder.js';\nexport * from './interactions/slashCommands/SlashCommandSubcommands.js';\nexport * from './interactions/slashCommands/options/boolean.js';\nexport * from './interactions/slashCommands/options/channel.js';\nexport * from './interactions/slashCommands/options/integer.js';\nexport * from './interactions/slashCommands/options/mentionable.js';\nexport * from './interactions/slashCommands/options/number.js';\nexport * from './interactions/slashCommands/options/role.js';\nexport * from './interactions/slashCommands/options/attachment.js';\nexport * from './interactions/slashCommands/options/string.js';\nexport * from './interactions/slashCommands/options/user.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionBase.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.js';\nexport * from './interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\nexport * from './interactions/slashCommands/mixins/NameAndDescription.js';\nexport * from './interactions/slashCommands/mixins/SharedSlashCommandOptions.js';\n\nexport * as ContextMenuCommandAssertions from './interactions/contextMenuCommands/Assertions.js';\nexport * from './interactions/contextMenuCommands/ContextMenuCommandBuilder.js';\n\nexport * from './util/componentUtil.js';\nexport * from './util/normalizeArray.js';\nexport * from './util/validation.js';\nexport * from '@discordjs/util';\n\n/**\n * The {@link https://github.com/discordjs/discord.js/blob/main/packages/builders/#readme | @discordjs/builders} version\n * that you are currently using.\n */\n// This needs to explicitly be `string` so it is not typed as a \"const string\" that gets injected by esbuild\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nexport const version: string = '1.4.0';\n","import { s } from '@sapphire/shapeshift';\nimport type { APIEmbedField } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const fieldNamePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(256)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldValuePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(1_024)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const fieldInlinePredicate = s.boolean.optional;\n\nexport const embedFieldPredicate = s\n\t.object({\n\t\tname: fieldNamePredicate,\n\t\tvalue: fieldValuePredicate,\n\t\tinline: fieldInlinePredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const embedFieldsArrayPredicate = embedFieldPredicate.array.setValidationEnabled(isValidationEnabled);\n\nexport const fieldLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateFieldLength(amountAdding: number, fields?: APIEmbedField[]): void {\n\tfieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n\nexport const authorNamePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const imageURLPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'attachment:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const urlPredicate = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:'],\n\t})\n\t.nullish.setValidationEnabled(isValidationEnabled);\n\nexport const embedAuthorPredicate = s\n\t.object({\n\t\tname: authorNamePredicate,\n\t\ticonURL: imageURLPredicate,\n\t\turl: urlPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const RGBPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(255)\n\t.setValidationEnabled(isValidationEnabled);\nexport const colorPredicate = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(0xffffff)\n\t.or(s.tuple([RGBPredicate, RGBPredicate, RGBPredicate]))\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(4_096)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const footerTextPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(2_048)\n\t.nullable.setValidationEnabled(isValidationEnabled);\n\nexport const embedFooterPredicate = s\n\t.object({\n\t\ttext: footerTextPredicate,\n\t\ticonURL: imageURLPredicate,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const timestampPredicate = s.union(s.number, s.date).nullable.setValidationEnabled(isValidationEnabled);\n\nexport const titlePredicate = fieldNamePredicate.nullable.setValidationEnabled(isValidationEnabled);\n","let validate = true;\n\nexport const enableValidators = () => (validate = true);\nexport const disableValidators = () => (validate = false);\nexport const isValidationEnabled = () => validate;\n","export function normalizeArray<T>(arr: RestOrArray<T>): T[] {\n\tif (Array.isArray(arr[0])) return arr[0];\n\treturn arr as T[];\n}\n\nexport type RestOrArray<T> = T[] | [T[]];\n","import type { APIEmbed, APIEmbedAuthor, APIEmbedField, APIEmbedFooter, APIEmbedImage } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport {\n\tcolorPredicate,\n\tdescriptionPredicate,\n\tembedAuthorPredicate,\n\tembedFieldsArrayPredicate,\n\tembedFooterPredicate,\n\timageURLPredicate,\n\ttimestampPredicate,\n\ttitlePredicate,\n\turlPredicate,\n\tvalidateFieldLength,\n} from './Assertions.js';\n\nexport type RGBTuple = [red: number, green: number, blue: number];\n\nexport interface IconData {\n\t/**\n\t * The URL of the icon\n\t */\n\ticonURL?: string;\n\t/**\n\t * The proxy URL of the icon\n\t */\n\tproxyIconURL?: string;\n}\n\nexport type EmbedAuthorData = IconData & Omit<APIEmbedAuthor, 'icon_url' | 'proxy_icon_url'>;\n\nexport type EmbedAuthorOptions = Omit<EmbedAuthorData, 'proxyIconURL'>;\n\nexport type EmbedFooterData = IconData & Omit<APIEmbedFooter, 'icon_url' | 'proxy_icon_url'>;\n\nexport type EmbedFooterOptions = Omit<EmbedFooterData, 'proxyIconURL'>;\n\nexport interface EmbedImageData extends Omit<APIEmbedImage, 'proxy_url'> {\n\t/**\n\t * The proxy URL for the image\n\t */\n\tproxyURL?: string;\n}\n/**\n * Represents a embed in a message (image/video preview, rich embed, etc.)\n */\nexport class EmbedBuilder {\n\tpublic readonly data: APIEmbed;\n\n\tpublic constructor(data: APIEmbed = {}) {\n\t\tthis.data = { ...data };\n\t\tif (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n\t}\n\n\t/**\n\t * Appends fields to the embed\n\t *\n\t * @remarks\n\t * This method accepts either an array of fields or a variable number of field parameters.\n\t * The maximum amount of fields that can be added is 25.\n\t * @example\n\t * Using an array\n\t * ```ts\n\t * const fields: APIEmbedField[] = ...;\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(fields);\n\t * ```\n\t * @example\n\t * Using rest parameters (variadic)\n\t * ```ts\n\t * const embed = new EmbedBuilder()\n\t * \t.addFields(\n\t * \t\t{ name: 'Field 1', value: 'Value 1' },\n\t * \t\t{ name: 'Field 2', value: 'Value 2' },\n\t * \t);\n\t * ```\n\t * @param fields - The fields to add\n\t */\n\tpublic addFields(...fields: RestOrArray<APIEmbedField>): this {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tfields = normalizeArray(fields);\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\n\t\tif (this.data.fields) this.data.fields.push(...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes, replaces, or inserts fields in the embed.\n\t *\n\t * @remarks\n\t * This method behaves similarly\n\t * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice}.\n\t * The maximum amount of fields that can be added is 25.\n\t *\n\t * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n\t * @example\n\t * Remove the first field\n\t * ```ts\n\t * embed.spliceFields(0, 1);\n\t * ```\n\t * @example\n\t * Remove the first n fields\n\t * ```ts\n\t * const n = 4\n\t * embed.spliceFields(0, n);\n\t * ```\n\t * @example\n\t * Remove the last field\n\t * ```ts\n\t * embed.spliceFields(-1, 1);\n\t * ```\n\t * @param index - The index to start at\n\t * @param deleteCount - The number of fields to remove\n\t * @param fields - The replacing field objects\n\t */\n\tpublic spliceFields(index: number, deleteCount: number, ...fields: APIEmbedField[]): this {\n\t\t// Ensure adding these fields won't exceed the 25 field limit\n\t\tvalidateFieldLength(fields.length - deleteCount, this.data.fields);\n\n\t\t// Data assertions\n\t\tembedFieldsArrayPredicate.parse(fields);\n\t\tif (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n\t\telse this.data.fields = fields;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the embed's fields\n\t *\n\t * @remarks\n\t * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,\n\t * it splices the entire array of fields, replacing them with the provided fields.\n\t *\n\t * You can set a maximum of 25 fields.\n\t * @param fields - The fields to set\n\t */\n\tpublic setFields(...fields: RestOrArray<APIEmbedField>) {\n\t\tthis.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the author of this embed\n\t *\n\t * @param options - The options for the author\n\t */\n\n\tpublic setAuthor(options: EmbedAuthorOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.author = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedAuthorPredicate.parse(options);\n\n\t\tthis.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the color of this embed\n\t *\n\t * @param color - The color of the embed\n\t */\n\tpublic setColor(color: RGBTuple | number | null): this {\n\t\t// Data assertions\n\t\tcolorPredicate.parse(color);\n\n\t\tif (Array.isArray(color)) {\n\t\t\tconst [red, green, blue] = color;\n\t\t\tthis.data.color = (red << 16) + (green << 8) + blue;\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.data.color = color ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this embed\n\t *\n\t * @param description - The description\n\t */\n\tpublic setDescription(description: string | null): this {\n\t\t// Data assertions\n\t\tdescriptionPredicate.parse(description);\n\n\t\tthis.data.description = description ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the footer of this embed\n\t *\n\t * @param options - The options for the footer\n\t */\n\tpublic setFooter(options: EmbedFooterOptions | null): this {\n\t\tif (options === null) {\n\t\t\tthis.data.footer = undefined;\n\t\t\treturn this;\n\t\t}\n\n\t\t// Data assertions\n\t\tembedFooterPredicate.parse(options);\n\n\t\tthis.data.footer = { text: options.text, icon_url: options.iconURL };\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the image of this embed\n\t *\n\t * @param url - The URL of the image\n\t */\n\tpublic setImage(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.image = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the thumbnail of this embed\n\t *\n\t * @param url - The URL of the thumbnail\n\t */\n\tpublic setThumbnail(url: string | null): this {\n\t\t// Data assertions\n\t\timageURLPredicate.parse(url);\n\n\t\tthis.data.thumbnail = url ? { url } : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timestamp of this embed\n\t *\n\t * @param timestamp - The timestamp or date\n\t */\n\tpublic setTimestamp(timestamp: Date | number | null = Date.now()): this {\n\t\t// Data assertions\n\t\ttimestampPredicate.parse(timestamp);\n\n\t\tthis.data.timestamp = timestamp ? new Date(timestamp).toISOString() : undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the title of this embed\n\t *\n\t * @param title - The title\n\t */\n\tpublic setTitle(title: string | null): this {\n\t\t// Data assertions\n\t\ttitlePredicate.parse(title);\n\n\t\tthis.data.title = title ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL of this embed\n\t *\n\t * @param url - The URL\n\t */\n\tpublic setURL(url: string | null): this {\n\t\t// Data assertions\n\t\turlPredicate.parse(url);\n\n\t\tthis.data.url = url ?? undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transforms the embed to a plain object\n\t */\n\tpublic toJSON(): APIEmbed {\n\t\treturn { ...this.data };\n\t}\n}\n","import type { URL } from 'node:url';\nimport type { Snowflake } from 'discord-api-types/globals';\n\n/**\n * Wraps the content inside a codeblock with no language\n *\n * @param content - The content to wrap\n */\nexport function codeBlock<C extends string>(content: C): `\\`\\`\\`\\n${C}\\n\\`\\`\\``;\n\n/**\n * Wraps the content inside a codeblock with the specified language\n *\n * @param language - The language for the codeblock\n * @param content - The content to wrap\n */\nexport function codeBlock<L extends string, C extends string>(language: L, content: C): `\\`\\`\\`${L}\\n${C}\\n\\`\\`\\``;\nexport function codeBlock(language: string, content?: string): string {\n\treturn typeof content === 'undefined' ? `\\`\\`\\`\\n${language}\\n\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\n\\`\\`\\``;\n}\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code\n *\n * @param content - The content to wrap\n */\nexport function inlineCode<C extends string>(content: C): `\\`${C}\\`` {\n\treturn `\\`${content}\\``;\n}\n\n/**\n * Formats the content into italic text\n *\n * @param content - The content to wrap\n */\nexport function italic<C extends string>(content: C): `_${C}_` {\n\treturn `_${content}_`;\n}\n\n/**\n * Formats the content into bold text\n *\n * @param content - The content to wrap\n */\nexport function bold<C extends string>(content: C): `**${C}**` {\n\treturn `**${content}**`;\n}\n\n/**\n * Formats the content into underscored text\n *\n * @param content - The content to wrap\n */\nexport function underscore<C extends string>(content: C): `__${C}__` {\n\treturn `__${content}__`;\n}\n\n/**\n * Formats the content into strike-through text\n *\n * @param content - The content to wrap\n */\nexport function strikethrough<C extends string>(content: C): `~~${C}~~` {\n\treturn `~~${content}~~`;\n}\n\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content - The content to wrap\n */\nexport function quote<C extends string>(content: C): `> ${C}` {\n\treturn `> ${content}`;\n}\n\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it\n *\n * @param content - The content to wrap\n */\nexport function blockQuote<C extends string>(content: C): `>>> ${C}` {\n\treturn `>>> ${content}`;\n}\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url - The URL to wrap\n */\nexport function hideLinkEmbed<C extends string>(url: C): `<${C}>`;\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding\n *\n * @param url - The URL to wrap\n */\nexport function hideLinkEmbed(url: URL): `<${string}>`;\nexport function hideLinkEmbed(url: URL | string) {\n\treturn `<${url}>`;\n}\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n * @param url - The URL the content links to\n */\nexport function hyperlink<C extends string>(content: C, url: URL): `[${C}](${string})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n * @param url - The URL the content links to\n */\nexport function hyperlink<C extends string, U extends string>(content: C, url: U): `[${C}](${U})`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n * @param url - The URL the content links to\n * @param title - The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, T extends string>(\n\tcontent: C,\n\turl: URL,\n\ttitle: T,\n): `[${C}](${string} \"${T}\")`;\n\n/**\n * Formats the content and the URL into a masked URL\n *\n * @param content - The content to display\n * @param url - The URL the content links to\n * @param title - The title shown when hovering on the masked link\n */\nexport function hyperlink<C extends string, U extends string, T extends string>(\n\tcontent: C,\n\turl: U,\n\ttitle: T,\n): `[${C}](${U} \"${T}\")`;\nexport function hyperlink(content: string, url: URL | string, title?: string) {\n\treturn title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\n/**\n * Wraps the content inside spoiler (hidden text)\n *\n * @param content - The content to wrap\n */\nexport function spoiler<C extends string>(content: C): `||${C}||` {\n\treturn `||${content}||`;\n}\n\n/**\n * Formats a user ID into a user mention\n *\n * @param userId - The user ID to format\n */\nexport function userMention<C extends Snowflake>(userId: C): `<@${C}>` {\n\treturn `<@${userId}>`;\n}\n\n/**\n * Formats a channel ID into a channel mention\n *\n * @param channelId - The channel ID to format\n */\nexport function channelMention<C extends Snowflake>(channelId: C): `<#${C}>` {\n\treturn `<#${channelId}>`;\n}\n\n/**\n * Formats a role ID into a role mention\n *\n * @param roleId - The role ID to format\n */\nexport function roleMention<C extends Snowflake>(roleId: C): `<@&${C}>` {\n\treturn `<@&${roleId}>`;\n}\n\n/**\n * Formats an application command name, subcommand group name, subcommand name, and ID into an application command mention\n *\n * @param commandName - The application command name to format\n * @param subcommandGroupName - The subcommand group name to format\n * @param subcommandName - The subcommand name to format\n * @param commandId - The application command ID to format\n */\nexport function chatInputApplicationCommandMention<\n\tN extends string,\n\tG extends string,\n\tS extends string,\n\tI extends Snowflake,\n>(commandName: N, subcommandGroupName: G, subcommandName: S, commandId: I): `</${N} ${G} ${S}:${I}>`;\n\n/**\n * Formats an application command name, subcommand name, and ID into an application command mention\n *\n * @param commandName - The application command name to format\n * @param subcommandName - The subcommand name to format\n * @param commandId - The application command ID to format\n */\nexport function chatInputApplicationCommandMention<N extends string, S extends string, I extends Snowflake>(\n\tcommandName: N,\n\tsubcommandName: S,\n\tcommandId: I,\n): `</${N} ${S}:${I}>`;\n\n/**\n * Formats an application command name and ID into an application command mention\n *\n * @param commandName - The application command name to format\n * @param commandId - The application command ID to format\n */\nexport function chatInputApplicationCommandMention<N extends string, I extends Snowflake>(\n\tcommandName: N,\n\tcommandId: I,\n): `</${N}:${I}>`;\n\n/**\n * Formats an application command name, subcommand group name, subcommand name, and ID into an application command mention\n *\n * @param commandName - The application command name to format\n * @param subcommandGroupName - The subcommand group name to format\n * @param subcommandName - The subcommand name to format\n * @param commandId - The application command ID to format\n */\nexport function chatInputApplicationCommandMention<\n\tN extends string,\n\tG extends Snowflake | string,\n\tS extends Snowflake | string,\n\tI extends Snowflake,\n>(\n\tcommandName: N,\n\tsubcommandGroupName: G,\n\tsubcommandName?: S,\n\tcommandId?: I,\n): `</${N} ${G} ${S}:${I}>` | `</${N} ${G}:${S}>` | `</${N}:${G}>` {\n\tif (typeof commandId !== 'undefined') {\n\t\treturn `</${commandName} ${subcommandGroupName} ${subcommandName!}:${commandId}>`;\n\t}\n\n\tif (typeof subcommandName !== 'undefined') {\n\t\treturn `</${commandName} ${subcommandGroupName}:${subcommandName}>`;\n\t}\n\n\treturn `</${commandName}:${subcommandGroupName}>`;\n}\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: false): `<:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n * @param animated - Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: true): `<a:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n * @param animated - Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: boolean): `<:_:${C}>` | `<a:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n *\n * @param emojiId - The emoji ID to format\n * @param animated - Whether the emoji is animated or not. Defaults to `false`\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated = false): `<:_:${C}>` | `<a:_:${C}>` {\n\treturn `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\n/**\n * Formats a channel link for a direct message channel.\n *\n * @param channelId - The channel's id\n */\nexport function channelLink<C extends Snowflake>(channelId: C): `https://discord.com/channels/@me/${C}`;\n\n/**\n * Formats a channel link for a guild channel.\n *\n * @param channelId - The channel's id\n * @param guildId - The guild's id\n */\nexport function channelLink<C extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tguildId: G,\n): `https://discord.com/channels/${G}/${C}`;\n\nexport function channelLink<C extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tguildId?: G,\n): `https://discord.com/channels/@me/${C}` | `https://discord.com/channels/${G}/${C}` {\n\treturn `https://discord.com/channels/${guildId ?? '@me'}/${channelId}`;\n}\n\n/**\n * Formats a message link for a direct message channel.\n *\n * @param channelId - The channel's id\n * @param messageId - The message's id\n */\nexport function messageLink<C extends Snowflake, M extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n): `https://discord.com/channels/@me/${C}/${M}`;\n\n/**\n * Formats a message link for a guild channel.\n *\n * @param channelId - The channel's id\n * @param messageId - The message's id\n * @param guildId - The guild's id\n */\nexport function messageLink<C extends Snowflake, M extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n\tguildId: G,\n): `https://discord.com/channels/${G}/${C}/${M}`;\n\nexport function messageLink<C extends Snowflake, M extends Snowflake, G extends Snowflake>(\n\tchannelId: C,\n\tmessageId: M,\n\tguildId?: G,\n): `https://discord.com/channels/@me/${C}/${M}` | `https://discord.com/channels/${G}/${C}/${M}` {\n\treturn `${typeof guildId === 'undefined' ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;\n}\n\n/**\n * Formats a date into a short date-time string\n *\n * @param date - The date to format, defaults to the current time\n */\nexport function time(date?: Date): `<t:${bigint}>`;\n\n/**\n * Formats a date given a format style\n *\n * @param date - The date to format\n * @param style - The style to use\n */\nexport function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds - The time to format, represents an UNIX timestamp in seconds\n */\nexport function time<C extends number>(seconds: C): `<t:${C}>`;\n\n/**\n * Formats the given timestamp into a short date-time string\n *\n * @param seconds - The time to format, represents an UNIX timestamp in seconds\n * @param style - The style to use\n */\nexport function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;\nexport function time(timeOrSeconds?: Date | number, style?: TimestampStylesString): string {\n\tif (typeof timeOrSeconds !== 'number') {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttimeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1_000);\n\t}\n\n\treturn typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\n/**\n * The {@link https://discord.com/developers/docs/reference#message-formatting-timestamp-styles | message formatting timestamp styles} supported by Discord\n */\nexport const TimestampStyles = {\n\t/**\n\t * Short time format, consisting of hours and minutes, e.g. 16:20\n\t */\n\tShortTime: 't',\n\n\t/**\n\t * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30\n\t */\n\tLongTime: 'T',\n\n\t/**\n\t * Short date format, consisting of day, month, and year, e.g. 20/04/2021\n\t */\n\tShortDate: 'd',\n\n\t/**\n\t * Long date format, consisting of day, month, and year, e.g. 20 April 2021\n\t */\n\tLongDate: 'D',\n\n\t/**\n\t * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20\n\t */\n\tShortDateTime: 'f',\n\n\t/**\n\t * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20\n\t */\n\tLongDateTime: 'F',\n\n\t/**\n\t * Relative time format, consisting of a relative duration format, e.g. 2 months ago\n\t */\n\tRelativeTime: 'R',\n} as const;\n\n/**\n * The possible values, see {@link TimestampStyles} for more information\n */\nexport type TimestampStylesString = typeof TimestampStyles[keyof typeof TimestampStyles];\n\n/**\n * An enum with all the available faces from Discord's native slash commands\n */\nexport enum Faces {\n\t/**\n\t * ¯\\\\_(ツ)\\\\_/¯\n\t */\n\tShrug = '¯\\\\_(ツ)\\\\_/¯',\n\n\t/**\n\t * (╯°□°）╯︵ ┻━┻\n\t */\n\tTableflip = '(╯°□°）╯︵ ┻━┻',\n\n\t/**\n\t * ┬─┬ ノ( ゜-゜ノ)\n\t */\n\tUnflip = '┬─┬ ノ( ゜-゜ノ)',\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ButtonStyle, ChannelType, type APIMessageComponentEmoji } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../util/validation.js';\nimport { StringSelectMenuOptionBuilder } from './selectMenu/StringSelectMenuOption.js';\n\nexport const customIdValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const emojiValidator = s\n\t.object({\n\t\tid: s.string,\n\t\tname: s.string,\n\t\tanimated: s.boolean,\n\t})\n\t.partial.strict.setValidationEnabled(isValidationEnabled);\n\nexport const disabledValidator = s.boolean;\n\nexport const buttonLabelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(80)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const buttonStyleValidator = s.nativeEnum(ButtonStyle);\n\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nexport const minMaxValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const labelValueDescriptionValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const jsonOptionValidator = s\n\t.object({\n\t\tlabel: labelValueDescriptionValidator,\n\t\tvalue: labelValueDescriptionValidator,\n\t\tdescription: labelValueDescriptionValidator.optional,\n\t\temoji: emojiValidator.optional,\n\t\tdefault: s.boolean.optional,\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport const optionValidator = s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\n\nexport const optionsValidator = optionValidator.array\n\t.lengthGreaterThanOrEqual(0)\n\t.setValidationEnabled(isValidationEnabled);\nexport const optionsLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(25)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredSelectMenuParameters(options: StringSelectMenuOptionBuilder[], customId?: string) {\n\tcustomIdValidator.parse(customId);\n\toptionsValidator.parse(options);\n}\n\nexport const defaultValidator = s.boolean;\n\nexport function validateRequiredSelectMenuOptionParameters(label?: string, value?: string) {\n\tlabelValueDescriptionValidator.parse(label);\n\tlabelValueDescriptionValidator.parse(value);\n}\n\nexport const channelTypesValidator = s.nativeEnum(ChannelType).array.setValidationEnabled(isValidationEnabled);\n\nexport const urlValidator = s.string\n\t.url({\n\t\tallowedProtocols: ['http:', 'https:', 'discord:'],\n\t})\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredButtonParameters(\n\tstyle?: ButtonStyle,\n\tlabel?: string,\n\temoji?: APIMessageComponentEmoji,\n\tcustomId?: string,\n\turl?: string,\n) {\n\tif (url && customId) {\n\t\tthrow new RangeError('URL and custom id are mutually exclusive');\n\t}\n\n\tif (!label && !emoji) {\n\t\tthrow new RangeError('Buttons must have a label and/or an emoji');\n\t}\n\n\tif (style === ButtonStyle.Link) {\n\t\tif (!url) {\n\t\t\tthrow new RangeError('Link buttons must have a url');\n\t\t}\n\t} else if (url) {\n\t\tthrow new RangeError('Non-link buttons cannot have a url');\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type { APIMessageComponentEmoji, APISelectMenuOption } from 'discord-api-types/v10';\nimport {\n\tdefaultValidator,\n\temojiValidator,\n\tlabelValueDescriptionValidator,\n\tvalidateRequiredSelectMenuOptionParameters,\n} from '../Assertions.js';\n\n/**\n * Represents an option within a string select menu component\n */\nexport class StringSelectMenuOptionBuilder implements JSONEncodable<APISelectMenuOption> {\n\t/**\n\t * Creates a new string select menu option from API data\n\t *\n\t * @param data - The API data to create this string select menu option with\n\t * @example\n\t * Creating a string select menu option from an API data object\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tlabel: 'catchy label',\n\t * \tvalue: '1',\n\t * });\n\t * ```\n\t * @example\n\t * Creating a string select menu option using setters and API data\n\t * ```ts\n\t * const selectMenuOption = new SelectMenuOptionBuilder({\n\t * \tdefault: true,\n\t * \tvalue: '1',\n\t * })\n\t * \t.setLabel('woah')\n\t * ```\n\t */\n\tpublic constructor(public data: Partial<APISelectMenuOption> = {}) {}\n\n\t/**\n\t * Sets the label of this option\n\t *\n\t * @param label - The label to show on this option\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValueDescriptionValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this option\n\t *\n\t * @param value - The value of this option\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = labelValueDescriptionValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description of this option\n\t *\n\t * @param description - The description of this option\n\t */\n\tpublic setDescription(description: string) {\n\t\tthis.data.description = labelValueDescriptionValidator.parse(description);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this option is selected by default\n\t *\n\t * @param isDefault - Whether this option is selected by default\n\t */\n\tpublic setDefault(isDefault = true) {\n\t\tthis.data.default = defaultValidator.parse(isDefault);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this option\n\t *\n\t * @param emoji - The emoji to display on this option\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APISelectMenuOption {\n\t\tvalidateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APISelectMenuOption;\n\t}\n}\n","/* eslint-disable jsdoc/check-param-names */\n\nimport {\n\ttype APIActionRowComponent,\n\tComponentType,\n\ttype APIMessageActionRowComponent,\n\ttype APIModalActionRowComponent,\n\ttype APIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray.js';\nimport { ComponentBuilder } from './Component.js';\nimport { createComponentBuilder } from './Components.js';\nimport type { ButtonBuilder } from './button/Button.js';\nimport type { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport type { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport type { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport type { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport type { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport type { TextInputBuilder } from './textInput/TextInput.js';\n\nexport type MessageComponentBuilder =\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>\n\t| MessageActionRowComponentBuilder;\nexport type ModalComponentBuilder = ActionRowBuilder<ModalActionRowComponentBuilder> | ModalActionRowComponentBuilder;\nexport type MessageActionRowComponentBuilder =\n\t| ButtonBuilder\n\t| ChannelSelectMenuBuilder\n\t| MentionableSelectMenuBuilder\n\t| RoleSelectMenuBuilder\n\t| StringSelectMenuBuilder\n\t| UserSelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\t/**\n\t * Creates a new action row from API data\n\t *\n\t * @param data - The API data to create this action row with\n\t * @example\n\t * Creating an action row from an API data object\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Type something\",\n\t * \t\t\tstyle: TextInputStyle.Short,\n\t * \t\t\ttype: ComponentType.TextInput,\n\t * \t\t},\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating an action row using setters and API data\n\t * ```ts\n\t * const actionRow = new ActionRowBuilder({\n\t * \tcomponents: [\n\t * \t\t{\n\t * \t\t\tcustom_id: \"custom id\",\n\t * \t\t\tlabel: \"Click me\",\n\t * \t\t\tstyle: ButtonStyle.Primary,\n\t * \t\t\ttype: ComponentType.Button,\n\t * \t\t},\n\t * \t],\n\t * })\n\t * \t.addComponents(button2, button3);\n\t * ```\n\t */\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIActionRowComponentTypes,\n\tAPIBaseComponent,\n\tComponentType,\n} from 'discord-api-types/v10';\n\nexport type AnyAPIActionRowComponent = APIActionRowComponent<APIActionRowComponentTypes> | APIActionRowComponentTypes;\n\n/**\n * Represents a discord component\n *\n * @typeParam DataType - The type of internal API data that is stored within the component\n */\nexport abstract class ComponentBuilder<\n\tDataType extends Partial<APIBaseComponent<ComponentType>> = APIBaseComponent<ComponentType>,\n> implements JSONEncodable<AnyAPIActionRowComponent>\n{\n\t/**\n\t * The API data associated with this component\n\t */\n\tpublic readonly data: Partial<DataType>;\n\n\t/**\n\t * Serializes this component to an API-compatible JSON object\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic abstract toJSON(): AnyAPIActionRowComponent;\n\n\tpublic constructor(data: Partial<DataType>) {\n\t\tthis.data = data;\n\t}\n}\n","import { ComponentType, type APIMessageComponent, type APIModalComponent } from 'discord-api-types/v10';\nimport {\n\tActionRowBuilder,\n\ttype AnyComponentBuilder,\n\ttype MessageComponentBuilder,\n\ttype ModalComponentBuilder,\n} from './ActionRow.js';\nimport { ComponentBuilder } from './Component.js';\nimport { ButtonBuilder } from './button/Button.js';\nimport { ChannelSelectMenuBuilder } from './selectMenu/ChannelSelectMenu.js';\nimport { MentionableSelectMenuBuilder } from './selectMenu/MentionableSelectMenu.js';\nimport { RoleSelectMenuBuilder } from './selectMenu/RoleSelectMenu.js';\nimport { StringSelectMenuBuilder } from './selectMenu/StringSelectMenu.js';\nimport { UserSelectMenuBuilder } from './selectMenu/UserSelectMenu.js';\nimport { TextInputBuilder } from './textInput/TextInput.js';\n\nexport interface MappedComponentTypes {\n\t[ComponentType.ActionRow]: ActionRowBuilder<AnyComponentBuilder>;\n\t[ComponentType.Button]: ButtonBuilder;\n\t[ComponentType.StringSelect]: StringSelectMenuBuilder;\n\t[ComponentType.TextInput]: TextInputBuilder;\n\t[ComponentType.UserSelect]: UserSelectMenuBuilder;\n\t[ComponentType.RoleSelect]: RoleSelectMenuBuilder;\n\t[ComponentType.MentionableSelect]: MentionableSelectMenuBuilder;\n\t[ComponentType.ChannelSelect]: ChannelSelectMenuBuilder;\n}\n\n/**\n * Factory for creating components from API data\n *\n * @param data - The api data to transform to a component class\n */\nexport function createComponentBuilder<T extends keyof MappedComponentTypes>(\n\t// eslint-disable-next-line @typescript-eslint/sort-type-union-intersection-members\n\tdata: (APIModalComponent | APIMessageComponent) & { type: T },\n): MappedComponentTypes[T];\nexport function createComponentBuilder<C extends MessageComponentBuilder | ModalComponentBuilder>(data: C): C;\nexport function createComponentBuilder(\n\tdata: APIMessageComponent | APIModalComponent | MessageComponentBuilder,\n): ComponentBuilder {\n\tif (data instanceof ComponentBuilder) {\n\t\treturn data;\n\t}\n\n\tswitch (data.type) {\n\t\tcase ComponentType.ActionRow:\n\t\t\treturn new ActionRowBuilder(data);\n\t\tcase ComponentType.Button:\n\t\t\treturn new ButtonBuilder(data);\n\t\tcase ComponentType.StringSelect:\n\t\t\treturn new StringSelectMenuBuilder(data);\n\t\tcase ComponentType.TextInput:\n\t\t\treturn new TextInputBuilder(data);\n\t\tcase ComponentType.UserSelect:\n\t\t\treturn new UserSelectMenuBuilder(data);\n\t\tcase ComponentType.RoleSelect:\n\t\t\treturn new RoleSelectMenuBuilder(data);\n\t\tcase ComponentType.MentionableSelect:\n\t\t\treturn new MentionableSelectMenuBuilder(data);\n\t\tcase ComponentType.ChannelSelect:\n\t\t\treturn new ChannelSelectMenuBuilder(data);\n\t\tdefault:\n\t\t\t// @ts-expect-error: This case can still occur if we get a newer unsupported component type\n\t\t\tthrow new Error(`Cannot properly serialize component type: ${data.type}`);\n\t}\n}\n","import {\n\tComponentType,\n\ttype APIMessageComponentEmoji,\n\ttype APIButtonComponent,\n\ttype APIButtonComponentWithURL,\n\ttype APIButtonComponentWithCustomId,\n\ttype ButtonStyle,\n} from 'discord-api-types/v10';\nimport {\n\tbuttonLabelValidator,\n\tbuttonStyleValidator,\n\tcustomIdValidator,\n\tdisabledValidator,\n\temojiValidator,\n\turlValidator,\n\tvalidateRequiredButtonParameters,\n} from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\n/**\n * Represents a button component\n */\nexport class ButtonBuilder extends ComponentBuilder<APIButtonComponent> {\n\t/**\n\t * Creates a new button from API data\n\t *\n\t * @param data - The API data to create this button with\n\t * @example\n\t * Creating a button from an API data object\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tcustom_id: 'a cool button',\n\t * \tstyle: ButtonStyle.Primary,\n\t * \tlabel: 'Click Me',\n\t * \temoji: {\n\t * \t\tname: 'smile',\n\t * \t\tid: '123456789012345678',\n\t * \t},\n\t * });\n\t * ```\n\t * @example\n\t * Creating a button using setters and API data\n\t * ```ts\n\t * const button = new ButtonBuilder({\n\t * \tstyle: ButtonStyle.Secondary,\n\t * \tlabel: 'Click Me',\n\t * })\n\t * \t.setEmoji({ name: '🙂' })\n\t * \t.setCustomId('another cool button');\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIButtonComponent>) {\n\t\tsuper({ type: ComponentType.Button, ...data });\n\t}\n\n\t/**\n\t * Sets the style of this button\n\t *\n\t * @param style - The style of the button\n\t */\n\tpublic setStyle(style: ButtonStyle) {\n\t\tthis.data.style = buttonStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the URL for this button\n\t *\n\t * @remarks\n\t * This method is only available to buttons using the `Link` button style.\n\t * Only three types of URL schemes are currently supported: `https://`, `http://` and `discord://`\n\t * @param url - The URL to open when this button is clicked\n\t */\n\tpublic setURL(url: string) {\n\t\t(this.data as APIButtonComponentWithURL).url = urlValidator.parse(url);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this button\n\t *\n\t * @remarks\n\t * This method is only applicable to buttons that are not using the `Link` button style.\n\t * @param customId - The custom id to use for this button\n\t */\n\tpublic setCustomId(customId: string) {\n\t\t(this.data as APIButtonComponentWithCustomId).custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the emoji to display on this button\n\t *\n\t * @param emoji - The emoji to display on this button\n\t */\n\tpublic setEmoji(emoji: APIMessageComponentEmoji) {\n\t\tthis.data.emoji = emojiValidator.parse(emoji);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this button is disabled\n\t *\n\t * @param disabled - Whether to disable this button\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this button\n\t *\n\t * @param label - The label to display on this button\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = buttonLabelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIButtonComponent {\n\t\tvalidateRequiredButtonParameters(\n\t\t\tthis.data.style,\n\t\t\tthis.data.label,\n\t\t\tthis.data.emoji,\n\t\t\t(this.data as APIButtonComponentWithCustomId).custom_id,\n\t\t\t(this.data as APIButtonComponentWithURL).url,\n\t\t);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIButtonComponent;\n\t}\n}\n","import type { APIChannelSelectComponent, ChannelType } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { channelTypesValidator, customIdValidator } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class ChannelSelectMenuBuilder extends BaseSelectMenuBuilder<APIChannelSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new ChannelSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n\t * \t.setMinValues(2)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIChannelSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.ChannelSelect });\n\t}\n\n\tpublic addChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttypes = normalizeArray(types);\n\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.push(...channelTypesValidator.parse(types));\n\t\treturn this;\n\t}\n\n\tpublic setChannelTypes(...types: RestOrArray<ChannelType>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\ttypes = normalizeArray(types);\n\n\t\tthis.data.channel_types ??= [];\n\t\tthis.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(types));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIChannelSelectComponent {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APIChannelSelectComponent;\n\t}\n}\n","import type { APISelectMenuComponent } from 'discord-api-types/v10';\nimport { customIdValidator, disabledValidator, minMaxValidator, placeholderValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\n\nexport class BaseSelectMenuBuilder<\n\tSelectMenuType extends APISelectMenuComponent,\n> extends ComponentBuilder<SelectMenuType> {\n\t/**\n\t * Sets the placeholder for this select menu\n\t *\n\t * @param placeholder - The placeholder to use for this select menu\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum values that must be selected in the select menu\n\t *\n\t * @param minValues - The minimum values that must be selected\n\t */\n\tpublic setMinValues(minValues: number) {\n\t\tthis.data.min_values = minMaxValidator.parse(minValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum values that must be selected in the select menu\n\t *\n\t * @param maxValues - The maximum values that must be selected\n\t */\n\tpublic setMaxValues(maxValues: number) {\n\t\tthis.data.max_values = minMaxValidator.parse(maxValues);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id for this select menu\n\t *\n\t * @param customId - The custom id to use for this select menu\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this select menu is disabled\n\t *\n\t * @param disabled - Whether this select menu is disabled\n\t */\n\tpublic setDisabled(disabled = true) {\n\t\tthis.data.disabled = disabledValidator.parse(disabled);\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): SelectMenuType {\n\t\tcustomIdValidator.parse(this.data.custom_id);\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as SelectMenuType;\n\t}\n}\n","import type { APIMentionableSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class MentionableSelectMenuBuilder extends BaseSelectMenuBuilder<APIMentionableSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new MentionableSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIMentionableSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.MentionableSelect });\n\t}\n}\n","import type { APIRoleSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class RoleSelectMenuBuilder extends BaseSelectMenuBuilder<APIRoleSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new RoleSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIRoleSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.RoleSelect });\n\t}\n}\n","import type { APIStringSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType, type APISelectMenuOption } from 'discord-api-types/v10';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { jsonOptionValidator, optionsLengthValidator, validateRequiredSelectMenuParameters } from '../Assertions.js';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\nimport { StringSelectMenuOptionBuilder } from './StringSelectMenuOption.js';\n\n/**\n * Represents a string select menu component\n */\nexport class StringSelectMenuBuilder extends BaseSelectMenuBuilder<APIStringSelectComponent> {\n\t/**\n\t * The options within this select menu\n\t */\n\tpublic readonly options: StringSelectMenuOptionBuilder[];\n\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * \toptions: [\n\t * \t\t{ label: 'option 1', value: '1' },\n\t * \t\t{ label: 'option 2', value: '2' },\n\t * \t\t{ label: 'option 3', value: '3' },\n\t * \t],\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new StringSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * \t.addOptions({\n\t * \t\tlabel: 'Catchy',\n\t * \t\tvalue: 'catch',\n\t * \t});\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIStringSelectComponent>) {\n\t\tconst { options, ...initData } = data ?? {};\n\t\tsuper({ ...initData, type: ComponentType.StringSelect });\n\t\tthis.options = options?.map((option: APISelectMenuOption) => new StringSelectMenuOptionBuilder(option)) ?? [];\n\t}\n\n\t/**\n\t * Adds options to this select menu\n\t *\n\t * @param options - The options to add to this select menu\n\t * @returns\n\t */\n\tpublic addOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toptions = normalizeArray(options);\n\t\toptionsLengthValidator.parse(this.options.length + options.length);\n\t\tthis.options.push(\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option)),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the options on this select menu\n\t *\n\t * @param options - The options to set on this select menu\n\t */\n\tpublic setOptions(...options: RestOrArray<APISelectMenuOption | StringSelectMenuOptionBuilder>) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\toptions = normalizeArray(options);\n\t\toptionsLengthValidator.parse(options.length);\n\t\tthis.options.splice(\n\t\t\t0,\n\t\t\tthis.options.length,\n\t\t\t...options.map((option) =>\n\t\t\t\toption instanceof StringSelectMenuOptionBuilder\n\t\t\t\t\t? option\n\t\t\t\t\t: new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(option)),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic override toJSON(): APIStringSelectComponent {\n\t\tvalidateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t} as APIStringSelectComponent;\n\t}\n}\n","import type { APIUserSelectComponent } from 'discord-api-types/v10';\nimport { ComponentType } from 'discord-api-types/v10';\nimport { BaseSelectMenuBuilder } from './BaseSelectMenu.js';\n\nexport class UserSelectMenuBuilder extends BaseSelectMenuBuilder<APIUserSelectComponent> {\n\t/**\n\t * Creates a new select menu from API data\n\t *\n\t * @param data - The API data to create this select menu with\n\t * @example\n\t * Creating a select menu from an API data object\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tplaceholder: 'select an option',\n\t * \tmax_values: 2,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu using setters and API data\n\t * ```ts\n\t * const selectMenu = new UserSelectMenuBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * })\n\t * \t.setMinValues(1)\n\t * ```\n\t */\n\tpublic constructor(data?: Partial<APIUserSelectComponent>) {\n\t\tsuper({ ...data, type: ComponentType.UserSelect });\n\t}\n}\n","import { isJSONEncodable, type Equatable, type JSONEncodable } from '@discordjs/util';\nimport { ComponentType, type TextInputStyle, type APITextInputComponent } from 'discord-api-types/v10';\nimport isEqual from 'fast-deep-equal';\nimport { customIdValidator } from '../Assertions.js';\nimport { ComponentBuilder } from '../Component.js';\nimport {\n\tmaxLengthValidator,\n\tminLengthValidator,\n\tplaceholderValidator,\n\trequiredValidator,\n\tvalueValidator,\n\tvalidateRequiredParameters,\n\tlabelValidator,\n\ttextInputStyleValidator,\n} from './Assertions.js';\n\nexport class TextInputBuilder\n\textends ComponentBuilder<APITextInputComponent>\n\timplements Equatable<APITextInputComponent | JSONEncodable<APITextInputComponent>>\n{\n\t/**\n\t * Creates a new text input from API data\n\t *\n\t * @param data - The API data to create this text input with\n\t * @example\n\t * Creating a select menu option from an API data object\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tcustom_id: 'a cool select menu',\n\t * \tlabel: 'Type something',\n\t * \tstyle: TextInputStyle.Short,\n\t * });\n\t * ```\n\t * @example\n\t * Creating a select menu option using setters and API data\n\t * ```ts\n\t * const textInput = new TextInputBuilder({\n\t * \tlabel: 'Type something else',\n\t * })\n\t * \t.setCustomId('woah')\n\t * \t.setStyle(TextInputStyle.Paragraph);\n\t * ```\n\t */\n\tpublic constructor(data?: APITextInputComponent & { type?: ComponentType.TextInput }) {\n\t\tsuper({ type: ComponentType.TextInput, ...data });\n\t}\n\n\t/**\n\t * Sets the custom id for this text input\n\t *\n\t * @param customId - The custom id of this text input\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the label for this text input\n\t *\n\t * @param label - The label for this text input\n\t */\n\tpublic setLabel(label: string) {\n\t\tthis.data.label = labelValidator.parse(label);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the style for this text input\n\t *\n\t * @param style - The style for this text input\n\t */\n\tpublic setStyle(style: TextInputStyle) {\n\t\tthis.data.style = textInputStyleValidator.parse(style);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of text for this text input\n\t *\n\t * @param minLength - The minimum length of text for this text input\n\t */\n\tpublic setMinLength(minLength: number) {\n\t\tthis.data.min_length = minLengthValidator.parse(minLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the maximum length of text for this text input\n\t *\n\t * @param maxLength - The maximum length of text for this text input\n\t */\n\tpublic setMaxLength(maxLength: number) {\n\t\tthis.data.max_length = maxLengthValidator.parse(maxLength);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the placeholder of this text input\n\t *\n\t * @param placeholder - The placeholder of this text input\n\t */\n\tpublic setPlaceholder(placeholder: string) {\n\t\tthis.data.placeholder = placeholderValidator.parse(placeholder);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of this text input\n\t *\n\t * @param value - The value for this text input\n\t */\n\tpublic setValue(value: string) {\n\t\tthis.data.value = valueValidator.parse(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether this text input is required\n\t *\n\t * @param required - Whether this text input is required\n\t */\n\tpublic setRequired(required = true) {\n\t\tthis.data.required = requiredValidator.parse(required);\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APITextInputComponent {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t} as APITextInputComponent;\n\t}\n\n\t/**\n\t * {@inheritDoc Equatable.equals}\n\t */\n\tpublic equals(other: APITextInputComponent | JSONEncodable<APITextInputComponent>): boolean {\n\t\tif (isJSONEncodable(other)) {\n\t\t\treturn isEqual(other.toJSON(), this.data);\n\t\t}\n\n\t\treturn isEqual(other, this.data);\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { TextInputStyle } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport { customIdValidator } from '../Assertions.js';\n\nexport const textInputStyleValidator = s.nativeEnum(TextInputStyle);\nexport const minLengthValidator = s.number.int\n\t.greaterThanOrEqual(0)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const maxLengthValidator = s.number.int\n\t.greaterThanOrEqual(1)\n\t.lessThanOrEqual(4_000)\n\t.setValidationEnabled(isValidationEnabled);\nexport const requiredValidator = s.boolean;\nexport const valueValidator = s.string.lengthLessThanOrEqual(4_000).setValidationEnabled(isValidationEnabled);\nexport const placeholderValidator = s.string.lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nexport const labelValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(customId?: string, style?: TextInputStyle, label?: string) {\n\tcustomIdValidator.parse(customId);\n\ttextInputStyleValidator.parse(style);\n\tlabelValidator.parse(label);\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { isValidationEnabled } from '../../util/validation.js';\n\nexport const titleValidator = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(45)\n\t.setValidationEnabled(isValidationEnabled);\nexport const componentsValidator = s\n\t.instance(ActionRowBuilder)\n\t.array.lengthGreaterThanOrEqual(1)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateRequiredParameters(\n\tcustomId?: string,\n\ttitle?: string,\n\tcomponents?: ActionRowBuilder<ModalActionRowComponentBuilder>[],\n) {\n\tcustomIdValidator.parse(customId);\n\ttitleValidator.parse(title);\n\tcomponentsValidator.parse(components);\n}\n","import type { JSONEncodable } from '@discordjs/util';\nimport type {\n\tAPIActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIModalInteractionResponseCallbackData,\n} from 'discord-api-types/v10';\nimport { ActionRowBuilder, type ModalActionRowComponentBuilder } from '../../components/ActionRow.js';\nimport { customIdValidator } from '../../components/Assertions.js';\nimport { createComponentBuilder } from '../../components/Components.js';\nimport { normalizeArray, type RestOrArray } from '../../util/normalizeArray.js';\nimport { titleValidator, validateRequiredParameters } from './Assertions.js';\n\nexport class ModalBuilder implements JSONEncodable<APIModalInteractionResponseCallbackData> {\n\tpublic readonly data: Partial<APIModalInteractionResponseCallbackData>;\n\n\tpublic readonly components: ActionRowBuilder<ModalActionRowComponentBuilder>[] = [];\n\n\tpublic constructor({ components, ...data }: Partial<APIModalInteractionResponseCallbackData> = {}) {\n\t\tthis.data = { ...data };\n\t\tthis.components = (components?.map((component) => createComponentBuilder(component)) ??\n\t\t\t[]) as ActionRowBuilder<ModalActionRowComponentBuilder>[];\n\t}\n\n\t/**\n\t * Sets the title of the modal\n\t *\n\t * @param title - The title of the modal\n\t */\n\tpublic setTitle(title: string) {\n\t\tthis.data.title = titleValidator.parse(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the custom id of the modal\n\t *\n\t * @param customId - The custom id of this modal\n\t */\n\tpublic setCustomId(customId: string) {\n\t\tthis.data.custom_id = customIdValidator.parse(customId);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds components to this modal\n\t *\n\t * @param components - The components to add to this modal\n\t */\n\tpublic addComponents(\n\t\t...components: RestOrArray<\n\t\t\tActionRowBuilder<ModalActionRowComponentBuilder> | APIActionRowComponent<APIModalActionRowComponent>\n\t\t>\n\t) {\n\t\tthis.components.push(\n\t\t\t...normalizeArray(components).map((component) =>\n\t\t\t\tcomponent instanceof ActionRowBuilder\n\t\t\t\t\t? component\n\t\t\t\t\t: new ActionRowBuilder<ModalActionRowComponentBuilder>(component),\n\t\t\t),\n\t\t);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this modal\n\t *\n\t * @param components - The components to set this modal to\n\t */\n\tpublic setComponents(...components: RestOrArray<ActionRowBuilder<ModalActionRowComponentBuilder>>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIModalInteractionResponseCallbackData {\n\t\tvalidateRequiredParameters(this.data.custom_id, this.data.title, this.components);\n\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIModalInteractionResponseCallbackData;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { Locale, type APIApplicationCommandOptionChoice, type LocalizationMap } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t.regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u)\n\t.setValidationEnabled(isValidationEnabled);\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nconst descriptionPredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(100)\n\t.setValidationEnabled(isValidationEnabled);\nconst localePredicate = s.nativeEnum(Locale);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tdescriptionPredicate.parse(description);\n}\n\nconst maxArrayLengthPredicate = s.unknown.array.lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nexport function validateLocale(locale: unknown) {\n\treturn localePredicate.parse(locale);\n}\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tmaxArrayLengthPredicate.parse(options);\n}\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateRequired(required: unknown): asserts required is boolean {\n\tbooleanPredicate.parse(required);\n}\n\nconst choicesLengthPredicate = s.number.lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\n\nexport function validateChoicesLength(amountAdding: number, choices?: APIApplicationCommandOptionChoice[]): void {\n\tchoicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends ApplicationCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\ts.instance(ExpectedInstanceOf).parse(input);\n}\n\nexport const localizationMapPredicate = s\n\t.object<LocalizationMap>(Object.fromEntries(Object.values(Locale).map((locale) => [locale, s.string.nullish])))\n\t.strict.nullish.setValidationEnabled(isValidationEnabled);\n\nexport function validateLocalizationMap(value: unknown): asserts value is LocalizationMap {\n\tlocalizationMapPredicate.parse(value);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tAPIApplicationCommandOption,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIChatInputApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport {\n\tassertReturnOfBuilder,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDefaultPermission,\n\tvalidateLocalizationMap,\n\tvalidateDMPermission,\n\tvalidateMaxOptionsLength,\n\tvalidateRequiredParameters,\n} from './Assertions.js';\nimport { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n@mix(SharedSlashCommandOptions, SharedNameAndDescription)\nexport class SlashCommandBuilder {\n\t/**\n\t * The name of this slash command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The description of this slash command\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The localized descriptions for this command\n\t */\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * The options of this slash command\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIChatInputApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\treturn {\n\t\t\t...this,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether or not to enable this command by default\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use {@link (SlashCommandBuilder:class).setDefaultMemberPermissions} or {@link (SlashCommandBuilder:class).setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled - If the command should be enabled in DMs\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand group to this command\n\t *\n\t * @param input - A function that returns a subcommand group builder, or an already built builder\n\t */\n\tpublic addSubcommandGroup(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandGroupBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandGroupBuilder) => SlashCommandSubcommandGroupBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a new subcommand to this command\n\t *\n\t * @param input - A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t): SlashCommandSubcommandsOnlyBuilder {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n\nexport interface SlashCommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions {}\n\nexport interface SlashCommandSubcommandsOnlyBuilder\n\textends Omit<SlashCommandBuilder, Exclude<keyof SharedSlashCommandOptions, 'options'>> {}\n\nexport interface SlashCommandOptionsOnlyBuilder\n\textends SharedNameAndDescription,\n\t\tSharedSlashCommandOptions,\n\t\tPick<SlashCommandBuilder, 'toJSON'> {}\n\nexport interface ToAPIApplicationCommandOptions {\n\ttoJSON(): APIApplicationCommandOption;\n}\n","import {\n\tApplicationCommandOptionType,\n\ttype APIApplicationCommandSubcommandGroupOption,\n\ttype APIApplicationCommandSubcommandOption,\n} from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder.js';\nimport type { ApplicationCommandOptionBase } from './mixins/ApplicationCommandOptionBase.js';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription.js';\nimport { SharedSlashCommandOptions } from './mixins/SharedSlashCommandOptions.js';\n\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands part of this subcommand group\n\t */\n\tpublic readonly options: SlashCommandSubcommandBuilder[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group\n\t *\n\t * @param input - A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-use-before-define\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandSubcommandGroupOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this subcommand\n\t */\n\tpublic readonly options: ApplicationCommandOptionBase[] = [];\n\n\tpublic toJSON(): APIApplicationCommandSubcommandOption {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tname_localizations: this.name_localizations,\n\t\t\tdescription: this.description,\n\t\t\tdescription_localizations: this.description_localizations,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n","import type { LocaleString, LocalizationMap } from 'discord-api-types/v10';\nimport { validateDescription, validateLocale, validateName } from '../Assertions.js';\n\nexport class SharedNameAndDescription {\n\tpublic readonly name!: string;\n\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\tpublic readonly description!: string;\n\n\tpublic readonly description_localizations?: LocalizationMap;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name - The name\n\t */\n\tpublic setName(name: string): this {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description\n\t *\n\t * @param description - The description\n\t */\n\tpublic setDescription(description: string) {\n\t\t// Assert the description matches the conditions\n\t\tvalidateDescription(description);\n\n\t\tReflect.set(this, 'description', description);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedName - The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames - The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames)) {\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a description localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedDescription - The localized description for the given locale\n\t */\n\tpublic setDescriptionLocalization(locale: LocaleString, localizedDescription: string | null) {\n\t\tif (!this.description_localizations) {\n\t\t\tReflect.set(this, 'description_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedDescription === null) {\n\t\t\tthis.description_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateDescription(localizedDescription);\n\n\t\tthis.description_localizations![parsedLocale] = localizedDescription;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the description localizations\n\t *\n\t * @param localizedDescriptions - The dictionary of localized descriptions to set\n\t */\n\tpublic setDescriptionLocalizations(localizedDescriptions: LocalizationMap | null) {\n\t\tif (localizedDescriptions === null) {\n\t\t\tReflect.set(this, 'description_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'description_localizations', {});\n\t\tfor (const args of Object.entries(localizedDescriptions)) {\n\t\t\tthis.setDescriptionLocalization(...(args as [LocaleString, string | null]));\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandAttachmentOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandAttachmentOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Attachment as const;\n\n\tpublic toJSON(): APIApplicationCommandAttachmentOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import type { APIApplicationCommandBasicOption, ApplicationCommandOptionType } from 'discord-api-types/v10';\nimport { validateRequiredParameters, validateRequired, validateLocalizationMap } from '../Assertions.js';\nimport { SharedNameAndDescription } from './NameAndDescription.js';\n\nexport abstract class ApplicationCommandOptionBase extends SharedNameAndDescription {\n\tpublic abstract readonly type: ApplicationCommandOptionType;\n\n\tpublic readonly required: boolean = false;\n\n\t/**\n\t * Marks the option as required\n\t *\n\t * @param required - If this option should be required\n\t */\n\tpublic setRequired(required: boolean) {\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(required);\n\n\t\tReflect.set(this, 'required', required);\n\n\t\treturn this;\n\t}\n\n\tpublic abstract toJSON(): APIApplicationCommandBasicOption;\n\n\tprotected runRequiredValidations() {\n\t\tvalidateRequiredParameters(this.name, this.description, []);\n\n\t\t// Validate localizations\n\t\tvalidateLocalizationMap(this.name_localizations);\n\t\tvalidateLocalizationMap(this.description_localizations);\n\n\t\t// Assert that you actually passed a boolean\n\t\tvalidateRequired(this.required);\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandBooleanOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandBooleanOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Boolean as const;\n\n\tpublic toJSON(): APIApplicationCommandBooleanOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandChannelOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionChannelTypesMixin } from '../mixins/ApplicationCommandOptionChannelTypesMixin.js';\n\n@mix(ApplicationCommandOptionChannelTypesMixin)\nexport class SlashCommandChannelOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Channel as const;\n\n\tpublic toJSON(): APIApplicationCommandChannelOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandChannelOption extends ApplicationCommandOptionChannelTypesMixin {}\n","import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildAnnouncement,\n\tChannelType.AnnouncementThread,\n\tChannelType.PublicThread,\n\tChannelType.PrivateThread,\n\tChannelType.GuildStageVoice,\n\tChannelType.GuildForum,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandIntegerOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number.int;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandIntegerOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Integer as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandIntegerOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandIntegerOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","export abstract class ApplicationCommandNumericOptionMinMaxValueMixin {\n\tpublic readonly max_value?: number;\n\n\tpublic readonly min_value?: number;\n\n\t/**\n\t * Sets the maximum number value of this option\n\t *\n\t * @param max - The maximum value this option can be\n\t */\n\tpublic abstract setMaxValue(max: number): this;\n\n\t/**\n\t * Sets the minimum number value of this option\n\t *\n\t * @param min - The minimum value this option can be\n\t */\n\tpublic abstract setMinValue(min: number): this;\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandOptionChoice } from 'discord-api-types/v10';\nimport { localizationMapPredicate, validateChoicesLength } from '../Assertions.js';\n\nconst stringPredicate = s.string.lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nconst numberPredicate = s.number.greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nconst choicesPredicate = s.object({\n\tname: stringPredicate,\n\tname_localizations: localizationMapPredicate,\n\tvalue: s.union(stringPredicate, numberPredicate),\n}).array;\nconst booleanPredicate = s.boolean;\n\nexport class ApplicationCommandOptionWithChoicesAndAutocompleteMixin<T extends number | string> {\n\tpublic readonly choices?: APIApplicationCommandOptionChoice<T>[];\n\n\tpublic readonly autocomplete?: boolean;\n\n\t// Since this is present and this is a mixin, this is needed\n\tpublic readonly type!: ApplicationCommandOptionType;\n\n\t/**\n\t * Adds multiple choices for this option\n\t *\n\t * @param choices - The choices to add\n\t */\n\tpublic addChoices(...choices: APIApplicationCommandOptionChoice<T>[]): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tif (this.choices === undefined) {\n\t\t\tReflect.set(this, 'choices', []);\n\t\t}\n\n\t\tvalidateChoicesLength(choices.length, this.choices);\n\n\t\tfor (const { name, name_localizations, value } of choices) {\n\t\t\t// Validate the value\n\t\t\tif (this.type === ApplicationCommandOptionType.String) {\n\t\t\t\tstringPredicate.parse(value);\n\t\t\t} else {\n\t\t\t\tnumberPredicate.parse(value);\n\t\t\t}\n\n\t\t\tthis.choices!.push({ name, name_localizations, value });\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tpublic setChoices<Input extends APIApplicationCommandOptionChoice<T>[]>(...choices: Input): this {\n\t\tif (choices.length > 0 && this.autocomplete) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tchoicesPredicate.parse(choices);\n\n\t\tReflect.set(this, 'choices', []);\n\t\tthis.addChoices(...choices);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Marks the option as autocompletable\n\t *\n\t * @param autocomplete - If this option should be autocompletable\n\t */\n\tpublic setAutocomplete(autocomplete: boolean): this {\n\t\t// Assert that you actually passed a boolean\n\t\tbooleanPredicate.parse(autocomplete);\n\n\t\tif (autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\tReflect.set(this, 'autocomplete', autocomplete);\n\n\t\treturn this;\n\t}\n}\n","import { ApplicationCommandOptionType, type APIApplicationCommandMentionableOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandMentionableOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.Mentionable as const;\n\n\tpublic toJSON(): APIApplicationCommandMentionableOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandNumberOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandNumericOptionMinMaxValueMixin } from '../mixins/ApplicationCommandNumericOptionMinMaxValueMixin.js';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst numberValidator = s.number;\n\n@mix(ApplicationCommandNumericOptionMinMaxValueMixin, ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandNumberOption\n\textends ApplicationCommandOptionBase\n\timplements ApplicationCommandNumericOptionMinMaxValueMixin\n{\n\tpublic readonly type = ApplicationCommandOptionType.Number as const;\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n\t */\n\tpublic setMaxValue(max: number): this {\n\t\tnumberValidator.parse(max);\n\n\t\tReflect.set(this, 'max_value', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n\t */\n\tpublic setMinValue(min: number): this {\n\t\tnumberValidator.parse(min);\n\n\t\tReflect.set(this, 'min_value', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandNumberOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandNumberOption\n\textends ApplicationCommandNumericOptionMinMaxValueMixin,\n\t\tApplicationCommandOptionWithChoicesAndAutocompleteMixin<number> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandRoleOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandRoleOption extends ApplicationCommandOptionBase {\n\tpublic override readonly type = ApplicationCommandOptionType.Role as const;\n\n\tpublic toJSON(): APIApplicationCommandRoleOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandOptionType, type APIApplicationCommandStringOption } from 'discord-api-types/v10';\nimport { mix } from 'ts-mixer';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\nimport { ApplicationCommandOptionWithChoicesAndAutocompleteMixin } from '../mixins/ApplicationCommandOptionWithChoicesAndAutocompleteMixin.js';\n\nconst minLengthValidator = s.number.greaterThanOrEqual(0).lessThanOrEqual(6_000);\nconst maxLengthValidator = s.number.greaterThanOrEqual(1).lessThanOrEqual(6_000);\n\n@mix(ApplicationCommandOptionWithChoicesAndAutocompleteMixin)\nexport class SlashCommandStringOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.String as const;\n\n\tpublic readonly max_length?: number;\n\n\tpublic readonly min_length?: number;\n\n\t/**\n\t * Sets the maximum length of this string option.\n\t *\n\t * @param max - The maximum length this option can be\n\t */\n\tpublic setMaxLength(max: number): this {\n\t\tmaxLengthValidator.parse(max);\n\n\t\tReflect.set(this, 'max_length', max);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the minimum length of this string option.\n\t *\n\t * @param min - The minimum length this option can be\n\t */\n\tpublic setMinLength(min: number): this {\n\t\tminLengthValidator.parse(min);\n\n\t\tReflect.set(this, 'min_length', min);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON(): APIApplicationCommandStringOption {\n\t\tthis.runRequiredValidations();\n\n\t\tif (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n\t\t\tthrow new RangeError('Autocomplete and choices are mutually exclusive to each other.');\n\t\t}\n\n\t\treturn { ...this };\n\t}\n}\n\nexport interface SlashCommandStringOption extends ApplicationCommandOptionWithChoicesAndAutocompleteMixin<string> {}\n","import { ApplicationCommandOptionType, type APIApplicationCommandUserOption } from 'discord-api-types/v10';\nimport { ApplicationCommandOptionBase } from '../mixins/ApplicationCommandOptionBase.js';\n\nexport class SlashCommandUserOption extends ApplicationCommandOptionBase {\n\tpublic readonly type = ApplicationCommandOptionType.User as const;\n\n\tpublic toJSON(): APIApplicationCommandUserOption {\n\t\tthis.runRequiredValidations();\n\n\t\treturn { ...this };\n\t}\n}\n","import { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions.js';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\nimport { SlashCommandAttachmentOption } from '../options/attachment.js';\nimport { SlashCommandBooleanOption } from '../options/boolean.js';\nimport { SlashCommandChannelOption } from '../options/channel.js';\nimport { SlashCommandIntegerOption } from '../options/integer.js';\nimport { SlashCommandMentionableOption } from '../options/mentionable.js';\nimport { SlashCommandNumberOption } from '../options/number.js';\nimport { SlashCommandRoleOption } from '../options/role.js';\nimport { SlashCommandStringOption } from '../options/string.js';\nimport { SlashCommandUserOption } from '../options/user.js';\nimport type { ApplicationCommandOptionBase } from './ApplicationCommandOptionBase.js';\n\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds an attachment option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addAttachmentOption(\n\t\tinput: SlashCommandAttachmentOption | ((builder: SlashCommandAttachmentOption) => SlashCommandAttachmentOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t| SlashCommandStringOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandStringOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandStringOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandStringOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t| SlashCommandIntegerOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandIntegerOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandIntegerOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandIntegerOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\t/**\n\t * Adds a number option\n\t *\n\t * @param input - A function that returns an option builder, or an already built builder\n\t */\n\tpublic addNumberOption(\n\t\tinput:\n\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t| SlashCommandNumberOption\n\t\t\t| ((\n\t\t\t\t\tbuilder: SlashCommandNumberOption,\n\t\t\t  ) =>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'addChoices'>\n\t\t\t\t\t| Omit<SlashCommandNumberOption, 'setAutocomplete'>\n\t\t\t\t\t| SlashCommandNumberOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n\t}\n\n\tprivate _sharedAddOptionMethod<T extends ApplicationCommandOptionBase>(\n\t\tinput:\n\t\t\t| Omit<T, 'addChoices'>\n\t\t\t| Omit<T, 'setAutocomplete'>\n\t\t\t| T\n\t\t\t| ((builder: T) => Omit<T, 'addChoices'> | Omit<T, 'setAutocomplete'> | T),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n","import { s } from '@sapphire/shapeshift';\nimport { ApplicationCommandType } from 'discord-api-types/v10';\nimport { isValidationEnabled } from '../../util/validation.js';\nimport type { ContextMenuCommandType } from './ContextMenuCommandBuilder.js';\n\nconst namePredicate = s.string\n\t.lengthGreaterThanOrEqual(1)\n\t.lengthLessThanOrEqual(32)\n\t// eslint-disable-next-line prefer-named-capture-group, unicorn/no-unsafe-regex\n\t.regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u)\n\t.setValidationEnabled(isValidationEnabled);\nconst typePredicate = s\n\t.union(s.literal(ApplicationCommandType.User), s.literal(ApplicationCommandType.Message))\n\t.setValidationEnabled(isValidationEnabled);\nconst booleanPredicate = s.boolean;\n\nexport function validateDefaultPermission(value: unknown): asserts value is boolean {\n\tbooleanPredicate.parse(value);\n}\n\nexport function validateName(name: unknown): asserts name is string {\n\tnamePredicate.parse(name);\n}\n\nexport function validateType(type: unknown): asserts type is ContextMenuCommandType {\n\ttypePredicate.parse(type);\n}\n\nexport function validateRequiredParameters(name: string, type: number) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert type is valid\n\tvalidateType(type);\n}\n\nconst dmPermissionPredicate = s.boolean.nullish;\n\nexport function validateDMPermission(value: unknown): asserts value is boolean | null | undefined {\n\tdmPermissionPredicate.parse(value);\n}\n\nconst memberPermissionPredicate = s.union(\n\ts.bigint.transform((value) => value.toString()),\n\ts.number.safeInt.transform((value) => value.toString()),\n\ts.string.regex(/^\\d+$/),\n).nullish;\n\nexport function validateDefaultMemberPermissions(permissions: unknown) {\n\treturn memberPermissionPredicate.parse(permissions);\n}\n","import type {\n\tApplicationCommandType,\n\tLocaleString,\n\tLocalizationMap,\n\tPermissions,\n\tRESTPostAPIContextMenuApplicationCommandsJSONBody,\n} from 'discord-api-types/v10';\nimport { validateLocale, validateLocalizationMap } from '../slashCommands/Assertions.js';\nimport {\n\tvalidateRequiredParameters,\n\tvalidateName,\n\tvalidateType,\n\tvalidateDefaultPermission,\n\tvalidateDefaultMemberPermissions,\n\tvalidateDMPermission,\n} from './Assertions.js';\n\nexport class ContextMenuCommandBuilder {\n\t/**\n\t * The name of this context menu command\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The localized names for this command\n\t */\n\tpublic readonly name_localizations?: LocalizationMap;\n\n\t/**\n\t * The type of this context menu command\n\t */\n\tpublic readonly type: ContextMenuCommandType = undefined!;\n\n\t/**\n\t * Whether the command is enabled by default when the app is added to a guild\n\t *\n\t * @deprecated This property is deprecated and will be removed in the future.\n\t * You should use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic readonly default_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Set of permissions represented as a bit set for the command\n\t */\n\tpublic readonly default_member_permissions: Permissions | null | undefined = undefined;\n\n\t/**\n\t * Indicates whether the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t */\n\tpublic readonly dm_permission: boolean | undefined = undefined;\n\n\t/**\n\t * Sets the name\n\t *\n\t * @param name - The name\n\t */\n\tpublic setName(name: string) {\n\t\t// Assert the name matches the conditions\n\t\tvalidateName(name);\n\n\t\tReflect.set(this, 'name', name);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the type\n\t *\n\t * @param type - The type\n\t */\n\tpublic setType(type: ContextMenuCommandType) {\n\t\t// Assert the type is valid\n\t\tvalidateType(type);\n\n\t\tReflect.set(this, 'type', type);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets whether the command is enabled by default when the application is added to a guild.\n\t *\n\t * @remarks\n\t * If set to `false`, you will have to later `PUT` the permissions for this command.\n\t * @param value - Whether or not to enable this command by default\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n\t */\n\tpublic setDefaultPermission(value: boolean) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDefaultPermission(value);\n\n\t\tReflect.set(this, 'default_permission', value);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the default permissions a member should have in order to run the command.\n\t *\n\t * @remarks\n\t * You can set this to `'0'` to disable the command by default.\n\t * @param permissions - The permissions bit field to set\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDefaultMemberPermissions(permissions: Permissions | bigint | number | null | undefined) {\n\t\t// Assert the value and parse it\n\t\tconst permissionValue = validateDefaultMemberPermissions(permissions);\n\n\t\tReflect.set(this, 'default_member_permissions', permissionValue);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if the command is available in DMs with the application, only for globally-scoped commands.\n\t * By default, commands are visible.\n\t *\n\t * @param enabled - If the command should be enabled in DMs\n\t * @see https://discord.com/developers/docs/interactions/application-commands#permissions\n\t */\n\tpublic setDMPermission(enabled: boolean | null | undefined) {\n\t\t// Assert the value matches the conditions\n\t\tvalidateDMPermission(enabled);\n\n\t\tReflect.set(this, 'dm_permission', enabled);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets a name localization\n\t *\n\t * @param locale - The locale to set a description for\n\t * @param localizedName - The localized description for the given locale\n\t */\n\tpublic setNameLocalization(locale: LocaleString, localizedName: string | null) {\n\t\tif (!this.name_localizations) {\n\t\t\tReflect.set(this, 'name_localizations', {});\n\t\t}\n\n\t\tconst parsedLocale = validateLocale(locale);\n\n\t\tif (localizedName === null) {\n\t\t\tthis.name_localizations![parsedLocale] = null;\n\t\t\treturn this;\n\t\t}\n\n\t\tvalidateName(localizedName);\n\n\t\tthis.name_localizations![parsedLocale] = localizedName;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the name localizations\n\t *\n\t * @param localizedNames - The dictionary of localized descriptions to set\n\t */\n\tpublic setNameLocalizations(localizedNames: LocalizationMap | null) {\n\t\tif (localizedNames === null) {\n\t\t\tReflect.set(this, 'name_localizations', null);\n\t\t\treturn this;\n\t\t}\n\n\t\tReflect.set(this, 'name_localizations', {});\n\n\t\tfor (const args of Object.entries(localizedNames))\n\t\t\tthis.setNameLocalization(...(args as [LocaleString, string | null]));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the final data that should be sent to Discord.\n\t *\n\t * @remarks\n\t * This method runs validations on the data before serializing it.\n\t * As such, it may throw an error if the data is invalid.\n\t */\n\tpublic toJSON(): RESTPostAPIContextMenuApplicationCommandsJSONBody {\n\t\tvalidateRequiredParameters(this.name, this.type);\n\n\t\tvalidateLocalizationMap(this.name_localizations);\n\n\t\treturn { ...this };\n\t}\n}\n\nexport type ContextMenuCommandType = ApplicationCommandType.Message | ApplicationCommandType.User;\n","import type { APIEmbed } from 'discord-api-types/v10';\n\nexport function embedLength(data: APIEmbed) {\n\treturn (\n\t\t(data.title?.length ?? 0) +\n\t\t(data.description?.length ?? 0) +\n\t\t(data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) +\n\t\t(data.footer?.text.length ?? 0) +\n\t\t(data.author?.name.length ?? 0)\n\t);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}