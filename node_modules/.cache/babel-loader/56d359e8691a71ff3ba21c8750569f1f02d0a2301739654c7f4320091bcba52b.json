{"ast":null,"code":"'use strict';\n\nconst {\n  Emoji\n} = require('./Emoji');\n\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n * @abstract\n */\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n    this.guild = guild;\n    this.requiresColons = null;\n    this.managed = null;\n    this.available = null;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('name' in data) this.name = data.name;\n    if ('require_colons' in data) {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n    if ('managed' in data) {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n    if ('available' in data) {\n      /**\n       * Whether this emoji is available\n       * @type {?boolean}\n       */\n      this.available = data.available;\n    }\n  }\n}\nmodule.exports = BaseGuildEmoji;","map":{"version":3,"names":["Emoji","require","BaseGuildEmoji","constructor","client","data","guild","requiresColons","managed","available","_patch","name","require_colons","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/BaseGuildEmoji.js"],"sourcesContent":["'use strict';\n\nconst { Emoji } = require('./Emoji');\n\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n * @abstract\n */\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n    this.guild = guild;\n\n    this.requiresColons = null;\n    this.managed = null;\n    this.available = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) this.name = data.name;\n\n    if ('require_colons' in data) {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('available' in data) {\n      /**\n       * Whether this emoji is available\n       * @type {?boolean}\n       */\n      this.available = data.available;\n    }\n  }\n}\n\nmodule.exports = BaseGuildEmoji;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASF,KAAK,CAAC;EACjCG,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC/B,KAAK,CAACF,MAAM,EAAEC,IAAI,CAAC;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACC,MAAM,CAACL,IAAI,CAAC;EACnB;EAEAK,MAAM,CAACL,IAAI,EAAE;IACX,IAAI,MAAM,IAAIA,IAAI,EAAE,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACM,IAAI;IAEzC,IAAI,gBAAgB,IAAIN,IAAI,EAAE;MAC5B;AACN;AACA;AACA;MACM,IAAI,CAACE,cAAc,GAAGF,IAAI,CAACO,cAAc;IAC3C;IAEA,IAAI,SAAS,IAAIP,IAAI,EAAE;MACrB;AACN;AACA;AACA;MACM,IAAI,CAACG,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC7B;IAEA,IAAI,WAAW,IAAIH,IAAI,EAAE;MACvB;AACN;AACA;AACA;MACM,IAAI,CAACI,SAAS,GAAGJ,IAAI,CAACI,SAAS;IACjC;EACF;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGZ,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}