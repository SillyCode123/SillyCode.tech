{"ast":null,"code":"'use strict';\n\nconst {\n  InteractionResponseType,\n  Routes\n} = require('discord-api-types/v10');\nconst BaseInteraction = require('./BaseInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents an autocomplete interaction.\n * @extends {BaseInteraction}\n */\nclass AutocompleteInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name AutocompleteInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * The invoked application command's type\n     * @type {ApplicationCommandType}\n     */\n    this.commandType = data.data.type;\n\n    /**\n     * The id of the guild the invoked application command is registered to\n     * @type {?Snowflake}\n     */\n    this.commandGuildId = data.data.guild_id ?? null;\n\n    /**\n     * Whether this interaction has already received a response\n     * @type {boolean}\n     */\n    this.responded = false;\n\n    /**\n     * The options passed to the command\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options ?? []);\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Sends results for the autocomplete of this interaction.\n   * @param {ApplicationCommandOptionChoiceData[]} options The options for the autocomplete\n   * @returns {Promise<void>}\n   * @example\n   * // respond to autocomplete interaction\n   * interaction.respond([\n   *  {\n   *    name: 'Option 1',\n   *    value: 'option1',\n   *  },\n   * ])\n   *  .then(() => console.log('Successfully responded to the autocomplete interaction'))\n   *  .catch(console.error);\n   */\n  async respond(options) {\n    if (this.responded) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.ApplicationCommandAutocompleteResult,\n        data: {\n          choices: options\n        }\n      },\n      auth: false\n    });\n    this.responded = true;\n  }\n}\nmodule.exports = AutocompleteInteraction;","map":{"version":3,"names":["InteractionResponseType","Routes","require","BaseInteraction","CommandInteractionOptionResolver","DiscordjsError","ErrorCodes","AutocompleteInteraction","constructor","client","data","commandId","id","commandName","name","commandType","type","commandGuildId","guild_id","responded","options","command","guild","commands","cache","get","application","respond","InteractionAlreadyReplied","rest","post","interactionCallback","token","body","ApplicationCommandAutocompleteResult","choices","auth","module","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/AutocompleteInteraction.js"],"sourcesContent":["'use strict';\n\nconst { InteractionResponseType, Routes } = require('discord-api-types/v10');\nconst BaseInteraction = require('./BaseInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an autocomplete interaction.\n * @extends {BaseInteraction}\n */\nclass AutocompleteInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name AutocompleteInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * The invoked application command's type\n     * @type {ApplicationCommandType}\n     */\n    this.commandType = data.data.type;\n\n    /**\n     * The id of the guild the invoked application command is registered to\n     * @type {?Snowflake}\n     */\n    this.commandGuildId = data.data.guild_id ?? null;\n\n    /**\n     * Whether this interaction has already received a response\n     * @type {boolean}\n     */\n    this.responded = false;\n\n    /**\n     * The options passed to the command\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options ?? []);\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Sends results for the autocomplete of this interaction.\n   * @param {ApplicationCommandOptionChoiceData[]} options The options for the autocomplete\n   * @returns {Promise<void>}\n   * @example\n   * // respond to autocomplete interaction\n   * interaction.respond([\n   *  {\n   *    name: 'Option 1',\n   *    value: 'option1',\n   *  },\n   * ])\n   *  .then(() => console.log('Successfully responded to the autocomplete interaction'))\n   *  .catch(console.error);\n   */\n  async respond(options) {\n    if (this.responded) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.ApplicationCommandAutocompleteResult,\n        data: {\n          choices: options,\n        },\n      },\n      auth: false,\n    });\n    this.responded = true;\n  }\n}\n\nmodule.exports = AutocompleteInteraction;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAM;EAAEA,uBAAuB;EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC5E,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAME,gCAAgC,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AACtF,MAAM;EAAEG,cAAc;EAAEC;AAAW,CAAC,GAAGJ,OAAO,CAAC,WAAW,CAAC;;AAE3D;AACA;AACA;AACA;AACA,MAAMK,uBAAuB,SAASJ,eAAe,CAAC;EACpDK,WAAW,CAACC,MAAM,EAAEC,IAAI,EAAE;IACxB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;;IAEnB;AACJ;AACA;AACA;AACA;;IAEI;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGD,IAAI,CAACA,IAAI,CAACE,EAAE;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAGH,IAAI,CAACA,IAAI,CAACI,IAAI;;IAEjC;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAGL,IAAI,CAACA,IAAI,CAACM,IAAI;;IAEjC;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAGP,IAAI,CAACA,IAAI,CAACQ,QAAQ,IAAI,IAAI;;IAEhD;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,KAAK;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG,IAAIhB,gCAAgC,CAAC,IAAI,CAACK,MAAM,EAAEC,IAAI,CAACA,IAAI,CAACU,OAAO,IAAI,EAAE,CAAC;EAC3F;;EAEA;AACF;AACA;AACA;EACE,IAAIC,OAAO,GAAG;IACZ,MAAMT,EAAE,GAAG,IAAI,CAACD,SAAS;IACzB,OAAO,IAAI,CAACW,KAAK,EAAEC,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACb,EAAE,CAAC,IAAI,IAAI,CAACH,MAAM,CAACiB,WAAW,CAACH,QAAQ,CAACC,KAAK,CAACC,GAAG,CAACb,EAAE,CAAC,IAAI,IAAI;EACrG;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMe,OAAO,CAACP,OAAO,EAAE;IACrB,IAAI,IAAI,CAACD,SAAS,EAAE,MAAM,IAAId,cAAc,CAACC,UAAU,CAACsB,yBAAyB,CAAC;IAElF,MAAM,IAAI,CAACnB,MAAM,CAACoB,IAAI,CAACC,IAAI,CAAC7B,MAAM,CAAC8B,mBAAmB,CAAC,IAAI,CAACnB,EAAE,EAAE,IAAI,CAACoB,KAAK,CAAC,EAAE;MAC3EC,IAAI,EAAE;QACJjB,IAAI,EAAEhB,uBAAuB,CAACkC,oCAAoC;QAClExB,IAAI,EAAE;UACJyB,OAAO,EAAEf;QACX;MACF,CAAC;MACDgB,IAAI,EAAE;IACR,CAAC,CAAC;IACF,IAAI,CAACjB,SAAS,GAAG,IAAI;EACvB;AACF;AAEAkB,MAAM,CAACC,OAAO,GAAG/B,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}