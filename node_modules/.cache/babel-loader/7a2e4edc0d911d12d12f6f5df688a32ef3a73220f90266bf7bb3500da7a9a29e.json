{"ast":null,"code":"'use strict';\n\nconst {\n  DiscordSnowflake\n} = require('@sapphire/snowflake');\nconst {\n  GuildScheduledEventStatus,\n  GuildScheduledEventEntityType,\n  RouteBases\n} = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst {\n  DiscordjsError,\n  ErrorCodes\n} = require('../errors');\n\n/**\n * Represents a scheduled event in a {@link Guild}.\n * @extends {Base}\n */\nclass GuildScheduledEvent extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the guild scheduled event\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The id of the guild this guild scheduled event belongs to\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n    this._patch(data);\n  }\n  _patch(data) {\n    if ('channel_id' in data) {\n      /**\n       * The channel id in which the scheduled event will be hosted,\n       * or `null` if entity type is {@link GuildScheduledEventEntityType.External}\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this guild scheduled event\n       * @type {?Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    } else {\n      this.creatorId ??= null;\n    }\n\n    /**\n     * The name of the guild scheduled event\n     * @type {string}\n     */\n    this.name = data.name;\n    if ('description' in data) {\n      /**\n       * The description of the guild scheduled event\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * The timestamp the guild scheduled event will start at\n     * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n     * @type {?number}\n     */\n    this.scheduledStartTimestamp = data.scheduled_start_time ? Date.parse(data.scheduled_start_time) : null;\n\n    /**\n     * The timestamp the guild scheduled event will end at,\n     * or `null` if the event does not have a scheduled time to end\n     * @type {?number}\n     */\n    this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;\n\n    /**\n     * The privacy level of the guild scheduled event\n     * @type {GuildScheduledEventPrivacyLevel}\n     */\n    this.privacyLevel = data.privacy_level;\n\n    /**\n     * The status of the guild scheduled event\n     * @type {GuildScheduledEventStatus}\n     */\n    this.status = data.status;\n\n    /**\n     * The type of hosting entity associated with the scheduled event\n     * @type {GuildScheduledEventEntityType}\n     */\n    this.entityType = data.entity_type;\n    if ('entity_id' in data) {\n      /**\n       * The id of the hosting entity associated with the scheduled event\n       * @type {?Snowflake}\n       */\n      this.entityId = data.entity_id;\n    } else {\n      this.entityId ??= null;\n    }\n    if ('user_count' in data) {\n      /**\n       * The number of users who are subscribed to this guild scheduled event\n       * @type {?number}\n       */\n      this.userCount = data.user_count;\n    } else {\n      this.userCount ??= null;\n    }\n    if ('creator' in data) {\n      /**\n       * The user that created this guild scheduled event\n       * @type {?User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    } else {\n      this.creator ??= this.client.users.resolve(this.creatorId);\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * Represents the additional metadata for a {@link GuildScheduledEvent}\n     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}\n     * @typedef {Object} GuildScheduledEventEntityMetadata\n     * @property {?string} location The location of the guild scheduled event\n     */\n    /* eslint-enable max-len */\n\n    if ('entity_metadata' in data) {\n      if (data.entity_metadata) {\n        /**\n         * Additional metadata\n         * @type {?GuildScheduledEventEntityMetadata}\n         */\n        this.entityMetadata = {\n          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null\n        };\n      } else {\n        this.entityMetadata = null;\n      }\n    } else {\n      this.entityMetadata ??= null;\n    }\n    if ('image' in data) {\n      /**\n       * The cover image hash for this scheduled event\n       * @type {?string}\n       */\n      this.image = data.image;\n    } else {\n      this.image ??= null;\n    }\n  }\n\n  /**\n   * The URL of this scheduled event's cover image\n   * @param {BaseImageURLOptions} [options={}] Options for image URL\n   * @returns {?string}\n   */\n  coverImageURL() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.image && this.client.rest.cdn.guildScheduledEventCover(this.id, this.image, options);\n  }\n\n  /**\n   * The timestamp the guild scheduled event was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the guild scheduled event was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will start at\n   * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledStartAt() {\n    return this.scheduledStartTimestamp && new Date(this.scheduledStartTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will end at,\n   * or `null` if the event does not have a scheduled time to end\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledEndAt() {\n    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);\n  }\n\n  /**\n   * The channel associated with this scheduled event\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this scheduled event belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL to the guild scheduled event\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.scheduledEvent}/${this.guildId}/${this.id}`;\n  }\n\n  /**\n   * Options used to create an invite URL to a {@link GuildScheduledEvent}\n   * @typedef {CreateInviteOptions} CreateGuildScheduledEventInviteURLOptions\n   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.\n   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is\n   * {@link GuildScheduledEventEntityType.External}, gets ignored otherwise</warn>\n   */\n\n  /**\n   * Creates an invite URL to this guild scheduled event.\n   * @param {CreateGuildScheduledEventInviteURLOptions} [options] The options to create the invite\n   * @returns {Promise<string>}\n   */\n  async createInviteURL(options) {\n    let channelId = this.channelId;\n    if (this.entityType === GuildScheduledEventEntityType.External) {\n      if (!options?.channel) throw new DiscordjsError(ErrorCodes.InviteOptionsMissingChannel);\n      channelId = this.guild.channels.resolveId(options.channel);\n      if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    }\n    const invite = await this.guild.invites.create(channelId, options);\n    return `${RouteBases.invite}/${invite.code}?event=${this.id}`;\n  }\n\n  /**\n   * Edits this guild scheduled event.\n   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Edit a guild scheduled event\n   * guildScheduledEvent.edit({ name: 'Party' })\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.scheduledEvents.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this guild scheduled event.\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Delete a guild scheduled event\n   * guildScheduledEvent.delete()\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.scheduledEvents.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Sets a new name for the guild scheduled event.\n   * @param {string} name The new name of the guild scheduled event\n   * @param {string} [reason] The reason for changing the name\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set name of a guild scheduled event\n   * guildScheduledEvent.setName('Birthday Party')\n   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({\n      name,\n      reason\n    });\n  }\n\n  /**\n   * Sets a new time to schedule the event at.\n   * @param {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @param {string} [reason] The reason for changing the scheduled start time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set start time of a guild scheduled event\n   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledStartTime(scheduledStartTime, reason) {\n    return this.edit({\n      scheduledStartTime,\n      reason\n    });\n  }\n\n  // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented\n  /**\n   * Sets a new time to end the event at.\n   * @param {DateResolvable} scheduledEndTime The time to end the event at\n   * @param {string} [reason] The reason for changing the scheduled end time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set end time of a guild scheduled event\n   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledEndTime(scheduledEndTime, reason) {\n    return this.edit({\n      scheduledEndTime,\n      reason\n    });\n  }\n\n  /**\n   * Sets the new description of the guild scheduled event.\n   * @param {string} description The description of the guild scheduled event\n   * @param {string} [reason] The reason for changing the description\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set description of a guild scheduled event\n   * guildScheduledEvent.setDescription('A virtual birthday party')\n   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n   *  .catch(console.error);\n   */\n  setDescription(description, reason) {\n    return this.edit({\n      description,\n      reason\n    });\n  }\n\n  /**\n   * Sets the new status of the guild scheduled event.\n   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards\n   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>\n   * @param {GuildScheduledEventStatus} status The status of the guild scheduled event\n   * @param {string} [reason] The reason for changing the status\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set status of a guild scheduled event\n   * guildScheduledEvent.setStatus(GuildScheduledEventStatus.Active)\n   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n   *  .catch(console.error);\n   */\n  setStatus(status, reason) {\n    return this.edit({\n      status,\n      reason\n    });\n  }\n\n  /**\n   * Sets the new location of the guild scheduled event.\n   * @param {string} location The location of the guild scheduled event\n   * @param {string} [reason] The reason for changing the location\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set location of a guild scheduled event\n   * guildScheduledEvent.setLocation('Earth')\n   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n   *  .catch(console.error);\n   */\n  setLocation(location, reason) {\n    return this.edit({\n      entityMetadata: {\n        location\n      },\n      reason\n    });\n  }\n\n  /**\n   * Fetches subscribers of this guild scheduled event.\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n  fetchSubscribers(options) {\n    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\n   * console.log(`Event: ${guildScheduledEvent}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has an {@link GuildScheduledEventStatus.Active} status.\n   * @returns {boolean}\n   */\n  isActive() {\n    return this.status === GuildScheduledEventStatus.Active;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Canceled} status.\n   * @returns {boolean}\n   */\n  isCanceled() {\n    return this.status === GuildScheduledEventStatus.Canceled;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Completed} status.\n   * @returns {boolean}\n   */\n  isCompleted() {\n    return this.status === GuildScheduledEventStatus.Completed;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Scheduled} status.\n   * @returns {boolean}\n   */\n  isScheduled() {\n    return this.status === GuildScheduledEventStatus.Scheduled;\n  }\n}\nexports.GuildScheduledEvent = GuildScheduledEvent;","map":{"version":3,"names":["DiscordSnowflake","require","GuildScheduledEventStatus","GuildScheduledEventEntityType","RouteBases","Base","DiscordjsError","ErrorCodes","GuildScheduledEvent","constructor","client","data","id","guildId","guild_id","_patch","channelId","channel_id","creatorId","creator_id","name","description","scheduledStartTimestamp","scheduled_start_time","Date","parse","scheduledEndTimestamp","scheduled_end_time","privacyLevel","privacy_level","status","entityType","entity_type","entityId","entity_id","userCount","user_count","creator","users","_add","resolve","entity_metadata","entityMetadata","location","image","coverImageURL","options","rest","cdn","guildScheduledEventCover","createdTimestamp","timestampFrom","createdAt","scheduledStartAt","scheduledEndAt","channel","channels","guild","guilds","url","scheduledEvent","createInviteURL","External","InviteOptionsMissingChannel","resolveId","GuildChannelResolve","invite","invites","create","code","edit","scheduledEvents","delete","setName","reason","setScheduledStartTime","scheduledStartTime","setScheduledEndTime","scheduledEndTime","setDescription","setStatus","setLocation","fetchSubscribers","toString","isActive","Active","isCanceled","Canceled","isCompleted","Completed","isScheduled","Scheduled","exports"],"sources":["J:/Coding/Projekts/Web/JavaScript/sillcode.tech/node_modules/discord.js/src/structures/GuildScheduledEvent.js"],"sourcesContent":["'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { GuildScheduledEventStatus, GuildScheduledEventEntityType, RouteBases } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents a scheduled event in a {@link Guild}.\n * @extends {Base}\n */\nclass GuildScheduledEvent extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the guild scheduled event\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The id of the guild this guild scheduled event belongs to\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('channel_id' in data) {\n      /**\n       * The channel id in which the scheduled event will be hosted,\n       * or `null` if entity type is {@link GuildScheduledEventEntityType.External}\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this guild scheduled event\n       * @type {?Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    } else {\n      this.creatorId ??= null;\n    }\n\n    /**\n     * The name of the guild scheduled event\n     * @type {string}\n     */\n    this.name = data.name;\n\n    if ('description' in data) {\n      /**\n       * The description of the guild scheduled event\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * The timestamp the guild scheduled event will start at\n     * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n     * @type {?number}\n     */\n    this.scheduledStartTimestamp = data.scheduled_start_time ? Date.parse(data.scheduled_start_time) : null;\n\n    /**\n     * The timestamp the guild scheduled event will end at,\n     * or `null` if the event does not have a scheduled time to end\n     * @type {?number}\n     */\n    this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;\n\n    /**\n     * The privacy level of the guild scheduled event\n     * @type {GuildScheduledEventPrivacyLevel}\n     */\n    this.privacyLevel = data.privacy_level;\n\n    /**\n     * The status of the guild scheduled event\n     * @type {GuildScheduledEventStatus}\n     */\n    this.status = data.status;\n\n    /**\n     * The type of hosting entity associated with the scheduled event\n     * @type {GuildScheduledEventEntityType}\n     */\n    this.entityType = data.entity_type;\n\n    if ('entity_id' in data) {\n      /**\n       * The id of the hosting entity associated with the scheduled event\n       * @type {?Snowflake}\n       */\n      this.entityId = data.entity_id;\n    } else {\n      this.entityId ??= null;\n    }\n\n    if ('user_count' in data) {\n      /**\n       * The number of users who are subscribed to this guild scheduled event\n       * @type {?number}\n       */\n      this.userCount = data.user_count;\n    } else {\n      this.userCount ??= null;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this guild scheduled event\n       * @type {?User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    } else {\n      this.creator ??= this.client.users.resolve(this.creatorId);\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * Represents the additional metadata for a {@link GuildScheduledEvent}\n     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}\n     * @typedef {Object} GuildScheduledEventEntityMetadata\n     * @property {?string} location The location of the guild scheduled event\n     */\n    /* eslint-enable max-len */\n\n    if ('entity_metadata' in data) {\n      if (data.entity_metadata) {\n        /**\n         * Additional metadata\n         * @type {?GuildScheduledEventEntityMetadata}\n         */\n        this.entityMetadata = {\n          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null,\n        };\n      } else {\n        this.entityMetadata = null;\n      }\n    } else {\n      this.entityMetadata ??= null;\n    }\n\n    if ('image' in data) {\n      /**\n       * The cover image hash for this scheduled event\n       * @type {?string}\n       */\n      this.image = data.image;\n    } else {\n      this.image ??= null;\n    }\n  }\n\n  /**\n   * The URL of this scheduled event's cover image\n   * @param {BaseImageURLOptions} [options={}] Options for image URL\n   * @returns {?string}\n   */\n  coverImageURL(options = {}) {\n    return this.image && this.client.rest.cdn.guildScheduledEventCover(this.id, this.image, options);\n  }\n\n  /**\n   * The timestamp the guild scheduled event was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the guild scheduled event was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will start at\n   * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledStartAt() {\n    return this.scheduledStartTimestamp && new Date(this.scheduledStartTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will end at,\n   * or `null` if the event does not have a scheduled time to end\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledEndAt() {\n    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);\n  }\n\n  /**\n   * The channel associated with this scheduled event\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this scheduled event belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL to the guild scheduled event\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.scheduledEvent}/${this.guildId}/${this.id}`;\n  }\n\n  /**\n   * Options used to create an invite URL to a {@link GuildScheduledEvent}\n   * @typedef {CreateInviteOptions} CreateGuildScheduledEventInviteURLOptions\n   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.\n   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is\n   * {@link GuildScheduledEventEntityType.External}, gets ignored otherwise</warn>\n   */\n\n  /**\n   * Creates an invite URL to this guild scheduled event.\n   * @param {CreateGuildScheduledEventInviteURLOptions} [options] The options to create the invite\n   * @returns {Promise<string>}\n   */\n  async createInviteURL(options) {\n    let channelId = this.channelId;\n    if (this.entityType === GuildScheduledEventEntityType.External) {\n      if (!options?.channel) throw new DiscordjsError(ErrorCodes.InviteOptionsMissingChannel);\n      channelId = this.guild.channels.resolveId(options.channel);\n      if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    }\n    const invite = await this.guild.invites.create(channelId, options);\n    return `${RouteBases.invite}/${invite.code}?event=${this.id}`;\n  }\n\n  /**\n   * Edits this guild scheduled event.\n   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Edit a guild scheduled event\n   * guildScheduledEvent.edit({ name: 'Party' })\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.scheduledEvents.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this guild scheduled event.\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Delete a guild scheduled event\n   * guildScheduledEvent.delete()\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.scheduledEvents.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Sets a new name for the guild scheduled event.\n   * @param {string} name The new name of the guild scheduled event\n   * @param {string} [reason] The reason for changing the name\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set name of a guild scheduled event\n   * guildScheduledEvent.setName('Birthday Party')\n   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets a new time to schedule the event at.\n   * @param {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @param {string} [reason] The reason for changing the scheduled start time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set start time of a guild scheduled event\n   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledStartTime(scheduledStartTime, reason) {\n    return this.edit({ scheduledStartTime, reason });\n  }\n\n  // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented\n  /**\n   * Sets a new time to end the event at.\n   * @param {DateResolvable} scheduledEndTime The time to end the event at\n   * @param {string} [reason] The reason for changing the scheduled end time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set end time of a guild scheduled event\n   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledEndTime(scheduledEndTime, reason) {\n    return this.edit({ scheduledEndTime, reason });\n  }\n\n  /**\n   * Sets the new description of the guild scheduled event.\n   * @param {string} description The description of the guild scheduled event\n   * @param {string} [reason] The reason for changing the description\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set description of a guild scheduled event\n   * guildScheduledEvent.setDescription('A virtual birthday party')\n   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n   *  .catch(console.error);\n   */\n  setDescription(description, reason) {\n    return this.edit({ description, reason });\n  }\n\n  /**\n   * Sets the new status of the guild scheduled event.\n   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards\n   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>\n   * @param {GuildScheduledEventStatus} status The status of the guild scheduled event\n   * @param {string} [reason] The reason for changing the status\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set status of a guild scheduled event\n   * guildScheduledEvent.setStatus(GuildScheduledEventStatus.Active)\n   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n   *  .catch(console.error);\n   */\n  setStatus(status, reason) {\n    return this.edit({ status, reason });\n  }\n\n  /**\n   * Sets the new location of the guild scheduled event.\n   * @param {string} location The location of the guild scheduled event\n   * @param {string} [reason] The reason for changing the location\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set location of a guild scheduled event\n   * guildScheduledEvent.setLocation('Earth')\n   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n   *  .catch(console.error);\n   */\n  setLocation(location, reason) {\n    return this.edit({ entityMetadata: { location }, reason });\n  }\n\n  /**\n   * Fetches subscribers of this guild scheduled event.\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n  fetchSubscribers(options) {\n    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\n   * console.log(`Event: ${guildScheduledEvent}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has an {@link GuildScheduledEventStatus.Active} status.\n   * @returns {boolean}\n   */\n  isActive() {\n    return this.status === GuildScheduledEventStatus.Active;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Canceled} status.\n   * @returns {boolean}\n   */\n  isCanceled() {\n    return this.status === GuildScheduledEventStatus.Canceled;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Completed} status.\n   * @returns {boolean}\n   */\n  isCompleted() {\n    return this.status === GuildScheduledEventStatus.Completed;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Scheduled} status.\n   * @returns {boolean}\n   */\n  isScheduled() {\n    return this.status === GuildScheduledEventStatus.Scheduled;\n  }\n}\n\nexports.GuildScheduledEvent = GuildScheduledEvent;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}